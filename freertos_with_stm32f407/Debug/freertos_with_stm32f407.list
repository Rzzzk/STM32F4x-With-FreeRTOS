
freertos_with_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f98  08004f98  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f98  08004f98  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f98  08004f98  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f98  08004f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f9c  08004f9c  00014f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00012f7c  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013008  20013008  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009f36  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e24  00000000  00000000  0002a035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ae0  00000000  00000000  0002be60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000080c  00000000  00000000  0002c940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002c9a  00000000  00000000  0002d14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009d7a  00000000  00000000  0002fde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0001655a  00000000  00000000  00039b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000032e0  00000000  00000000  000500bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  0005339c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e98 	.word	0x08004e98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08004e98 	.word	0x08004e98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f103 0208 	add.w	r2, r3, #8
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000298:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f103 0208 	add.w	r2, r3, #8
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f103 0208 	add.w	r2, r3, #8
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80002da:	b480      	push	{r7}
 80002dc:	b085      	sub	sp, #20
 80002de:	af00      	add	r7, sp, #0
 80002e0:	6078      	str	r0, [r7, #4]
 80002e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002f0:	d103      	bne.n	80002fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	691b      	ldr	r3, [r3, #16]
 80002f6:	60fb      	str	r3, [r7, #12]
 80002f8:	e00c      	b.n	8000314 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	3308      	adds	r3, #8
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	e002      	b.n	8000308 <vListInsert+0x2e>
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	429a      	cmp	r2, r3
 8000312:	d2f6      	bcs.n	8000302 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	685a      	ldr	r2, [r3, #4]
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	683a      	ldr	r2, [r7, #0]
 8000322:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	68fa      	ldr	r2, [r7, #12]
 8000328:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	683a      	ldr	r2, [r7, #0]
 800032e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	3714      	adds	r7, #20
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	691b      	ldr	r3, [r3, #16]
 8000358:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	6892      	ldr	r2, [r2, #8]
 8000362:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	6852      	ldr	r2, [r2, #4]
 800036c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	429a      	cmp	r2, r3
 8000376:	d103      	bne.n	8000380 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	689a      	ldr	r2, [r3, #8]
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	1e5a      	subs	r2, r3, #1
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	681b      	ldr	r3, [r3, #0]
}
 8000394:	4618      	mov	r0, r3
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80003aa:	2301      	movs	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d10a      	bne.n	80003ce <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80003b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003bc:	f383 8811 	msr	BASEPRI, r3
 80003c0:	f3bf 8f6f 	isb	sy
 80003c4:	f3bf 8f4f 	dsb	sy
 80003c8:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80003ca:	bf00      	nop
 80003cc:	e7fe      	b.n	80003cc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d05d      	beq.n	8000490 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d059      	beq.n	8000490 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003e4:	2100      	movs	r1, #0
 80003e6:	fba3 2302 	umull	r2, r3, r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d000      	beq.n	80003f0 <xQueueGenericReset+0x50>
 80003ee:	2101      	movs	r1, #1
 80003f0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d14c      	bne.n	8000490 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80003f6:	f001 fe3f 	bl	8002078 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000402:	6939      	ldr	r1, [r7, #16]
 8000404:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000406:	fb01 f303 	mul.w	r3, r1, r3
 800040a:	441a      	add	r2, r3
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000410:	693b      	ldr	r3, [r7, #16]
 8000412:	2200      	movs	r2, #0
 8000414:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000426:	3b01      	subs	r3, #1
 8000428:	6939      	ldr	r1, [r7, #16]
 800042a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800042c:	fb01 f303 	mul.w	r3, r1, r3
 8000430:	441a      	add	r2, r3
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	22ff      	movs	r2, #255	; 0xff
 800043a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	22ff      	movs	r2, #255	; 0xff
 8000442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d114      	bne.n	8000476 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800044c:	693b      	ldr	r3, [r7, #16]
 800044e:	691b      	ldr	r3, [r3, #16]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d01a      	beq.n	800048a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	3310      	adds	r3, #16
 8000458:	4618      	mov	r0, r3
 800045a:	f000 ffaf 	bl	80013bc <xTaskRemoveFromEventList>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d012      	beq.n	800048a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <xQueueGenericReset+0x11c>)
 8000466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	f3bf 8f4f 	dsb	sy
 8000470:	f3bf 8f6f 	isb	sy
 8000474:	e009      	b.n	800048a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	3310      	adds	r3, #16
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ff00 	bl	8000280 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000480:	693b      	ldr	r3, [r7, #16]
 8000482:	3324      	adds	r3, #36	; 0x24
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fefb 	bl	8000280 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800048a:	f001 fe25 	bl	80020d8 <vPortExitCritical>
 800048e:	e001      	b.n	8000494 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d10a      	bne.n	80004b0 <xQueueGenericReset+0x110>
        __asm volatile
 800049a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800049e:	f383 8811 	msr	BASEPRI, r3
 80004a2:	f3bf 8f6f 	isb	sy
 80004a6:	f3bf 8f4f 	dsb	sy
 80004aa:	60bb      	str	r3, [r7, #8]
    }
 80004ac:	bf00      	nop
 80004ae:	e7fe      	b.n	80004ae <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80004b0:	697b      	ldr	r3, [r7, #20]
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3718      	adds	r7, #24
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	e000ed04 	.word	0xe000ed04

080004c0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	4613      	mov	r3, r2
 80004cc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d02e      	beq.n	8000536 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80004d8:	2100      	movs	r1, #0
 80004da:	68ba      	ldr	r2, [r7, #8]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	fba3 2302 	umull	r2, r3, r3, r2
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d000      	beq.n	80004e8 <xQueueGenericCreate+0x28>
 80004e6:	2101      	movs	r1, #1
 80004e8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d123      	bne.n	8000536 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80004f6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80004fa:	d81c      	bhi.n	8000536 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	fb02 f303 	mul.w	r3, r2, r3
 8000504:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000506:	69bb      	ldr	r3, [r7, #24]
 8000508:	3350      	adds	r3, #80	; 0x50
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fe8c 	bl	8002228 <pvPortMalloc>
 8000510:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d01c      	beq.n	8000552 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000518:	69fb      	ldr	r3, [r7, #28]
 800051a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	3350      	adds	r3, #80	; 0x50
 8000520:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000522:	79fa      	ldrb	r2, [r7, #7]
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	4613      	mov	r3, r2
 800052a:	697a      	ldr	r2, [r7, #20]
 800052c:	68b9      	ldr	r1, [r7, #8]
 800052e:	68f8      	ldr	r0, [r7, #12]
 8000530:	f000 f814 	bl	800055c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000534:	e00d      	b.n	8000552 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d10a      	bne.n	8000552 <xQueueGenericCreate+0x92>
        __asm volatile
 800053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000540:	f383 8811 	msr	BASEPRI, r3
 8000544:	f3bf 8f6f 	isb	sy
 8000548:	f3bf 8f4f 	dsb	sy
 800054c:	613b      	str	r3, [r7, #16]
    }
 800054e:	bf00      	nop
 8000550:	e7fe      	b.n	8000550 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000552:	69fb      	ldr	r3, [r7, #28]
    }
 8000554:	4618      	mov	r0, r3
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
 8000568:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d103      	bne.n	8000578 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	69ba      	ldr	r2, [r7, #24]
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	e002      	b.n	800057e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	68fa      	ldr	r2, [r7, #12]
 8000582:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000584:	69bb      	ldr	r3, [r7, #24]
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800058a:	2101      	movs	r1, #1
 800058c:	69b8      	ldr	r0, [r7, #24]
 800058e:	f7ff ff07 	bl	80003a0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	78fa      	ldrb	r2, [r7, #3]
 8000596:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08c      	sub	sp, #48	; 0x30
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80005b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d10a      	bne.n	80005d4 <xQueueReceive+0x30>
        __asm volatile
 80005be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c2:	f383 8811 	msr	BASEPRI, r3
 80005c6:	f3bf 8f6f 	isb	sy
 80005ca:	f3bf 8f4f 	dsb	sy
 80005ce:	623b      	str	r3, [r7, #32]
    }
 80005d0:	bf00      	nop
 80005d2:	e7fe      	b.n	80005d2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d103      	bne.n	80005e2 <xQueueReceive+0x3e>
 80005da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d101      	bne.n	80005e6 <xQueueReceive+0x42>
 80005e2:	2301      	movs	r3, #1
 80005e4:	e000      	b.n	80005e8 <xQueueReceive+0x44>
 80005e6:	2300      	movs	r3, #0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d10a      	bne.n	8000602 <xQueueReceive+0x5e>
        __asm volatile
 80005ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f0:	f383 8811 	msr	BASEPRI, r3
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	f3bf 8f4f 	dsb	sy
 80005fc:	61fb      	str	r3, [r7, #28]
    }
 80005fe:	bf00      	nop
 8000600:	e7fe      	b.n	8000600 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000602:	f001 f8eb 	bl	80017dc <xTaskGetSchedulerState>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <xQueueReceive+0x6e>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <xQueueReceive+0x72>
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <xQueueReceive+0x74>
 8000616:	2300      	movs	r3, #0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d10a      	bne.n	8000632 <xQueueReceive+0x8e>
        __asm volatile
 800061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000620:	f383 8811 	msr	BASEPRI, r3
 8000624:	f3bf 8f6f 	isb	sy
 8000628:	f3bf 8f4f 	dsb	sy
 800062c:	61bb      	str	r3, [r7, #24]
    }
 800062e:	bf00      	nop
 8000630:	e7fe      	b.n	8000630 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000632:	f001 fd21 	bl	8002078 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800063a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063e:	2b00      	cmp	r3, #0
 8000640:	d01f      	beq.n	8000682 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000642:	68b9      	ldr	r1, [r7, #8]
 8000644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000646:	f000 f88d 	bl	8000764 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064c:	1e5a      	subs	r2, r3, #1
 800064e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000650:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000654:	691b      	ldr	r3, [r3, #16]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d00f      	beq.n	800067a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800065a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065c:	3310      	adds	r3, #16
 800065e:	4618      	mov	r0, r3
 8000660:	f000 feac 	bl	80013bc <xTaskRemoveFromEventList>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800066a:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <xQueueReceive+0x1bc>)
 800066c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	f3bf 8f4f 	dsb	sy
 8000676:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800067a:	f001 fd2d 	bl	80020d8 <vPortExitCritical>
                return pdPASS;
 800067e:	2301      	movs	r3, #1
 8000680:	e069      	b.n	8000756 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d103      	bne.n	8000690 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000688:	f001 fd26 	bl	80020d8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800068c:	2300      	movs	r3, #0
 800068e:	e062      	b.n	8000756 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000692:	2b00      	cmp	r3, #0
 8000694:	d106      	bne.n	80006a4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	4618      	mov	r0, r3
 800069c:	f000 ff64 	bl	8001568 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80006a4:	f001 fd18 	bl	80020d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80006a8:	f000 fb6e 	bl	8000d88 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80006ac:	f001 fce4 	bl	8002078 <vPortEnterCritical>
 80006b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006bc:	d103      	bne.n	80006c6 <xQueueReceive+0x122>
 80006be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80006c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006d2:	d103      	bne.n	80006dc <xQueueReceive+0x138>
 80006d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80006dc:	f001 fcfc 	bl	80020d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80006e0:	1d3a      	adds	r2, r7, #4
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	4611      	mov	r1, r2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 ff53 	bl	8001594 <xTaskCheckForTimeOut>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d123      	bne.n	800073c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80006f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006f6:	f000 f8ad 	bl	8000854 <prvIsQueueEmpty>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d017      	beq.n	8000730 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000702:	3324      	adds	r3, #36	; 0x24
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fded 	bl	80012e8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800070e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000710:	f000 f84e 	bl	80007b0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000714:	f000 fb46 	bl	8000da4 <xTaskResumeAll>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d189      	bne.n	8000632 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <xQueueReceive+0x1bc>)
 8000720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	f3bf 8f4f 	dsb	sy
 800072a:	f3bf 8f6f 	isb	sy
 800072e:	e780      	b.n	8000632 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000732:	f000 f83d 	bl	80007b0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000736:	f000 fb35 	bl	8000da4 <xTaskResumeAll>
 800073a:	e77a      	b.n	8000632 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800073c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800073e:	f000 f837 	bl	80007b0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000742:	f000 fb2f 	bl	8000da4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000748:	f000 f884 	bl	8000854 <prvIsQueueEmpty>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	f43f af6f 	beq.w	8000632 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000754:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000756:	4618      	mov	r0, r3
 8000758:	3730      	adds	r7, #48	; 0x30
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000ed04 	.word	0xe000ed04

08000764 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	2b00      	cmp	r3, #0
 8000774:	d018      	beq.n	80007a8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	68da      	ldr	r2, [r3, #12]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	441a      	add	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	68da      	ldr	r2, [r3, #12]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	429a      	cmp	r2, r3
 800078e:	d303      	bcc.n	8000798 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	68d9      	ldr	r1, [r3, #12]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	461a      	mov	r2, r3
 80007a2:	6838      	ldr	r0, [r7, #0]
 80007a4:	f003 fe5b 	bl	800445e <memcpy>
    }
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80007b8:	f001 fc5e 	bl	8002078 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80007c2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80007c4:	e011      	b.n	80007ea <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d012      	beq.n	80007f4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3324      	adds	r3, #36	; 0x24
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fdf2 	bl	80013bc <xTaskRemoveFromEventList>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80007de:	f000 ff3f 	bl	8001660 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80007ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	dce9      	bgt.n	80007c6 <prvUnlockQueue+0x16>
 80007f2:	e000      	b.n	80007f6 <prvUnlockQueue+0x46>
                        break;
 80007f4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	22ff      	movs	r2, #255	; 0xff
 80007fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80007fe:	f001 fc6b 	bl	80020d8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000802:	f001 fc39 	bl	8002078 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800080c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800080e:	e011      	b.n	8000834 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	691b      	ldr	r3, [r3, #16]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d012      	beq.n	800083e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3310      	adds	r3, #16
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fdcd 	bl	80013bc <xTaskRemoveFromEventList>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000828:	f000 ff1a 	bl	8001660 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800082c:	7bbb      	ldrb	r3, [r7, #14]
 800082e:	3b01      	subs	r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dce9      	bgt.n	8000810 <prvUnlockQueue+0x60>
 800083c:	e000      	b.n	8000840 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800083e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	22ff      	movs	r2, #255	; 0xff
 8000844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000848:	f001 fc46 	bl	80020d8 <vPortExitCritical>
}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800085c:	f001 fc0c 	bl	8002078 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000868:	2301      	movs	r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	e001      	b.n	8000872 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000872:	f001 fc31 	bl	80020d8 <vPortExitCritical>

    return xReturn;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000880:	b480      	push	{r7}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d10a      	bne.n	80008a6 <vQueueAddToRegistry+0x26>
        __asm volatile
 8000890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000894:	f383 8811 	msr	BASEPRI, r3
 8000898:	f3bf 8f6f 	isb	sy
 800089c:	f3bf 8f4f 	dsb	sy
 80008a0:	60fb      	str	r3, [r7, #12]
    }
 80008a2:	bf00      	nop
 80008a4:	e7fe      	b.n	80008a4 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d024      	beq.n	80008fa <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	e01e      	b.n	80008f4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <vQueueAddToRegistry+0x98>)
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	4413      	add	r3, r2
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d105      	bne.n	80008d2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	4a13      	ldr	r2, [pc, #76]	; (8000918 <vQueueAddToRegistry+0x98>)
 80008cc:	4413      	add	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
                    break;
 80008d0:	e013      	b.n	80008fa <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d10a      	bne.n	80008ee <vQueueAddToRegistry+0x6e>
 80008d8:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <vQueueAddToRegistry+0x98>)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d104      	bne.n	80008ee <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <vQueueAddToRegistry+0x98>)
 80008ea:	4413      	add	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3301      	adds	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	2b07      	cmp	r3, #7
 80008f8:	d9dd      	bls.n	80008b6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d005      	beq.n	800090c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800090c:	bf00      	nop
 800090e:	371c      	adds	r7, #28
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	200000a8 	.word	0x200000a8

0800091c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800092c:	f001 fba4 	bl	8002078 <vPortEnterCritical>
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000936:	b25b      	sxtb	r3, r3
 8000938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800093c:	d103      	bne.n	8000946 <vQueueWaitForMessageRestricted+0x2a>
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800094c:	b25b      	sxtb	r3, r3
 800094e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000952:	d103      	bne.n	800095c <vQueueWaitForMessageRestricted+0x40>
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800095c:	f001 fbbc 	bl	80020d8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000964:	2b00      	cmp	r3, #0
 8000966:	d106      	bne.n	8000976 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	3324      	adds	r3, #36	; 0x24
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	68b9      	ldr	r1, [r7, #8]
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fcdd 	bl	8001330 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000976:	6978      	ldr	r0, [r7, #20]
 8000978:	f7ff ff1a 	bl	80007b0 <prvUnlockQueue>
    }
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	; 0x30
 8000988:	af04      	add	r7, sp, #16
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	4613      	mov	r3, r2
 8000992:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fc45 	bl	8002228 <pvPortMalloc>
 800099e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d00e      	beq.n	80009c4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80009a6:	2058      	movs	r0, #88	; 0x58
 80009a8:	f001 fc3e 	bl	8002228 <pvPortMalloc>
 80009ac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d003      	beq.n	80009bc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	697a      	ldr	r2, [r7, #20]
 80009b8:	631a      	str	r2, [r3, #48]	; 0x30
 80009ba:	e005      	b.n	80009c8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80009bc:	6978      	ldr	r0, [r7, #20]
 80009be:	f001 fc87 	bl	80022d0 <vPortFree>
 80009c2:	e001      	b.n	80009c8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d013      	beq.n	80009f6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80009ce:	88fa      	ldrh	r2, [r7, #6]
 80009d0:	2300      	movs	r3, #0
 80009d2:	9303      	str	r3, [sp, #12]
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	9302      	str	r3, [sp, #8]
 80009d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009da:	9301      	str	r3, [sp, #4]
 80009dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68b9      	ldr	r1, [r7, #8]
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f000 f80e 	bl	8000a06 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80009ea:	69f8      	ldr	r0, [r7, #28]
 80009ec:	f000 f8b0 	bl	8000b50 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	e002      	b.n	80009fc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009fa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80009fc:	69bb      	ldr	r3, [r7, #24]
    }
 80009fe:	4618      	mov	r0, r3
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b088      	sub	sp, #32
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
 8000a12:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	21a5      	movs	r1, #165	; 0xa5
 8000a20:	f003 fca2 	bl	8004368 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	f023 0307 	bic.w	r3, r3, #7
 8000a3c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	f003 0307 	and.w	r3, r3, #7
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d00a      	beq.n	8000a5e <prvInitialiseNewTask+0x58>
        __asm volatile
 8000a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a4c:	f383 8811 	msr	BASEPRI, r3
 8000a50:	f3bf 8f6f 	isb	sy
 8000a54:	f3bf 8f4f 	dsb	sy
 8000a58:	617b      	str	r3, [r7, #20]
    }
 8000a5a:	bf00      	nop
 8000a5c:	e7fe      	b.n	8000a5c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d01f      	beq.n	8000aa4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	e012      	b.n	8000a90 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	4413      	add	r3, r2
 8000a70:	7819      	ldrb	r1, [r3, #0]
 8000a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	4413      	add	r3, r2
 8000a78:	3334      	adds	r3, #52	; 0x34
 8000a7a:	460a      	mov	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d006      	beq.n	8000a98 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	2b09      	cmp	r3, #9
 8000a94:	d9e9      	bls.n	8000a6a <prvInitialiseNewTask+0x64>
 8000a96:	e000      	b.n	8000a9a <prvInitialiseNewTask+0x94>
            {
                break;
 8000a98:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000aa2:	e003      	b.n	8000aac <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	d90a      	bls.n	8000ac8 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8000ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ab6:	f383 8811 	msr	BASEPRI, r3
 8000aba:	f3bf 8f6f 	isb	sy
 8000abe:	f3bf 8f4f 	dsb	sy
 8000ac2:	613b      	str	r3, [r7, #16]
    }
 8000ac4:	bf00      	nop
 8000ac6:	e7fe      	b.n	8000ac6 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d901      	bls.n	8000ad2 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000adc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fbe9 	bl	80002c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af0:	3318      	adds	r3, #24
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fbe4 	bl	80002c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000afc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b00:	f1c3 0205 	rsb	r2, r3, #5
 8000b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b06:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b10:	3350      	adds	r3, #80	; 0x50
 8000b12:	2204      	movs	r2, #4
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fc26 	bl	8004368 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b1e:	3354      	adds	r3, #84	; 0x54
 8000b20:	2201      	movs	r2, #1
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f003 fc1f 	bl	8004368 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	68f9      	ldr	r1, [r7, #12]
 8000b2e:	69b8      	ldr	r0, [r7, #24]
 8000b30:	f001 f976 	bl	8001e20 <pxPortInitialiseStack>
 8000b34:	4602      	mov	r2, r0
 8000b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b38:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b44:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000b46:	bf00      	nop
 8000b48:	3720      	adds	r7, #32
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000b58:	f001 fa8e 	bl	8002078 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000b5c:	4b40      	ldr	r3, [pc, #256]	; (8000c60 <prvAddNewTaskToReadyList+0x110>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	4a3f      	ldr	r2, [pc, #252]	; (8000c60 <prvAddNewTaskToReadyList+0x110>)
 8000b64:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000b66:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <prvAddNewTaskToReadyList+0x114>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d109      	bne.n	8000b82 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000b6e:	4a3d      	ldr	r2, [pc, #244]	; (8000c64 <prvAddNewTaskToReadyList+0x114>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000b74:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <prvAddNewTaskToReadyList+0x110>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d110      	bne.n	8000b9e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000b7c:	f000 fd94 	bl	80016a8 <prvInitialiseTaskLists>
 8000b80:	e00d      	b.n	8000b9e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000b82:	4b39      	ldr	r3, [pc, #228]	; (8000c68 <prvAddNewTaskToReadyList+0x118>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d109      	bne.n	8000b9e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000b8a:	4b36      	ldr	r3, [pc, #216]	; (8000c64 <prvAddNewTaskToReadyList+0x114>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d802      	bhi.n	8000b9e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000b98:	4a32      	ldr	r2, [pc, #200]	; (8000c64 <prvAddNewTaskToReadyList+0x114>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000b9e:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <prvAddNewTaskToReadyList+0x11c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4a31      	ldr	r2, [pc, #196]	; (8000c6c <prvAddNewTaskToReadyList+0x11c>)
 8000ba6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <prvAddNewTaskToReadyList+0x11c>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	409a      	lsls	r2, r3
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <prvAddNewTaskToReadyList+0x120>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	4a2c      	ldr	r2, [pc, #176]	; (8000c70 <prvAddNewTaskToReadyList+0x120>)
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bc6:	492b      	ldr	r1, [pc, #172]	; (8000c74 <prvAddNewTaskToReadyList+0x124>)
 8000bc8:	4613      	mov	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	3304      	adds	r3, #4
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	3204      	adds	r2, #4
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	1d1a      	adds	r2, r3, #4
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <prvAddNewTaskToReadyList+0x124>)
 8000c06:	441a      	add	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c10:	4918      	ldr	r1, [pc, #96]	; (8000c74 <prvAddNewTaskToReadyList+0x124>)
 8000c12:	4613      	mov	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	1c59      	adds	r1, r3, #1
 8000c20:	4814      	ldr	r0, [pc, #80]	; (8000c74 <prvAddNewTaskToReadyList+0x124>)
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4403      	add	r3, r0
 8000c2c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000c2e:	f001 fa53 	bl	80020d8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <prvAddNewTaskToReadyList+0x118>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00e      	beq.n	8000c58 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <prvAddNewTaskToReadyList+0x114>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <prvAddNewTaskToReadyList+0x128>)
 8000c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	f3bf 8f4f 	dsb	sy
 8000c54:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200001c0 	.word	0x200001c0
 8000c64:	200000e8 	.word	0x200000e8
 8000c68:	200001cc 	.word	0x200001cc
 8000c6c:	200001dc 	.word	0x200001dc
 8000c70:	200001c8 	.word	0x200001c8
 8000c74:	200000ec 	.word	0x200000ec
 8000c78:	e000ed04 	.word	0xe000ed04

08000c7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d017      	beq.n	8000cbe <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <vTaskDelay+0x60>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00a      	beq.n	8000cac <vTaskDelay+0x30>
        __asm volatile
 8000c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c9a:	f383 8811 	msr	BASEPRI, r3
 8000c9e:	f3bf 8f6f 	isb	sy
 8000ca2:	f3bf 8f4f 	dsb	sy
 8000ca6:	60bb      	str	r3, [r7, #8]
    }
 8000ca8:	bf00      	nop
 8000caa:	e7fe      	b.n	8000caa <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000cac:	f000 f86c 	bl	8000d88 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 fdb0 	bl	8001818 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000cb8:	f000 f874 	bl	8000da4 <xTaskResumeAll>
 8000cbc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d107      	bne.n	8000cd4 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <vTaskDelay+0x64>)
 8000cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	f3bf 8f4f 	dsb	sy
 8000cd0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200001e8 	.word	0x200001e8
 8000ce0:	e000ed04 	.word	0xe000ed04

08000ce4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <vTaskStartScheduler+0x88>)
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2282      	movs	r2, #130	; 0x82
 8000cf6:	491e      	ldr	r1, [pc, #120]	; (8000d70 <vTaskStartScheduler+0x8c>)
 8000cf8:	481e      	ldr	r0, [pc, #120]	; (8000d74 <vTaskStartScheduler+0x90>)
 8000cfa:	f7ff fe43 	bl	8000984 <xTaskCreate>
 8000cfe:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d102      	bne.n	8000d0c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8000d06:	f000 fe07 	bl	8001918 <xTimerCreateTimerTask>
 8000d0a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d116      	bne.n	8000d40 <vTaskStartScheduler+0x5c>
        __asm volatile
 8000d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d16:	f383 8811 	msr	BASEPRI, r3
 8000d1a:	f3bf 8f6f 	isb	sy
 8000d1e:	f3bf 8f4f 	dsb	sy
 8000d22:	60bb      	str	r3, [r7, #8]
    }
 8000d24:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <vTaskStartScheduler+0x94>)
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d2c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <vTaskStartScheduler+0x98>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <vTaskStartScheduler+0x9c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000d3a:	f001 f8fb 	bl	8001f34 <xPortStartScheduler>
 8000d3e:	e00e      	b.n	8000d5e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d46:	d10a      	bne.n	8000d5e <vTaskStartScheduler+0x7a>
        __asm volatile
 8000d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d4c:	f383 8811 	msr	BASEPRI, r3
 8000d50:	f3bf 8f6f 	isb	sy
 8000d54:	f3bf 8f4f 	dsb	sy
 8000d58:	607b      	str	r3, [r7, #4]
    }
 8000d5a:	bf00      	nop
 8000d5c:	e7fe      	b.n	8000d5c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <vTaskStartScheduler+0xa0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001e4 	.word	0x200001e4
 8000d70:	08004eb0 	.word	0x08004eb0
 8000d74:	08001679 	.word	0x08001679
 8000d78:	200001e0 	.word	0x200001e0
 8000d7c:	200001cc 	.word	0x200001cc
 8000d80:	200001c4 	.word	0x200001c4
 8000d84:	20000000 	.word	0x20000000

08000d88 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <vTaskSuspendAll+0x18>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	3301      	adds	r3, #1
 8000d92:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <vTaskSuspendAll+0x18>)
 8000d94:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	200001e8 	.word	0x200001e8

08000da4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000db2:	4b71      	ldr	r3, [pc, #452]	; (8000f78 <xTaskResumeAll+0x1d4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10a      	bne.n	8000dd0 <xTaskResumeAll+0x2c>
        __asm volatile
 8000dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dbe:	f383 8811 	msr	BASEPRI, r3
 8000dc2:	f3bf 8f6f 	isb	sy
 8000dc6:	f3bf 8f4f 	dsb	sy
 8000dca:	607b      	str	r3, [r7, #4]
    }
 8000dcc:	bf00      	nop
 8000dce:	e7fe      	b.n	8000dce <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000dd0:	f001 f952 	bl	8002078 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000dd4:	4b68      	ldr	r3, [pc, #416]	; (8000f78 <xTaskResumeAll+0x1d4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	4a67      	ldr	r2, [pc, #412]	; (8000f78 <xTaskResumeAll+0x1d4>)
 8000ddc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000dde:	4b66      	ldr	r3, [pc, #408]	; (8000f78 <xTaskResumeAll+0x1d4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 80c0 	bne.w	8000f68 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000de8:	4b64      	ldr	r3, [pc, #400]	; (8000f7c <xTaskResumeAll+0x1d8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 80bb 	beq.w	8000f68 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000df2:	e08a      	b.n	8000f0a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000df4:	4b62      	ldr	r3, [pc, #392]	; (8000f80 <xTaskResumeAll+0x1dc>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	6a12      	ldr	r2, [r2, #32]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	69fa      	ldr	r2, [r7, #28]
 8000e12:	69d2      	ldr	r2, [r2, #28]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3318      	adds	r3, #24
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d103      	bne.n	8000e2a <xTaskResumeAll+0x86>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	6a1a      	ldr	r2, [r3, #32]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	1e5a      	subs	r2, r3, #1
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	69fa      	ldr	r2, [r7, #28]
 8000e46:	68d2      	ldr	r2, [r2, #12]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	6892      	ldr	r2, [r2, #8]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d103      	bne.n	8000e68 <xTaskResumeAll+0xc4>
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	1e5a      	subs	r2, r3, #1
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	4b40      	ldr	r3, [pc, #256]	; (8000f84 <xTaskResumeAll+0x1e0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	4a3f      	ldr	r2, [pc, #252]	; (8000f84 <xTaskResumeAll+0x1e0>)
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e8e:	493e      	ldr	r1, [pc, #248]	; (8000f88 <xTaskResumeAll+0x1e4>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	3204      	adds	r2, #4
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	1d1a      	adds	r2, r3, #4
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4a2e      	ldr	r2, [pc, #184]	; (8000f88 <xTaskResumeAll+0x1e4>)
 8000ece:	441a      	add	r2, r3
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	615a      	str	r2, [r3, #20]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed8:	492b      	ldr	r1, [pc, #172]	; (8000f88 <xTaskResumeAll+0x1e4>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	1c59      	adds	r1, r3, #1
 8000ee8:	4827      	ldr	r0, [pc, #156]	; (8000f88 <xTaskResumeAll+0x1e4>)
 8000eea:	4613      	mov	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4403      	add	r3, r0
 8000ef4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000efa:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <xTaskResumeAll+0x1e8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d302      	bcc.n	8000f0a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <xTaskResumeAll+0x1ec>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <xTaskResumeAll+0x1dc>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f47f af70 	bne.w	8000df4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000f1a:	f000 fc43 	bl	80017a4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <xTaskResumeAll+0x1f0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d010      	beq.n	8000f4c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000f2a:	f000 f847 	bl	8000fbc <xTaskIncrementTick>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <xTaskResumeAll+0x1ec>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f1      	bne.n	8000f2a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <xTaskResumeAll+0x1f0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <xTaskResumeAll+0x1ec>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d009      	beq.n	8000f68 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <xTaskResumeAll+0x1f4>)
 8000f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	f3bf 8f4f 	dsb	sy
 8000f64:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000f68:	f001 f8b6 	bl	80020d8 <vPortExitCritical>

    return xAlreadyYielded;
 8000f6c:	69bb      	ldr	r3, [r7, #24]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3720      	adds	r7, #32
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200001e8 	.word	0x200001e8
 8000f7c:	200001c0 	.word	0x200001c0
 8000f80:	20000180 	.word	0x20000180
 8000f84:	200001c8 	.word	0x200001c8
 8000f88:	200000ec 	.word	0x200000ec
 8000f8c:	200000e8 	.word	0x200000e8
 8000f90:	200001d4 	.word	0x200001d4
 8000f94:	200001d0 	.word	0x200001d0
 8000f98:	e000ed04 	.word	0xe000ed04

08000f9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <xTaskGetTickCount+0x1c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200001c4 	.word	0x200001c4

08000fbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000fc6:	4b7d      	ldr	r3, [pc, #500]	; (80011bc <xTaskIncrementTick+0x200>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f040 80ec 	bne.w	80011a8 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000fd0:	4b7b      	ldr	r3, [pc, #492]	; (80011c0 <xTaskIncrementTick+0x204>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000fd8:	4a79      	ldr	r2, [pc, #484]	; (80011c0 <xTaskIncrementTick+0x204>)
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000fde:	6a3b      	ldr	r3, [r7, #32]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d120      	bne.n	8001026 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000fe4:	4b77      	ldr	r3, [pc, #476]	; (80011c4 <xTaskIncrementTick+0x208>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00a      	beq.n	8001004 <xTaskIncrementTick+0x48>
        __asm volatile
 8000fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff2:	f383 8811 	msr	BASEPRI, r3
 8000ff6:	f3bf 8f6f 	isb	sy
 8000ffa:	f3bf 8f4f 	dsb	sy
 8000ffe:	607b      	str	r3, [r7, #4]
    }
 8001000:	bf00      	nop
 8001002:	e7fe      	b.n	8001002 <xTaskIncrementTick+0x46>
 8001004:	4b6f      	ldr	r3, [pc, #444]	; (80011c4 <xTaskIncrementTick+0x208>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	4b6f      	ldr	r3, [pc, #444]	; (80011c8 <xTaskIncrementTick+0x20c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a6d      	ldr	r2, [pc, #436]	; (80011c4 <xTaskIncrementTick+0x208>)
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4a6d      	ldr	r2, [pc, #436]	; (80011c8 <xTaskIncrementTick+0x20c>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b6c      	ldr	r3, [pc, #432]	; (80011cc <xTaskIncrementTick+0x210>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	4a6b      	ldr	r2, [pc, #428]	; (80011cc <xTaskIncrementTick+0x210>)
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	f000 fbbf 	bl	80017a4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001026:	4b6a      	ldr	r3, [pc, #424]	; (80011d0 <xTaskIncrementTick+0x214>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6a3a      	ldr	r2, [r7, #32]
 800102c:	429a      	cmp	r2, r3
 800102e:	f0c0 80a6 	bcc.w	800117e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001032:	4b64      	ldr	r3, [pc, #400]	; (80011c4 <xTaskIncrementTick+0x208>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d104      	bne.n	8001046 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800103c:	4b64      	ldr	r3, [pc, #400]	; (80011d0 <xTaskIncrementTick+0x214>)
 800103e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001042:	601a      	str	r2, [r3, #0]
                    break;
 8001044:	e09b      	b.n	800117e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001046:	4b5f      	ldr	r3, [pc, #380]	; (80011c4 <xTaskIncrementTick+0x208>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001056:	6a3a      	ldr	r2, [r7, #32]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	429a      	cmp	r2, r3
 800105c:	d203      	bcs.n	8001066 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800105e:	4a5c      	ldr	r2, [pc, #368]	; (80011d0 <xTaskIncrementTick+0x214>)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001064:	e08b      	b.n	800117e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	68d2      	ldr	r2, [r2, #12]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	6892      	ldr	r2, [r2, #8]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	3304      	adds	r3, #4
 8001088:	429a      	cmp	r2, r3
 800108a:	d103      	bne.n	8001094 <xTaskIncrementTick+0xd8>
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1e5a      	subs	r2, r3, #1
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d01e      	beq.n	80010ea <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	6a12      	ldr	r2, [r2, #32]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	69d2      	ldr	r2, [r2, #28]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	3318      	adds	r3, #24
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d103      	bne.n	80010da <xTaskIncrementTick+0x11e>
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6a1a      	ldr	r2, [r3, #32]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1e5a      	subs	r2, r3, #1
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ee:	2201      	movs	r2, #1
 80010f0:	409a      	lsls	r2, r3
 80010f2:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <xTaskIncrementTick+0x218>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	4a36      	ldr	r2, [pc, #216]	; (80011d4 <xTaskIncrementTick+0x218>)
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001100:	4935      	ldr	r1, [pc, #212]	; (80011d8 <xTaskIncrementTick+0x21c>)
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	3304      	adds	r3, #4
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	3204      	adds	r2, #4
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	1d1a      	adds	r2, r3, #4
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4a26      	ldr	r2, [pc, #152]	; (80011d8 <xTaskIncrementTick+0x21c>)
 8001140:	441a      	add	r2, r3
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800114a:	4923      	ldr	r1, [pc, #140]	; (80011d8 <xTaskIncrementTick+0x21c>)
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	1c59      	adds	r1, r3, #1
 800115a:	481f      	ldr	r0, [pc, #124]	; (80011d8 <xTaskIncrementTick+0x21c>)
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4403      	add	r3, r0
 8001166:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <xTaskIncrementTick+0x220>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	429a      	cmp	r2, r3
 8001174:	f4ff af5d 	bcc.w	8001032 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8001178:	2301      	movs	r3, #1
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800117c:	e759      	b.n	8001032 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <xTaskIncrementTick+0x220>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001184:	4914      	ldr	r1, [pc, #80]	; (80011d8 <xTaskIncrementTick+0x21c>)
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d901      	bls.n	800119a <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8001196:	2301      	movs	r3, #1
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <xTaskIncrementTick+0x224>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d007      	beq.n	80011b2 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80011a2:	2301      	movs	r3, #1
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
 80011a6:	e004      	b.n	80011b2 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <xTaskIncrementTick+0x228>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <xTaskIncrementTick+0x228>)
 80011b0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200001e8 	.word	0x200001e8
 80011c0:	200001c4 	.word	0x200001c4
 80011c4:	20000178 	.word	0x20000178
 80011c8:	2000017c 	.word	0x2000017c
 80011cc:	200001d8 	.word	0x200001d8
 80011d0:	200001e0 	.word	0x200001e0
 80011d4:	200001c8 	.word	0x200001c8
 80011d8:	200000ec 	.word	0x200000ec
 80011dc:	200000e8 	.word	0x200000e8
 80011e0:	200001d4 	.word	0x200001d4
 80011e4:	200001d0 	.word	0x200001d0

080011e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80011ee:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <vTaskSwitchContext+0xec>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <vTaskSwitchContext+0xf0>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80011fc:	e066      	b.n	80012cc <vTaskSwitchContext+0xe4>
        xYieldPending = pdFALSE;
 80011fe:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <vTaskSwitchContext+0xf0>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8001204:	4b35      	ldr	r3, [pc, #212]	; (80012dc <vTaskSwitchContext+0xf4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	429a      	cmp	r2, r3
 800121a:	d111      	bne.n	8001240 <vTaskSwitchContext+0x58>
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	3304      	adds	r3, #4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	429a      	cmp	r2, r3
 8001226:	d10b      	bne.n	8001240 <vTaskSwitchContext+0x58>
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	3308      	adds	r3, #8
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	429a      	cmp	r2, r3
 8001232:	d105      	bne.n	8001240 <vTaskSwitchContext+0x58>
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	330c      	adds	r3, #12
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	429a      	cmp	r2, r3
 800123e:	d008      	beq.n	8001252 <vTaskSwitchContext+0x6a>
 8001240:	4b26      	ldr	r3, [pc, #152]	; (80012dc <vTaskSwitchContext+0xf4>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b25      	ldr	r3, [pc, #148]	; (80012dc <vTaskSwitchContext+0xf4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3334      	adds	r3, #52	; 0x34
 800124a:	4619      	mov	r1, r3
 800124c:	4610      	mov	r0, r2
 800124e:	f001 f95b 	bl	8002508 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <vTaskSwitchContext+0xf8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	f1c3 031f 	rsb	r3, r3, #31
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	491e      	ldr	r1, [pc, #120]	; (80012e4 <vTaskSwitchContext+0xfc>)
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10a      	bne.n	8001292 <vTaskSwitchContext+0xaa>
        __asm volatile
 800127c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001280:	f383 8811 	msr	BASEPRI, r3
 8001284:	f3bf 8f6f 	isb	sy
 8001288:	f3bf 8f4f 	dsb	sy
 800128c:	607b      	str	r3, [r7, #4]
    }
 800128e:	bf00      	nop
 8001290:	e7fe      	b.n	8001290 <vTaskSwitchContext+0xa8>
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <vTaskSwitchContext+0xfc>)
 800129e:	4413      	add	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	3308      	adds	r3, #8
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d104      	bne.n	80012c2 <vTaskSwitchContext+0xda>
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <vTaskSwitchContext+0xf4>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200001e8 	.word	0x200001e8
 80012d8:	200001d4 	.word	0x200001d4
 80012dc:	200000e8 	.word	0x200000e8
 80012e0:	200001c8 	.word	0x200001c8
 80012e4:	200000ec 	.word	0x200000ec

080012e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10a      	bne.n	800130e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80012f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012fc:	f383 8811 	msr	BASEPRI, r3
 8001300:	f3bf 8f6f 	isb	sy
 8001304:	f3bf 8f4f 	dsb	sy
 8001308:	60fb      	str	r3, [r7, #12]
    }
 800130a:	bf00      	nop
 800130c:	e7fe      	b.n	800130c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <vTaskPlaceOnEventList+0x44>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3318      	adds	r3, #24
 8001314:	4619      	mov	r1, r3
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7fe ffdf 	bl	80002da <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800131c:	2101      	movs	r1, #1
 800131e:	6838      	ldr	r0, [r7, #0]
 8001320:	f000 fa7a 	bl	8001818 <prvAddCurrentTaskToDelayedList>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200000e8 	.word	0x200000e8

08001330 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10a      	bne.n	8001358 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001346:	f383 8811 	msr	BASEPRI, r3
 800134a:	f3bf 8f6f 	isb	sy
 800134e:	f3bf 8f4f 	dsb	sy
 8001352:	613b      	str	r3, [r7, #16]
    }
 8001354:	bf00      	nop
 8001356:	e7fe      	b.n	8001356 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <vTaskPlaceOnEventListRestricted+0x88>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	61da      	str	r2, [r3, #28]
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <vTaskPlaceOnEventListRestricted+0x88>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	6892      	ldr	r2, [r2, #8]
 800136e:	621a      	str	r2, [r3, #32]
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <vTaskPlaceOnEventListRestricted+0x88>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	3218      	adds	r2, #24
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <vTaskPlaceOnEventListRestricted+0x88>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f103 0218 	add.w	r2, r3, #24
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <vTaskPlaceOnEventListRestricted+0x88>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	68b8      	ldr	r0, [r7, #8]
 80013aa:	f000 fa35 	bl	8001818 <prvAddCurrentTaskToDelayedList>
    }
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200000e8 	.word	0x200000e8

080013bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80013bc:	b480      	push	{r7}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10a      	bne.n	80013e8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80013d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d6:	f383 8811 	msr	BASEPRI, r3
 80013da:	f3bf 8f6f 	isb	sy
 80013de:	f3bf 8f4f 	dsb	sy
 80013e2:	60fb      	str	r3, [r7, #12]
    }
 80013e4:	bf00      	nop
 80013e6:	e7fe      	b.n	80013e6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	6a3a      	ldr	r2, [r7, #32]
 80013f4:	6a12      	ldr	r2, [r2, #32]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	6a3a      	ldr	r2, [r7, #32]
 80013fe:	69d2      	ldr	r2, [r2, #28]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	3318      	adds	r3, #24
 800140a:	429a      	cmp	r2, r3
 800140c:	d103      	bne.n	8001416 <xTaskRemoveFromEventList+0x5a>
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	6a1a      	ldr	r2, [r3, #32]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	1e5a      	subs	r2, r3, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001426:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <xTaskRemoveFromEventList+0x194>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d15e      	bne.n	80014ec <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	6a3a      	ldr	r2, [r7, #32]
 800143a:	68d2      	ldr	r2, [r2, #12]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	6a3a      	ldr	r2, [r7, #32]
 8001444:	6892      	ldr	r2, [r2, #8]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	3304      	adds	r3, #4
 8001450:	429a      	cmp	r2, r3
 8001452:	d103      	bne.n	800145c <xTaskRemoveFromEventList+0xa0>
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	2201      	movs	r2, #1
 8001472:	409a      	lsls	r2, r3
 8001474:	4b37      	ldr	r3, [pc, #220]	; (8001554 <xTaskRemoveFromEventList+0x198>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4313      	orrs	r3, r2
 800147a:	4a36      	ldr	r2, [pc, #216]	; (8001554 <xTaskRemoveFromEventList+0x198>)
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001482:	4935      	ldr	r1, [pc, #212]	; (8001558 <xTaskRemoveFromEventList+0x19c>)
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	3304      	adds	r3, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	6a3a      	ldr	r2, [r7, #32]
 80014a8:	3204      	adds	r2, #4
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	1d1a      	adds	r2, r3, #4
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4a25      	ldr	r2, [pc, #148]	; (8001558 <xTaskRemoveFromEventList+0x19c>)
 80014c2:	441a      	add	r2, r3
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	615a      	str	r2, [r3, #20]
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014cc:	4922      	ldr	r1, [pc, #136]	; (8001558 <xTaskRemoveFromEventList+0x19c>)
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	440b      	add	r3, r1
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	1c59      	adds	r1, r3, #1
 80014dc:	481e      	ldr	r0, [pc, #120]	; (8001558 <xTaskRemoveFromEventList+0x19c>)
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4403      	add	r3, r0
 80014e8:	6019      	str	r1, [r3, #0]
 80014ea:	e01b      	b.n	8001524 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <xTaskRemoveFromEventList+0x1a0>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	61da      	str	r2, [r3, #28]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	621a      	str	r2, [r3, #32]
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	6a3a      	ldr	r2, [r7, #32]
 8001506:	3218      	adds	r2, #24
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	f103 0218 	add.w	r2, r3, #24
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	4a11      	ldr	r2, [pc, #68]	; (800155c <xTaskRemoveFromEventList+0x1a0>)
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <xTaskRemoveFromEventList+0x1a0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <xTaskRemoveFromEventList+0x1a0>)
 8001522:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <xTaskRemoveFromEventList+0x1a4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	429a      	cmp	r2, r3
 8001530:	d905      	bls.n	800153e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001532:	2301      	movs	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <xTaskRemoveFromEventList+0x1a8>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e001      	b.n	8001542 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001544:	4618      	mov	r0, r3
 8001546:	372c      	adds	r7, #44	; 0x2c
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	200001e8 	.word	0x200001e8
 8001554:	200001c8 	.word	0x200001c8
 8001558:	200000ec 	.word	0x200000ec
 800155c:	20000180 	.word	0x20000180
 8001560:	200000e8 	.word	0x200000e8
 8001564:	200001d4 	.word	0x200001d4

08001568 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <vTaskInternalSetTimeOutState+0x24>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <vTaskInternalSetTimeOutState+0x28>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	605a      	str	r2, [r3, #4]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	200001d8 	.word	0x200001d8
 8001590:	200001c4 	.word	0x200001c4

08001594 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10a      	bne.n	80015ba <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80015a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a8:	f383 8811 	msr	BASEPRI, r3
 80015ac:	f3bf 8f6f 	isb	sy
 80015b0:	f3bf 8f4f 	dsb	sy
 80015b4:	613b      	str	r3, [r7, #16]
    }
 80015b6:	bf00      	nop
 80015b8:	e7fe      	b.n	80015b8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10a      	bne.n	80015d6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80015c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c4:	f383 8811 	msr	BASEPRI, r3
 80015c8:	f3bf 8f6f 	isb	sy
 80015cc:	f3bf 8f4f 	dsb	sy
 80015d0:	60fb      	str	r3, [r7, #12]
    }
 80015d2:	bf00      	nop
 80015d4:	e7fe      	b.n	80015d4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80015d6:	f000 fd4f 	bl	8002078 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <xTaskCheckForTimeOut+0xc4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f2:	d102      	bne.n	80015fa <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	e026      	b.n	8001648 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <xTaskCheckForTimeOut+0xc8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d00a      	beq.n	800161c <xTaskCheckForTimeOut+0x88>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	429a      	cmp	r2, r3
 800160e:	d305      	bcc.n	800161c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001610:	2301      	movs	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e015      	b.n	8001648 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	429a      	cmp	r2, r3
 8001624:	d20b      	bcs.n	800163e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	1ad2      	subs	r2, r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ff98 	bl	8001568 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	e004      	b.n	8001648 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001644:	2301      	movs	r3, #1
 8001646:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001648:	f000 fd46 	bl	80020d8 <vPortExitCritical>

    return xReturn;
 800164c:	69fb      	ldr	r3, [r7, #28]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3720      	adds	r7, #32
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200001c4 	.word	0x200001c4
 800165c:	200001d8 	.word	0x200001d8

08001660 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <vTaskMissedYield+0x14>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	200001d4 	.word	0x200001d4

08001678 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001680:	f000 f852 	bl	8001728 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <prvIdleTask+0x28>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d9f9      	bls.n	8001680 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <prvIdleTask+0x2c>)
 800168e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	f3bf 8f4f 	dsb	sy
 8001698:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800169c:	e7f0      	b.n	8001680 <prvIdleTask+0x8>
 800169e:	bf00      	nop
 80016a0:	200000ec 	.word	0x200000ec
 80016a4:	e000ed04 	.word	0xe000ed04

080016a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	e00c      	b.n	80016ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <prvInitialiseTaskLists+0x60>)
 80016c0:	4413      	add	r3, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fddc 	bl	8000280 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3301      	adds	r3, #1
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d9ef      	bls.n	80016b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <prvInitialiseTaskLists+0x64>)
 80016d6:	f7fe fdd3 	bl	8000280 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80016da:	480d      	ldr	r0, [pc, #52]	; (8001710 <prvInitialiseTaskLists+0x68>)
 80016dc:	f7fe fdd0 	bl	8000280 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <prvInitialiseTaskLists+0x6c>)
 80016e2:	f7fe fdcd 	bl	8000280 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80016e6:	480c      	ldr	r0, [pc, #48]	; (8001718 <prvInitialiseTaskLists+0x70>)
 80016e8:	f7fe fdca 	bl	8000280 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80016ec:	480b      	ldr	r0, [pc, #44]	; (800171c <prvInitialiseTaskLists+0x74>)
 80016ee:	f7fe fdc7 	bl	8000280 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <prvInitialiseTaskLists+0x78>)
 80016f4:	4a05      	ldr	r2, [pc, #20]	; (800170c <prvInitialiseTaskLists+0x64>)
 80016f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <prvInitialiseTaskLists+0x7c>)
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <prvInitialiseTaskLists+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200000ec 	.word	0x200000ec
 800170c:	20000150 	.word	0x20000150
 8001710:	20000164 	.word	0x20000164
 8001714:	20000180 	.word	0x20000180
 8001718:	20000194 	.word	0x20000194
 800171c:	200001ac 	.word	0x200001ac
 8001720:	20000178 	.word	0x20000178
 8001724:	2000017c 	.word	0x2000017c

08001728 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800172e:	e019      	b.n	8001764 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001730:	f000 fca2 	bl	8002078 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <prvCheckTasksWaitingTermination+0x50>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3304      	adds	r3, #4
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fe03 	bl	800034c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <prvCheckTasksWaitingTermination+0x54>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3b01      	subs	r3, #1
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <prvCheckTasksWaitingTermination+0x54>)
 800174e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <prvCheckTasksWaitingTermination+0x58>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3b01      	subs	r3, #1
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <prvCheckTasksWaitingTermination+0x58>)
 8001758:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800175a:	f000 fcbd 	bl	80020d8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f810 	bl	8001784 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <prvCheckTasksWaitingTermination+0x58>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1e1      	bne.n	8001730 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000194 	.word	0x20000194
 800177c:	200001c0 	.word	0x200001c0
 8001780:	200001a8 	.word	0x200001a8

08001784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fd9d 	bl	80022d0 <vPortFree>
                vPortFree( pxTCB );
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fd9a 	bl	80022d0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <prvResetNextTaskUnblockTime+0x30>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d104      	bne.n	80017bc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <prvResetNextTaskUnblockTime+0x34>)
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017b8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80017ba:	e005      	b.n	80017c8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <prvResetNextTaskUnblockTime+0x30>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <prvResetNextTaskUnblockTime+0x34>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000178 	.word	0x20000178
 80017d8:	200001e0 	.word	0x200001e0

080017dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <xTaskGetSchedulerState+0x34>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80017ea:	2301      	movs	r3, #1
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	e008      	b.n	8001802 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <xTaskGetSchedulerState+0x38>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80017f8:	2302      	movs	r3, #2
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	e001      	b.n	8001802 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001802:	687b      	ldr	r3, [r7, #4]
    }
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	200001cc 	.word	0x200001cc
 8001814:	200001e8 	.word	0x200001e8

08001818 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001822:	4b36      	ldr	r3, [pc, #216]	; (80018fc <prvAddCurrentTaskToDelayedList+0xe4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001828:	4b35      	ldr	r3, [pc, #212]	; (8001900 <prvAddCurrentTaskToDelayedList+0xe8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3304      	adds	r3, #4
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fd8c 	bl	800034c <uxListRemove>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10b      	bne.n	8001852 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <prvAddCurrentTaskToDelayedList+0xe8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	2201      	movs	r2, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <prvAddCurrentTaskToDelayedList+0xec>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4013      	ands	r3, r2
 800184e:	4a2d      	ldr	r2, [pc, #180]	; (8001904 <prvAddCurrentTaskToDelayedList+0xec>)
 8001850:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001858:	d124      	bne.n	80018a4 <prvAddCurrentTaskToDelayedList+0x8c>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d021      	beq.n	80018a4 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001860:	4b29      	ldr	r3, [pc, #164]	; (8001908 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	6892      	ldr	r2, [r2, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <prvAddCurrentTaskToDelayedList+0xe8>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	3204      	adds	r2, #4
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	1d1a      	adds	r2, r3, #4
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001894:	615a      	str	r2, [r3, #20]
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <prvAddCurrentTaskToDelayedList+0xf0>)
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80018a2:	e026      	b.n	80018f2 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <prvAddCurrentTaskToDelayedList+0xe8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d209      	bcs.n	80018d0 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <prvAddCurrentTaskToDelayedList+0xf4>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <prvAddCurrentTaskToDelayedList+0xe8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3304      	adds	r3, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4610      	mov	r0, r2
 80018ca:	f7fe fd06 	bl	80002da <vListInsert>
}
 80018ce:	e010      	b.n	80018f2 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <prvAddCurrentTaskToDelayedList+0xf8>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <prvAddCurrentTaskToDelayedList+0xe8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3304      	adds	r3, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	4610      	mov	r0, r2
 80018de:	f7fe fcfc 	bl	80002da <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <prvAddCurrentTaskToDelayedList+0xfc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d202      	bcs.n	80018f2 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80018ec:	4a09      	ldr	r2, [pc, #36]	; (8001914 <prvAddCurrentTaskToDelayedList+0xfc>)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6013      	str	r3, [r2, #0]
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200001c4 	.word	0x200001c4
 8001900:	200000e8 	.word	0x200000e8
 8001904:	200001c8 	.word	0x200001c8
 8001908:	200001ac 	.word	0x200001ac
 800190c:	2000017c 	.word	0x2000017c
 8001910:	20000178 	.word	0x20000178
 8001914:	200001e0 	.word	0x200001e0

08001918 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001922:	f000 fa47 	bl	8001db4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <xTimerCreateTimerTask+0x54>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <xTimerCreateTimerTask+0x58>)
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	2302      	movs	r3, #2
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2300      	movs	r3, #0
 8001938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800193c:	490d      	ldr	r1, [pc, #52]	; (8001974 <xTimerCreateTimerTask+0x5c>)
 800193e:	480e      	ldr	r0, [pc, #56]	; (8001978 <xTimerCreateTimerTask+0x60>)
 8001940:	f7ff f820 	bl	8000984 <xTaskCreate>
 8001944:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10a      	bne.n	8001962 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800194c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001950:	f383 8811 	msr	BASEPRI, r3
 8001954:	f3bf 8f6f 	isb	sy
 8001958:	f3bf 8f4f 	dsb	sy
 800195c:	603b      	str	r3, [r7, #0]
    }
 800195e:	bf00      	nop
 8001960:	e7fe      	b.n	8001960 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001962:	687b      	ldr	r3, [r7, #4]
    }
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000021c 	.word	0x2000021c
 8001970:	20000220 	.word	0x20000220
 8001974:	08004eb8 	.word	0x08004eb8
 8001978:	08001a21 	.word	0x08001a21

0800197c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001988:	e008      	b.n	800199c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	4413      	add	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	699a      	ldr	r2, [r3, #24]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	18d1      	adds	r1, r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 f8dd 	bl	8001b68 <prvInsertTimerInActiveList>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1ea      	bne.n	800198a <prvReloadTimer+0xe>
        }
    }
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <prvProcessExpiredTimer+0x5c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3304      	adds	r3, #4
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fcb7 	bl	800034c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f7ff ffc3 	bl	800197c <prvReloadTimer>
 80019f6:	e008      	b.n	8001a0a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	4798      	blx	r3
    }
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000214 	.word	0x20000214

08001a20 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 f857 	bl	8001ae0 <prvGetNextExpireTime>
 8001a32:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 f803 	bl	8001a44 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001a3e:	f000 f8d5 	bl	8001bec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001a42:	e7f1      	b.n	8001a28 <prvTimerTask+0x8>

08001a44 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001a4e:	f7ff f99b 	bl	8000d88 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001a52:	f107 0308 	add.w	r3, r7, #8
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f866 	bl	8001b28 <prvSampleTimeNow>
 8001a5c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d130      	bne.n	8001ac6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10a      	bne.n	8001a80 <prvProcessTimerOrBlockTask+0x3c>
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d806      	bhi.n	8001a80 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001a72:	f7ff f997 	bl	8000da4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001a76:	68f9      	ldr	r1, [r7, #12]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ffa1 	bl	80019c0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001a7e:	e024      	b.n	8001aca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d008      	beq.n	8001a98 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <prvProcessTimerOrBlockTask+0x90>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <prvProcessTimerOrBlockTask+0x50>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <prvProcessTimerOrBlockTask+0x52>
 8001a94:	2300      	movs	r3, #0
 8001a96:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <prvProcessTimerOrBlockTask+0x94>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7fe ff39 	bl	800091c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001aaa:	f7ff f97b 	bl	8000da4 <xTaskResumeAll>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10a      	bne.n	8001aca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <prvProcessTimerOrBlockTask+0x98>)
 8001ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	f3bf 8f6f 	isb	sy
    }
 8001ac4:	e001      	b.n	8001aca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001ac6:	f7ff f96d 	bl	8000da4 <xTaskResumeAll>
    }
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000218 	.word	0x20000218
 8001ad8:	2000021c 	.word	0x2000021c
 8001adc:	e000ed04 	.word	0xe000ed04

08001ae0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <prvGetNextExpireTime+0x44>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <prvGetNextExpireTime+0x16>
 8001af2:	2201      	movs	r2, #1
 8001af4:	e000      	b.n	8001af8 <prvGetNextExpireTime+0x18>
 8001af6:	2200      	movs	r2, #0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <prvGetNextExpireTime+0x44>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	e001      	b.n	8001b14 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001b14:	68fb      	ldr	r3, [r7, #12]
    }
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000214 	.word	0x20000214

08001b28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001b30:	f7ff fa34 	bl	8000f9c <xTaskGetTickCount>
 8001b34:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <prvSampleTimeNow+0x3c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d205      	bcs.n	8001b4c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001b40:	f000 f912 	bl	8001d68 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e002      	b.n	8001b52 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001b52:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <prvSampleTimeNow+0x3c>)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001b58:	68fb      	ldr	r3, [r7, #12]
    }
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000224 	.word	0x20000224

08001b68 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d812      	bhi.n	8001bb4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	1ad2      	subs	r2, r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d302      	bcc.n	8001ba2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e01b      	b.n	8001bda <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <prvInsertTimerInActiveList+0x7c>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f7fe fb94 	bl	80002da <vListInsert>
 8001bb2:	e012      	b.n	8001bda <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d206      	bcs.n	8001bca <prvInsertTimerInActiveList+0x62>
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d302      	bcc.n	8001bca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e007      	b.n	8001bda <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <prvInsertTimerInActiveList+0x80>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	f7fe fb80 	bl	80002da <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001bda:	697b      	ldr	r3, [r7, #20]
    }
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000218 	.word	0x20000218
 8001be8:	20000214 	.word	0x20000214

08001bec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001bf2:	e0a6      	b.n	8001d42 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f2c0 80a3 	blt.w	8001d42 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d004      	beq.n	8001c12 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fb9d 	bl	800034c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff87 	bl	8001b28 <prvSampleTimeNow>
 8001c1a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	f200 808d 	bhi.w	8001d40 <prvProcessReceivedCommands+0x154>
 8001c26:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <prvProcessReceivedCommands+0x40>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001c51 	.word	0x08001c51
 8001c30:	08001c51 	.word	0x08001c51
 8001c34:	08001cb9 	.word	0x08001cb9
 8001c38:	08001ccd 	.word	0x08001ccd
 8001c3c:	08001d17 	.word	0x08001d17
 8001c40:	08001c51 	.word	0x08001c51
 8001c44:	08001c51 	.word	0x08001c51
 8001c48:	08001cb9 	.word	0x08001cb9
 8001c4c:	08001ccd 	.word	0x08001ccd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	18d1      	adds	r1, r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	69f8      	ldr	r0, [r7, #28]
 8001c70:	f7ff ff7a 	bl	8001b68 <prvInsertTimerInActiveList>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d063      	beq.n	8001d42 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d009      	beq.n	8001c9c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	4413      	add	r3, r2
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4619      	mov	r1, r3
 8001c94:	69f8      	ldr	r0, [r7, #28]
 8001c96:	f7ff fe71 	bl	800197c <prvReloadTimer>
 8001c9a:	e008      	b.n	8001cae <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	69f8      	ldr	r0, [r7, #28]
 8001cb4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001cb6:	e044      	b.n	8001d42 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8001cca:	e03a      	b.n	8001d42 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10a      	bne.n	8001d02 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8001cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf0:	f383 8811 	msr	BASEPRI, r3
 8001cf4:	f3bf 8f6f 	isb	sy
 8001cf8:	f3bf 8f4f 	dsb	sy
 8001cfc:	617b      	str	r3, [r7, #20]
    }
 8001cfe:	bf00      	nop
 8001d00:	e7fe      	b.n	8001d00 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	699a      	ldr	r2, [r3, #24]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	18d1      	adds	r1, r2, r3
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	69f8      	ldr	r0, [r7, #28]
 8001d10:	f7ff ff2a 	bl	8001b68 <prvInsertTimerInActiveList>
                        break;
 8001d14:	e015      	b.n	8001d42 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8001d24:	69f8      	ldr	r0, [r7, #28]
 8001d26:	f000 fad3 	bl	80022d0 <vPortFree>
 8001d2a:	e00a      	b.n	8001d42 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001d3e:	e000      	b.n	8001d42 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8001d40:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <prvProcessReceivedCommands+0x178>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f107 0108 	add.w	r1, r7, #8
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fc29 	bl	80005a4 <xQueueReceive>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f47f af4d 	bne.w	8001bf4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	2000021c 	.word	0x2000021c

08001d68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001d6e:	e009      	b.n	8001d84 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <prvSwitchTimerLists+0x44>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001d7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d7e:	6838      	ldr	r0, [r7, #0]
 8001d80:	f7ff fe1e 	bl	80019c0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <prvSwitchTimerLists+0x44>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <prvSwitchTimerLists+0x44>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <prvSwitchTimerLists+0x48>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <prvSwitchTimerLists+0x44>)
 8001d9a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <prvSwitchTimerLists+0x48>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6013      	str	r3, [r2, #0]
    }
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000214 	.word	0x20000214
 8001db0:	20000218 	.word	0x20000218

08001db4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001db8:	f000 f95e 	bl	8002078 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <prvCheckForValidListAndQueue+0x54>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d11d      	bne.n	8001e00 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001dc4:	4811      	ldr	r0, [pc, #68]	; (8001e0c <prvCheckForValidListAndQueue+0x58>)
 8001dc6:	f7fe fa5b 	bl	8000280 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001dca:	4811      	ldr	r0, [pc, #68]	; (8001e10 <prvCheckForValidListAndQueue+0x5c>)
 8001dcc:	f7fe fa58 	bl	8000280 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <prvCheckForValidListAndQueue+0x60>)
 8001dd2:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <prvCheckForValidListAndQueue+0x58>)
 8001dd4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <prvCheckForValidListAndQueue+0x64>)
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <prvCheckForValidListAndQueue+0x5c>)
 8001dda:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001ddc:	2200      	movs	r2, #0
 8001dde:	210c      	movs	r1, #12
 8001de0:	200a      	movs	r0, #10
 8001de2:	f7fe fb6d 	bl	80004c0 <xQueueGenericCreate>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <prvCheckForValidListAndQueue+0x54>)
 8001dea:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <prvCheckForValidListAndQueue+0x54>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <prvCheckForValidListAndQueue+0x54>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4908      	ldr	r1, [pc, #32]	; (8001e1c <prvCheckForValidListAndQueue+0x68>)
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fd40 	bl	8000880 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001e00:	f000 f96a 	bl	80020d8 <vPortExitCritical>
    }
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000021c 	.word	0x2000021c
 8001e0c:	200001ec 	.word	0x200001ec
 8001e10:	20000200 	.word	0x20000200
 8001e14:	20000214 	.word	0x20000214
 8001e18:	20000218 	.word	0x20000218
 8001e1c:	08004ec0 	.word	0x08004ec0

08001e20 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3b04      	subs	r3, #4
 8001e3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f023 0201 	bic.w	r2, r3, #1
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3b04      	subs	r3, #4
 8001e4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001e50:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <pxPortInitialiseStack+0x64>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3b14      	subs	r3, #20
 8001e5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3b04      	subs	r3, #4
 8001e66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f06f 0202 	mvn.w	r2, #2
 8001e6e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3b20      	subs	r3, #32
 8001e74:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	08001e89 	.word	0x08001e89

08001e88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <prvTaskExitError+0x54>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e9a:	d00a      	beq.n	8001eb2 <prvTaskExitError+0x2a>
        __asm volatile
 8001e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea0:	f383 8811 	msr	BASEPRI, r3
 8001ea4:	f3bf 8f6f 	isb	sy
 8001ea8:	f3bf 8f4f 	dsb	sy
 8001eac:	60fb      	str	r3, [r7, #12]
    }
 8001eae:	bf00      	nop
 8001eb0:	e7fe      	b.n	8001eb0 <prvTaskExitError+0x28>
        __asm volatile
 8001eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb6:	f383 8811 	msr	BASEPRI, r3
 8001eba:	f3bf 8f6f 	isb	sy
 8001ebe:	f3bf 8f4f 	dsb	sy
 8001ec2:	60bb      	str	r3, [r7, #8]
    }
 8001ec4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001ec6:	bf00      	nop
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0fc      	beq.n	8001ec8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	20000004 	.word	0x20000004

08001ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <pxCurrentTCBConst2>)
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	6808      	ldr	r0, [r1, #0]
 8001ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eea:	f380 8809 	msr	PSP, r0
 8001eee:	f3bf 8f6f 	isb	sy
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f380 8811 	msr	BASEPRI, r0
 8001efa:	4770      	bx	lr
 8001efc:	f3af 8000 	nop.w

08001f00 <pxCurrentTCBConst2>:
 8001f00:	200000e8 	.word	0x200000e8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop

08001f08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001f08:	4808      	ldr	r0, [pc, #32]	; (8001f2c <prvPortStartFirstTask+0x24>)
 8001f0a:	6800      	ldr	r0, [r0, #0]
 8001f0c:	6800      	ldr	r0, [r0, #0]
 8001f0e:	f380 8808 	msr	MSP, r0
 8001f12:	f04f 0000 	mov.w	r0, #0
 8001f16:	f380 8814 	msr	CONTROL, r0
 8001f1a:	b662      	cpsie	i
 8001f1c:	b661      	cpsie	f
 8001f1e:	f3bf 8f4f 	dsb	sy
 8001f22:	f3bf 8f6f 	isb	sy
 8001f26:	df00      	svc	0
 8001f28:	bf00      	nop
 8001f2a:	0000      	.short	0x0000
 8001f2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop

08001f34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f3a:	4b46      	ldr	r3, [pc, #280]	; (8002054 <xPortStartScheduler+0x120>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a46      	ldr	r2, [pc, #280]	; (8002058 <xPortStartScheduler+0x124>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d10a      	bne.n	8001f5a <xPortStartScheduler+0x26>
        __asm volatile
 8001f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f48:	f383 8811 	msr	BASEPRI, r3
 8001f4c:	f3bf 8f6f 	isb	sy
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	613b      	str	r3, [r7, #16]
    }
 8001f56:	bf00      	nop
 8001f58:	e7fe      	b.n	8001f58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001f5a:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <xPortStartScheduler+0x120>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a3f      	ldr	r2, [pc, #252]	; (800205c <xPortStartScheduler+0x128>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d10a      	bne.n	8001f7a <xPortStartScheduler+0x46>
        __asm volatile
 8001f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	60fb      	str	r3, [r7, #12]
    }
 8001f76:	bf00      	nop
 8001f78:	e7fe      	b.n	8001f78 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001f7a:	4b39      	ldr	r3, [pc, #228]	; (8002060 <xPortStartScheduler+0x12c>)
 8001f7c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	22ff      	movs	r2, #255	; 0xff
 8001f8a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b31      	ldr	r3, [pc, #196]	; (8002064 <xPortStartScheduler+0x130>)
 8001fa0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001fa2:	4b31      	ldr	r3, [pc, #196]	; (8002068 <xPortStartScheduler+0x134>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fa8:	e009      	b.n	8001fbe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8001faa:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <xPortStartScheduler+0x134>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	4a2d      	ldr	r2, [pc, #180]	; (8002068 <xPortStartScheduler+0x134>)
 8001fb2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc6:	2b80      	cmp	r3, #128	; 0x80
 8001fc8:	d0ef      	beq.n	8001faa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001fca:	4b27      	ldr	r3, [pc, #156]	; (8002068 <xPortStartScheduler+0x134>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f1c3 0307 	rsb	r3, r3, #7
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d00a      	beq.n	8001fec <xPortStartScheduler+0xb8>
        __asm volatile
 8001fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fda:	f383 8811 	msr	BASEPRI, r3
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	60bb      	str	r3, [r7, #8]
    }
 8001fe8:	bf00      	nop
 8001fea:	e7fe      	b.n	8001fea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <xPortStartScheduler+0x134>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <xPortStartScheduler+0x134>)
 8001ff4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <xPortStartScheduler+0x134>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ffe:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <xPortStartScheduler+0x134>)
 8002000:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <xPortStartScheduler+0x138>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a17      	ldr	r2, [pc, #92]	; (800206c <xPortStartScheduler+0x138>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002014:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <xPortStartScheduler+0x138>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a14      	ldr	r2, [pc, #80]	; (800206c <xPortStartScheduler+0x138>)
 800201c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002020:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002022:	f000 f8db 	bl	80021dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <xPortStartScheduler+0x13c>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800202c:	f000 f8f0 	bl	8002210 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <xPortStartScheduler+0x140>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <xPortStartScheduler+0x140>)
 8002036:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800203a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800203c:	f7ff ff64 	bl	8001f08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002040:	f7ff f8d2 	bl	80011e8 <vTaskSwitchContext>
    prvTaskExitError();
 8002044:	f7ff ff20 	bl	8001e88 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00
 8002058:	410fc271 	.word	0x410fc271
 800205c:	410fc270 	.word	0x410fc270
 8002060:	e000e400 	.word	0xe000e400
 8002064:	20000228 	.word	0x20000228
 8002068:	2000022c 	.word	0x2000022c
 800206c:	e000ed20 	.word	0xe000ed20
 8002070:	20000004 	.word	0x20000004
 8002074:	e000ef34 	.word	0xe000ef34

08002078 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
        __asm volatile
 800207e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002082:	f383 8811 	msr	BASEPRI, r3
 8002086:	f3bf 8f6f 	isb	sy
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	607b      	str	r3, [r7, #4]
    }
 8002090:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <vPortEnterCritical+0x58>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <vPortEnterCritical+0x58>)
 800209a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <vPortEnterCritical+0x58>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d10f      	bne.n	80020c4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <vPortEnterCritical+0x5c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <vPortEnterCritical+0x4c>
        __asm volatile
 80020ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b2:	f383 8811 	msr	BASEPRI, r3
 80020b6:	f3bf 8f6f 	isb	sy
 80020ba:	f3bf 8f4f 	dsb	sy
 80020be:	603b      	str	r3, [r7, #0]
    }
 80020c0:	bf00      	nop
 80020c2:	e7fe      	b.n	80020c2 <vPortEnterCritical+0x4a>
    }
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	20000004 	.word	0x20000004
 80020d4:	e000ed04 	.word	0xe000ed04

080020d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <vPortExitCritical+0x50>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10a      	bne.n	80020fc <vPortExitCritical+0x24>
        __asm volatile
 80020e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ea:	f383 8811 	msr	BASEPRI, r3
 80020ee:	f3bf 8f6f 	isb	sy
 80020f2:	f3bf 8f4f 	dsb	sy
 80020f6:	607b      	str	r3, [r7, #4]
    }
 80020f8:	bf00      	nop
 80020fa:	e7fe      	b.n	80020fa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <vPortExitCritical+0x50>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3b01      	subs	r3, #1
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <vPortExitCritical+0x50>)
 8002104:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <vPortExitCritical+0x50>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d105      	bne.n	800211a <vPortExitCritical+0x42>
 800210e:	2300      	movs	r3, #0
 8002110:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002118:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000004 	.word	0x20000004
 800212c:	00000000 	.word	0x00000000

08002130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002130:	f3ef 8009 	mrs	r0, PSP
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	4b15      	ldr	r3, [pc, #84]	; (8002190 <pxCurrentTCBConst>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	f01e 0f10 	tst.w	lr, #16
 8002140:	bf08      	it	eq
 8002142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800214a:	6010      	str	r0, [r2, #0]
 800214c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002154:	f380 8811 	msr	BASEPRI, r0
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	f7ff f842 	bl	80011e8 <vTaskSwitchContext>
 8002164:	f04f 0000 	mov.w	r0, #0
 8002168:	f380 8811 	msr	BASEPRI, r0
 800216c:	bc09      	pop	{r0, r3}
 800216e:	6819      	ldr	r1, [r3, #0]
 8002170:	6808      	ldr	r0, [r1, #0]
 8002172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002176:	f01e 0f10 	tst.w	lr, #16
 800217a:	bf08      	it	eq
 800217c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002180:	f380 8809 	msr	PSP, r0
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	f3af 8000 	nop.w

08002190 <pxCurrentTCBConst>:
 8002190:	200000e8 	.word	0x200000e8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop

08002198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
        __asm volatile
 800219e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a2:	f383 8811 	msr	BASEPRI, r3
 80021a6:	f3bf 8f6f 	isb	sy
 80021aa:	f3bf 8f4f 	dsb	sy
 80021ae:	607b      	str	r3, [r7, #4]
    }
 80021b0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80021b2:	f7fe ff03 	bl	8000fbc <xTaskIncrementTick>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <SysTick_Handler+0x40>)
 80021be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	2300      	movs	r3, #0
 80021c6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f383 8811 	msr	BASEPRI, r3
    }
 80021ce:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	e000ed04 	.word	0xe000ed04

080021dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <vPortSetupTimerInterrupt+0x28>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <vPortSetupTimerInterrupt+0x2c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <vPortSetupTimerInterrupt+0x30>)
 80021ee:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80021f2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <vPortSetupTimerInterrupt+0x28>)
 80021f6:	2207      	movs	r2, #7
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e010 	.word	0xe000e010
 8002208:	e000e018 	.word	0xe000e018
 800220c:	e000e014 	.word	0xe000e014

08002210 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002210:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002220 <vPortEnableVFP+0x10>
 8002214:	6801      	ldr	r1, [r0, #0]
 8002216:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800221a:	6001      	str	r1, [r0, #0]
 800221c:	4770      	bx	lr
 800221e:	0000      	.short	0x0000
 8002220:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop

08002228 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00e      	beq.n	800225c <pvPortMalloc+0x34>
            {
                /* Byte alignment required. Check for overflow. */
                if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )) > xWantedSize )
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f023 0307 	bic.w	r3, r3, #7
 8002244:	3308      	adds	r3, #8
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	429a      	cmp	r2, r3
 800224a:	d205      	bcs.n	8002258 <pvPortMalloc+0x30>
                {
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f023 0307 	bic.w	r3, r3, #7
 8002252:	3308      	adds	r3, #8
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	e001      	b.n	800225c <pvPortMalloc+0x34>
                }
                else
                {
                    xWantedSize = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    vTaskSuspendAll();
 800225c:	f7fe fd94 	bl	8000d88 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <pvPortMalloc+0x98>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002268:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <pvPortMalloc+0x9c>)
 800226a:	f023 0307 	bic.w	r3, r3, #7
 800226e:	461a      	mov	r2, r3
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <pvPortMalloc+0x98>)
 8002272:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d01a      	beq.n	80022b0 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <pvPortMalloc+0xa0>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && /* valid size */
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <pvPortMalloc+0xa4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d813      	bhi.n	80022b0 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <pvPortMalloc+0xa0>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	441a      	add	r2, r3
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <pvPortMalloc+0xa0>)
 8002292:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002294:	429a      	cmp	r2, r3
 8002296:	d90b      	bls.n	80022b0 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <pvPortMalloc+0x98>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <pvPortMalloc+0xa0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <pvPortMalloc+0xa0>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <pvPortMalloc+0xa0>)
 80022ae:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80022b0:	f7fe fd78 	bl	8000da4 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 80022b4:	68fb      	ldr	r3, [r7, #12]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20012e34 	.word	0x20012e34
 80022c4:	20000237 	.word	0x20000237
 80022c8:	20012e30 	.word	0x20012e30
 80022cc:	00012bf7 	.word	0x00012bf7

080022d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <vPortFree+0x24>
        __asm volatile
 80022de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e2:	f383 8811 	msr	BASEPRI, r3
 80022e6:	f3bf 8f6f 	isb	sy
 80022ea:	f3bf 8f4f 	dsb	sy
 80022ee:	60fb      	str	r3, [r7, #12]
    }
 80022f0:	bf00      	nop
 80022f2:	e7fe      	b.n	80022f2 <vPortFree+0x22>
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <USART2_IRQHandler>:


extern USART_Handle_t aUSART2_hn;

void USART2_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	USART_IRQHandling(&aUSART2_hn);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <USART2_IRQHandler+0x10>)
 8002306:	f001 fce9 	bl	8003cdc <USART_IRQHandling>
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20012e50 	.word	0x20012e50

08002314 <Task_A>:
GPIO_Handle_t aUART2pin;
USART_Handle_t aUSART2_hn;
u8 aStringData[] = "Hello FreeRTOS\r\n";

void Task_A(void *p)
{
 8002314:	b5b0      	push	{r4, r5, r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	u8 len = strlen((char*)aStringData);
 800231c:	480c      	ldr	r0, [pc, #48]	; (8002350 <Task_A+0x3c>)
 800231e:	f7fd ff57 	bl	80001d0 <strlen>
 8002322:	4603      	mov	r3, r0
 8002324:	77fb      	strb	r3, [r7, #31]
	u8 taskMess[] = "I am in task A\r\n";
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <Task_A+0x40>)
 8002328:	f107 040c 	add.w	r4, r7, #12
 800232c:	461d      	mov	r5, r3
 800232e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002332:	682b      	ldr	r3, [r5, #0]
 8002334:	7023      	strb	r3, [r4, #0]

	while(1)
	{

		USART_enuSendDataSyn(&aUSART2_hn,taskMess,len);
 8002336:	7ffa      	ldrb	r2, [r7, #31]
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	4619      	mov	r1, r3
 800233e:	4806      	ldr	r0, [pc, #24]	; (8002358 <Task_A+0x44>)
 8002340:	f001 fc3e 	bl	8003bc0 <USART_enuSendDataSyn>
		vTaskDelay(1000);
 8002344:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002348:	f7fe fc98 	bl	8000c7c <vTaskDelay>
		USART_enuSendDataSyn(&aUSART2_hn,taskMess,len);
 800234c:	e7f3      	b.n	8002336 <Task_A+0x22>
 800234e:	bf00      	nop
 8002350:	20000008 	.word	0x20000008
 8002354:	08004ec8 	.word	0x08004ec8
 8002358:	20012e50 	.word	0x20012e50

0800235c <main>:
	}
}


int main(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af02      	add	r7, sp, #8

	PreOS_Init();
 8002362:	f000 f811 	bl	8002388 <PreOS_Init>


	/********  Tasks Creation ***********/
	xTaskCreate(Task_A, "task A", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8002366:	2300      	movs	r3, #0
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	2302      	movs	r3, #2
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2300      	movs	r3, #0
 8002370:	2282      	movs	r2, #130	; 0x82
 8002372:	4903      	ldr	r1, [pc, #12]	; (8002380 <main+0x24>)
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <main+0x28>)
 8002376:	f7fe fb05 	bl	8000984 <xTaskCreate>


	vTaskStartScheduler();
 800237a:	f7fe fcb3 	bl	8000ce4 <vTaskStartScheduler>

	while(1);
 800237e:	e7fe      	b.n	800237e <main+0x22>
 8002380:	08004edc 	.word	0x08004edc
 8002384:	08002315 	.word	0x08002315

08002388 <PreOS_Init>:


} ///////////////////////// end of main ////////////////////////////

void PreOS_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
	/**********  Variable  ****************/

	u8 len = strlen((char*)aStringData);
 800238e:	4811      	ldr	r0, [pc, #68]	; (80023d4 <PreOS_Init+0x4c>)
 8002390:	f7fd ff1e 	bl	80001d0 <strlen>
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]

	/**********   RCC   *******************/

	aRCC_Init();
 8002398:	f000 f820 	bl	80023dc <aRCC_Init>
	RCC_enuAHB1PeriphClkCtrl(AHB1_GPIOA, ENABLE);
 800239c:	2101      	movs	r1, #1
 800239e:	2000      	movs	r0, #0
 80023a0:	f001 fadd 	bl	800395e <RCC_enuAHB1PeriphClkCtrl>
	RCC_enuAHB1PeriphClkCtrl(AHB1_GPIOD, ENABLE);
 80023a4:	2101      	movs	r1, #1
 80023a6:	2003      	movs	r0, #3
 80023a8:	f001 fad9 	bl	800395e <RCC_enuAHB1PeriphClkCtrl>
	RCC_enuAPB1PeriphClkCtrl(17, ENABLE);//USART2
 80023ac:	2101      	movs	r1, #1
 80023ae:	2011      	movs	r0, #17
 80023b0:	f001 faf7 	bl	80039a2 <RCC_enuAPB1PeriphClkCtrl>

	/*********   Cortex-m4   ***************/
	NVIC_Init();
 80023b4:	f000 f890 	bl	80024d8 <NVIC_Init>
	/*********   GPIO   ********************/
	aGPIO_USART2_Init();
 80023b8:	f000 f86a 	bl	8002490 <aGPIO_USART2_Init>
	/*********   USART  *******************/
	aUSART2_Init();
 80023bc:	f000 f846 	bl	800244c <aUSART2_Init>
	/********    UART   *******************/
	USART_enuSendDataSyn(&aUSART2_hn,aStringData,len);
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	461a      	mov	r2, r3
 80023c4:	4903      	ldr	r1, [pc, #12]	; (80023d4 <PreOS_Init+0x4c>)
 80023c6:	4804      	ldr	r0, [pc, #16]	; (80023d8 <PreOS_Init+0x50>)
 80023c8:	f001 fbfa 	bl	8003bc0 <USART_enuSendDataSyn>
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000008 	.word	0x20000008
 80023d8:	20012e50 	.word	0x20012e50

080023dc <aRCC_Init>:


void aRCC_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
	RCC_SysClk_t clkSysType;
	u32 clk;

	RCC_Handler_t rcc;
	rcc.RCC_SysClkSource = RCC_SYSCLK_HSI;
 80023e2:	2302      	movs	r3, #2
 80023e4:	713b      	strb	r3, [r7, #4]
	rcc.RCC_AHBPrescaler = RCC_AHB_not_divided;
 80023e6:	2300      	movs	r3, #0
 80023e8:	717b      	strb	r3, [r7, #5]
	rcc.RCC_APB1Prescaler= RCC_APB_not_divided;
 80023ea:	2300      	movs	r3, #0
 80023ec:	71bb      	strb	r3, [r7, #6]
	rcc.RCC_APB2Prescaler= RCC_APB_not_divided;
 80023ee:	2300      	movs	r3, #0
 80023f0:	71fb      	strb	r3, [r7, #7]

	/*
	 * 1. RCC initialization
	 */
	RCC_enuInitSystemClk(&rcc);
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	4618      	mov	r0, r3
 80023f6:	f001 fa91 	bl	800391c <RCC_enuInitSystemClk>


	/*
	 * 2. Check
	 */
	RCC_enuGetSysClkType(&clkSysType);
 80023fa:	f107 030f 	add.w	r3, r7, #15
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 fb11 	bl	8003a26 <RCC_enuGetSysClkType>

	if(clkSysType == RCC_SYSCLK_HSI)
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d110      	bne.n	800242c <aRCC_Init+0x50>
	{
		printf("RCC initialization,, done successfully \n");
 800240a:	480c      	ldr	r0, [pc, #48]	; (800243c <aRCC_Init+0x60>)
 800240c:	f001 fecc 	bl	80041a8 <puts>
		printf("System clock type is : HSI \n");
 8002410:	480b      	ldr	r0, [pc, #44]	; (8002440 <aRCC_Init+0x64>)
 8002412:	f001 fec9 	bl	80041a8 <puts>
		RCC_enuGetSysClkValue(&clk); // must be 16 MHz
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	4618      	mov	r0, r3
 800241c:	f001 faf3 	bl	8003a06 <RCC_enuGetSysClkValue>
		printf("System Clock value = %ld \n",clk);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4619      	mov	r1, r3
 8002424:	4807      	ldr	r0, [pc, #28]	; (8002444 <aRCC_Init+0x68>)
 8002426:	f001 fe59 	bl	80040dc <iprintf>
	}
	else
	{
		printf("RCC initialization is failed \n");
	}
}
 800242a:	e002      	b.n	8002432 <aRCC_Init+0x56>
		printf("RCC initialization is failed \n");
 800242c:	4806      	ldr	r0, [pc, #24]	; (8002448 <aRCC_Init+0x6c>)
 800242e:	f001 febb 	bl	80041a8 <puts>
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	08004ee4 	.word	0x08004ee4
 8002440:	08004f0c 	.word	0x08004f0c
 8002444:	08004f28 	.word	0x08004f28
 8002448:	08004f44 	.word	0x08004f44

0800244c <aUSART2_Init>:


void aUSART2_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0

	aUSART2_hn.USARTx = USART_2;
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <aUSART2_Init+0x40>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]

	aUSART2_hn.USART_Config.USART_Mode = USART_Mode_RxTx;
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <aUSART2_Init+0x40>)
 8002458:	2202      	movs	r2, #2
 800245a:	711a      	strb	r2, [r3, #4]
	aUSART2_hn.USART_Config.USART_WordLen = USART_WordLen_8Bits;
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <aUSART2_Init+0x40>)
 800245e:	2200      	movs	r2, #0
 8002460:	715a      	strb	r2, [r3, #5]
	aUSART2_hn.USART_Config.USART_Parity = USART_Parity_Disable;
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <aUSART2_Init+0x40>)
 8002464:	2200      	movs	r2, #0
 8002466:	719a      	strb	r2, [r3, #6]
	aUSART2_hn.USART_Config.USART_HwFlowCtrl = USART_HwFlowCtrl_None;
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <aUSART2_Init+0x40>)
 800246a:	2200      	movs	r2, #0
 800246c:	721a      	strb	r2, [r3, #8]
	aUSART2_hn.USART_Config.USART_StopBits = USART_StopBits_1;
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <aUSART2_Init+0x40>)
 8002470:	2200      	movs	r2, #0
 8002472:	71da      	strb	r2, [r3, #7]
	aUSART2_hn.USART_Config.USART_BaudRate = USART_STD_BAUD_115200;
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <aUSART2_Init+0x40>)
 8002476:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800247a:	60da      	str	r2, [r3, #12]
	aUSART2_hn.RxBusyState = USART_Ready;
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <aUSART2_Init+0x40>)
 800247e:	2200      	movs	r2, #0
 8002480:	76da      	strb	r2, [r3, #27]

	USART_enuInit(&aUSART2_hn);
 8002482:	4802      	ldr	r0, [pc, #8]	; (800248c <aUSART2_Init+0x40>)
 8002484:	f001 fae0 	bl	8003a48 <USART_enuInit>
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20012e50 	.word	0x20012e50

08002490 <aGPIO_USART2_Init>:



void aGPIO_USART2_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	aUART2pin.GPIO_Port = GPIO_PORTA;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <aGPIO_USART2_Init+0x44>)
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]

	aUART2pin.GPIO_Config.GPIO_PinNumber      = GPIO_PIN2;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <aGPIO_USART2_Init+0x44>)
 800249c:	2202      	movs	r2, #2
 800249e:	711a      	strb	r2, [r3, #4]
	aUART2pin.GPIO_Config.GPIO_PinMode        = GPIO_Mode_altFun;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <aGPIO_USART2_Init+0x44>)
 80024a2:	2202      	movs	r2, #2
 80024a4:	715a      	strb	r2, [r3, #5]
	aUART2pin.GPIO_Config.GPIO_PinSpeed       = GPIO_Speed_Low;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <aGPIO_USART2_Init+0x44>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	719a      	strb	r2, [r3, #6]
	aUART2pin.GPIO_Config.GPIO_PinOPType      = GPIO_Output_PP;
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <aGPIO_USART2_Init+0x44>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	721a      	strb	r2, [r3, #8]
	aUART2pin.GPIO_Config.GPIO_PinPuPdControl = GPIO_PullUp;
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <aGPIO_USART2_Init+0x44>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	71da      	strb	r2, [r3, #7]
	aUART2pin.GPIO_Config.GPIO_PinAltFunMode  =7;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <aGPIO_USART2_Init+0x44>)
 80024ba:	2207      	movs	r2, #7
 80024bc:	725a      	strb	r2, [r3, #9]

	GPIO_enuInit(&aUART2pin);
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <aGPIO_USART2_Init+0x44>)
 80024c0:	f001 f9b7 	bl	8003832 <GPIO_enuInit>

	aUART2pin.GPIO_Config.GPIO_PinNumber      = GPIO_PIN3;
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <aGPIO_USART2_Init+0x44>)
 80024c6:	2203      	movs	r2, #3
 80024c8:	711a      	strb	r2, [r3, #4]

	GPIO_enuInit(&aUART2pin);
 80024ca:	4802      	ldr	r0, [pc, #8]	; (80024d4 <aGPIO_USART2_Init+0x44>)
 80024cc:	f001 f9b1 	bl	8003832 <GPIO_enuInit>
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20012e40 	.word	0x20012e40

080024d8 <NVIC_Init>:


void NVIC_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
	SCB_enuInit(PriGrField_4_GoupPriBits_0_SubpriBits);
 80024dc:	2000      	movs	r0, #0
 80024de:	f000 f9bd 	bl	800285c <SCB_enuInit>
	aNvic_Hn.IRQn = USART2_IRQn;
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <NVIC_Init+0x2c>)
 80024e4:	2226      	movs	r2, #38	; 0x26
 80024e6:	701a      	strb	r2, [r3, #0]
	aNvic_Hn.NVIC_Confg.PendingFlag = NVIC_PendFlagIsLow;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <NVIC_Init+0x2c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	70da      	strb	r2, [r3, #3]
	aNvic_Hn.NVIC_Confg.GroupPriority = 4;
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <NVIC_Init+0x2c>)
 80024f0:	2204      	movs	r2, #4
 80024f2:	705a      	strb	r2, [r3, #1]
	aNvic_Hn.NVIC_Confg.SubPriority   = 0;
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <NVIC_Init+0x2c>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	709a      	strb	r2, [r3, #2]
	NVIC_enuInitIRQn(&aNvic_Hn);
 80024fa:	4802      	ldr	r0, [pc, #8]	; (8002504 <NVIC_Init+0x2c>)
 80024fc:	f000 f9c0 	bl	8002880 <NVIC_enuInitIRQn>
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20012e38 	.word	0x20012e38

08002508 <vApplicationStackOverflowHook>:
void USART_CallBackFun(void)
{

}

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
	// Handle the stack overflow here
	(void)xTask; // To avoid compiler warnings
	(void)pcTaskName; // To avoid compiler warnings

	// Enter an infinite loop to halt the system
	while (1) {
 8002512:	e7fe      	b.n	8002512 <vApplicationStackOverflowHook+0xa>

08002514 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	e00a      	b.n	800253c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002526:	f3af 8000 	nop.w
 800252a:	4601      	mov	r1, r0
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	60ba      	str	r2, [r7, #8]
 8002532:	b2ca      	uxtb	r2, r1
 8002534:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3301      	adds	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	dbf0      	blt.n	8002526 <_read+0x12>
  }

  return len;
 8002544:	687b      	ldr	r3, [r7, #4]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e009      	b.n	8002574 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	60ba      	str	r2, [r7, #8]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3301      	adds	r3, #1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	dbf1      	blt.n	8002560 <_write+0x12>
  }
  return len;
 800257c:	687b      	ldr	r3, [r7, #4]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <_close>:

int _close(int file)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ae:	605a      	str	r2, [r3, #4]
  return 0;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <_isatty>:

int _isatty(int file)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <_sbrk+0x5c>)
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <_sbrk+0x60>)
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <_sbrk+0x64>)
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <_sbrk+0x68>)
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	429a      	cmp	r2, r3
 800261e:	d207      	bcs.n	8002630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002620:	f001 fef0 	bl	8004404 <__errno>
 8002624:	4603      	mov	r3, r0
 8002626:	220c      	movs	r2, #12
 8002628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800262e:	e009      	b.n	8002644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <_sbrk+0x64>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	4a05      	ldr	r2, [pc, #20]	; (8002654 <_sbrk+0x64>)
 8002640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20020000 	.word	0x20020000
 8002650:	00000400 	.word	0x00000400
 8002654:	20012e74 	.word	0x20012e74
 8002658:	20013008 	.word	0x20013008

0800265c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800265c:	480d      	ldr	r0, [pc, #52]	; (8002694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800265e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002660:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002664:	480c      	ldr	r0, [pc, #48]	; (8002698 <LoopForever+0x6>)
  ldr r1, =_edata
 8002666:	490d      	ldr	r1, [pc, #52]	; (800269c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <LoopForever+0xe>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800266c:	e002      	b.n	8002674 <LoopCopyDataInit>

0800266e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800266e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002672:	3304      	adds	r3, #4

08002674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002678:	d3f9      	bcc.n	800266e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800267c:	4c0a      	ldr	r4, [pc, #40]	; (80026a8 <LoopForever+0x16>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002680:	e001      	b.n	8002686 <LoopFillZerobss>

08002682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002684:	3204      	adds	r2, #4

08002686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002688:	d3fb      	bcc.n	8002682 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800268a:	f001 fec1 	bl	8004410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800268e:	f7ff fe65 	bl	800235c <main>

08002692 <LoopForever>:

LoopForever:
  b LoopForever
 8002692:	e7fe      	b.n	8002692 <LoopForever>
  ldr   r0, =_estack
 8002694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800269c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80026a0:	08004fa0 	.word	0x08004fa0
  ldr r2, =_sbss
 80026a4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80026a8:	20013008 	.word	0x20013008

080026ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026ac:	e7fe      	b.n	80026ac <ADC_IRQHandler>
	...

080026b0 <MCAL_SCB_ConfigPriorityGrouping>:
 */

u8 SCB_SubPriBits = 0;

ES_t MCAL_SCB_ConfigPriorityGrouping(u32 PriorityGroupingField)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	ES_t errorState = ES_NOT_OK;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]

	switch (PriorityGroupingField)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d839      	bhi.n	8002736 <MCAL_SCB_ConfigPriorityGrouping+0x86>
 80026c2:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <MCAL_SCB_ConfigPriorityGrouping+0x18>)
 80026c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c8:	080026dd 	.word	0x080026dd
 80026cc:	080026ef 	.word	0x080026ef
 80026d0:	08002701 	.word	0x08002701
 80026d4:	08002713 	.word	0x08002713
 80026d8:	08002725 	.word	0x08002725
	{
	case MCAL_NVIC_4_BIT_GROUP_0_BIT_SUB:

		SCB_AIRCR = 0x05FA0300;
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <MCAL_SCB_ConfigPriorityGrouping+0x94>)
 80026de:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <MCAL_SCB_ConfigPriorityGrouping+0x98>)
 80026e0:	601a      	str	r2, [r3, #0]

		SCB_SubPriBits = 0;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <MCAL_SCB_ConfigPriorityGrouping+0x9c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]

		errorState = ES_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]
		break;
 80026ec:	e023      	b.n	8002736 <MCAL_SCB_ConfigPriorityGrouping+0x86>

	case MCAL_NVIC_3_BIT_GROUP_1_BIT_SUB:

		SCB_AIRCR = 0x05FA0400;
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <MCAL_SCB_ConfigPriorityGrouping+0x94>)
 80026f0:	4a17      	ldr	r2, [pc, #92]	; (8002750 <MCAL_SCB_ConfigPriorityGrouping+0xa0>)
 80026f2:	601a      	str	r2, [r3, #0]

		SCB_SubPriBits = 1;
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <MCAL_SCB_ConfigPriorityGrouping+0x9c>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]

		errorState = ES_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
		break;
 80026fe:	e01a      	b.n	8002736 <MCAL_SCB_ConfigPriorityGrouping+0x86>

	case MCAL_NVIC_2_BIT_GROUP_2_BIT_SUB:

		SCB_AIRCR = 0x05FA0500;
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <MCAL_SCB_ConfigPriorityGrouping+0x94>)
 8002702:	4a14      	ldr	r2, [pc, #80]	; (8002754 <MCAL_SCB_ConfigPriorityGrouping+0xa4>)
 8002704:	601a      	str	r2, [r3, #0]

		SCB_SubPriBits = 2;
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <MCAL_SCB_ConfigPriorityGrouping+0x9c>)
 8002708:	2202      	movs	r2, #2
 800270a:	701a      	strb	r2, [r3, #0]

		errorState = ES_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
		break;
 8002710:	e011      	b.n	8002736 <MCAL_SCB_ConfigPriorityGrouping+0x86>

	case MCAL_NVIC_1_BIT_GROUP_3_BIT_SUB:

		SCB_AIRCR = 0x05FA0600;
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <MCAL_SCB_ConfigPriorityGrouping+0x94>)
 8002714:	4a10      	ldr	r2, [pc, #64]	; (8002758 <MCAL_SCB_ConfigPriorityGrouping+0xa8>)
 8002716:	601a      	str	r2, [r3, #0]

		SCB_SubPriBits = 3;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MCAL_SCB_ConfigPriorityGrouping+0x9c>)
 800271a:	2203      	movs	r2, #3
 800271c:	701a      	strb	r2, [r3, #0]

		errorState = ES_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
		break;
 8002722:	e008      	b.n	8002736 <MCAL_SCB_ConfigPriorityGrouping+0x86>

	case MCAL_NVIC_0_BIT_GROUP_4_BIT_SUB:

		SCB_AIRCR = 0x05FA0700;
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <MCAL_SCB_ConfigPriorityGrouping+0x94>)
 8002726:	4a0d      	ldr	r2, [pc, #52]	; (800275c <MCAL_SCB_ConfigPriorityGrouping+0xac>)
 8002728:	601a      	str	r2, [r3, #0]

		SCB_SubPriBits = 4;
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MCAL_SCB_ConfigPriorityGrouping+0x9c>)
 800272c:	2204      	movs	r2, #4
 800272e:	701a      	strb	r2, [r3, #0]

		errorState = ES_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
		break;
 8002734:	bf00      	nop
	}

	return errorState;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed0c 	.word	0xe000ed0c
 8002748:	05fa0300 	.word	0x05fa0300
 800274c:	20012e78 	.word	0x20012e78
 8002750:	05fa0400 	.word	0x05fa0400
 8002754:	05fa0500 	.word	0x05fa0500
 8002758:	05fa0600 	.word	0x05fa0600
 800275c:	05fa0700 	.word	0x05fa0700

08002760 <MCAL_NVIC_EnableIRQn>:


ES_t MCAL_NVIC_EnableIRQn(u8 IRQn)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]

	ES_t errorState=ES_NOT_OK;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]

	if(IRQn <= 31 )
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	2b1f      	cmp	r3, #31
 8002772:	d807      	bhi.n	8002784 <MCAL_NVIC_EnableIRQn+0x24>
	{
		NVIC_ISER0 = (1<<IRQn);
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	2201      	movs	r2, #1
 8002778:	409a      	lsls	r2, r3
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MCAL_NVIC_EnableIRQn+0x4c>)
 800277c:	601a      	str	r2, [r3, #0]
		errorState = ES_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
 8002782:	e00c      	b.n	800279e <MCAL_NVIC_EnableIRQn+0x3e>
	}
	else if(IRQn <= 59)
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	2b3b      	cmp	r3, #59	; 0x3b
 8002788:	d809      	bhi.n	800279e <MCAL_NVIC_EnableIRQn+0x3e>
	{
		IRQn-=32;
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	3b20      	subs	r3, #32
 800278e:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1<<IRQn);
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	2201      	movs	r2, #1
 8002794:	409a      	lsls	r2, r3
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MCAL_NVIC_EnableIRQn+0x50>)
 8002798:	601a      	str	r2, [r3, #0]
		errorState = ES_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
	}

	return errorState;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000e104 	.word	0xe000e104

080027b4 <MCAL_NVIC_SetPendingIRQn>:
	}
	return errorState;
}

ES_t MCAL_NVIC_SetPendingIRQn(u8 IRQn)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
	ES_t errorState=ES_NOT_OK;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]

	if(IRQn <= 31 )
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	2b1f      	cmp	r3, #31
 80027c6:	d807      	bhi.n	80027d8 <MCAL_NVIC_SetPendingIRQn+0x24>
	{
		NVIC_ISPR0 = (1<<IRQn);
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	2201      	movs	r2, #1
 80027cc:	409a      	lsls	r2, r3
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <MCAL_NVIC_SetPendingIRQn+0x4c>)
 80027d0:	601a      	str	r2, [r3, #0]
		errorState = ES_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	e00c      	b.n	80027f2 <MCAL_NVIC_SetPendingIRQn+0x3e>
	}
	else if(IRQn <= 59)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	2b3b      	cmp	r3, #59	; 0x3b
 80027dc:	d809      	bhi.n	80027f2 <MCAL_NVIC_SetPendingIRQn+0x3e>
	{
		IRQn-=32;
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	3b20      	subs	r3, #32
 80027e2:	71fb      	strb	r3, [r7, #7]
		NVIC_ISPR1 = (1<<IRQn);
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	2201      	movs	r2, #1
 80027e8:	409a      	lsls	r2, r3
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <MCAL_NVIC_SetPendingIRQn+0x50>)
 80027ec:	601a      	str	r2, [r3, #0]
		errorState = ES_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
	}

	return errorState;
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000e200 	.word	0xe000e200
 8002804:	e000e204 	.word	0xe000e204

08002808 <MCAL_NVIC_SetPriorityIRQn>:

	return errorState;
}

ES_t MCAL_NVIC_SetPriorityIRQn(u8 IRQn,u8 GrPri,u8 SubPri)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
 8002812:	460b      	mov	r3, r1
 8002814:	71bb      	strb	r3, [r7, #6]
 8002816:	4613      	mov	r3, r2
 8002818:	717b      	strb	r3, [r7, #5]
	ES_t errorState=ES_NOT_OK;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]

	u8 Pri ;

	Pri = SubPri | (GrPri << SCB_SubPriBits);
 800281e:	79bb      	ldrb	r3, [r7, #6]
 8002820:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <MCAL_NVIC_SetPriorityIRQn+0x50>)
 8002822:	7812      	ldrb	r2, [r2, #0]
 8002824:	4093      	lsls	r3, r2
 8002826:	b25a      	sxtb	r2, r3
 8002828:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800282c:	4313      	orrs	r3, r2
 800282e:	b25b      	sxtb	r3, r3
 8002830:	73bb      	strb	r3, [r7, #14]

	if(IRQn >= 0)
	{
		/* External Interrupt*/
		NVIC_IPR[IRQn] = (Pri << (8 - NO_PR_BITS_IMPLEMENTED));
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002838:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800283c:	7bba      	ldrb	r2, [r7, #14]
 800283e:	0112      	lsls	r2, r2, #4
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]
		errorState = ES_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]
	}
	else
	{
		/* System Exceptions*/
	}
	return errorState;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20012e78 	.word	0x20012e78

0800285c <SCB_enuInit>:
#include "cortexm4_nvic.h"
#include "cortex_m4.h"


ES_t SCB_enuInit(SCB_PriGro_t Copy_enuPriorityGroupingField)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
	ES_t Local_enuErrorState = ES_NOT_OK;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]

	Local_enuErrorState = MCAL_SCB_ConfigPriorityGrouping(Copy_enuPriorityGroupingField);
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff1f 	bl	80026b0 <MCAL_SCB_ConfigPriorityGrouping>
 8002872:	4603      	mov	r3, r0
 8002874:	73fb      	strb	r3, [r7, #15]

	return Local_enuErrorState;
 8002876:	7bfb      	ldrb	r3, [r7, #15]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <NVIC_enuInitIRQn>:



ES_t NVIC_enuInitIRQn(NVIC_Handle_t *Copy_pstrNVICHandle)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrorState = ES_NOT_OK;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]

	Local_enuErrorState = MCAL_NVIC_SetPriorityIRQn(Copy_pstrNVICHandle->IRQn,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f993 3000 	ldrsb.w	r3, [r3]
 8002892:	b2d8      	uxtb	r0, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7859      	ldrb	r1, [r3, #1]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	789b      	ldrb	r3, [r3, #2]
 800289c:	461a      	mov	r2, r3
 800289e:	f7ff ffb3 	bl	8002808 <MCAL_NVIC_SetPriorityIRQn>
 80028a2:	4603      	mov	r3, r0
 80028a4:	73fb      	strb	r3, [r7, #15]
			Copy_pstrNVICHandle->NVIC_Confg.GroupPriority,
			Copy_pstrNVICHandle->NVIC_Confg.SubPriority);

	Local_enuErrorState = MCAL_NVIC_EnableIRQn(Copy_pstrNVICHandle->IRQn);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f993 3000 	ldrsb.w	r3, [r3]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff56 	bl	8002760 <MCAL_NVIC_EnableIRQn>
 80028b4:	4603      	mov	r3, r0
 80028b6:	73fb      	strb	r3, [r7, #15]

	if(Copy_pstrNVICHandle->NVIC_Confg.PendingFlag == NVIC_PendFlagIsHigh)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	78db      	ldrb	r3, [r3, #3]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d108      	bne.n	80028d2 <NVIC_enuInitIRQn+0x52>
	{
		Local_enuErrorState = MCAL_NVIC_SetPendingIRQn(Copy_pstrNVICHandle->IRQn);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f993 3000 	ldrsb.w	r3, [r3]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff73 	bl	80027b4 <MCAL_NVIC_SetPendingIRQn>
 80028ce:	4603      	mov	r3, r0
 80028d0:	73fb      	strb	r3, [r7, #15]
	}

	return Local_enuErrorState;
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <MCAL_GPIO_SelectPort>:
#include "stm32f407x_gpio_exti.h"

void (*EXTI_CallBack[16])(void) = {NULL};

ES_t MCAL_GPIO_SelectPort(u8 Copy_enuGPIOPort,GPIO_RegDef_t** GPIO_BaseAddr)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]

	switch(Copy_enuGPIOPort)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	2b07      	cmp	r3, #7
 80028f0:	d842      	bhi.n	8002978 <MCAL_GPIO_SelectPort+0x9c>
 80028f2:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <MCAL_GPIO_SelectPort+0x1c>)
 80028f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f8:	08002919 	.word	0x08002919
 80028fc:	08002925 	.word	0x08002925
 8002900:	08002931 	.word	0x08002931
 8002904:	0800293d 	.word	0x0800293d
 8002908:	08002949 	.word	0x08002949
 800290c:	08002955 	.word	0x08002955
 8002910:	08002961 	.word	0x08002961
 8002914:	0800296d 	.word	0x0800296d
	{
	case MCAL_GPIO_PORTA : *GPIO_BaseAddr = GPIOA; errorState = ES_OK; break;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <MCAL_GPIO_SelectPort+0xac>)
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
 8002922:	e029      	b.n	8002978 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTB : *GPIO_BaseAddr = GPIOB; errorState = ES_OK; break;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4a19      	ldr	r2, [pc, #100]	; (800298c <MCAL_GPIO_SelectPort+0xb0>)
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	e023      	b.n	8002978 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTC : *GPIO_BaseAddr = GPIOC; errorState = ES_OK; break;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4a17      	ldr	r2, [pc, #92]	; (8002990 <MCAL_GPIO_SelectPort+0xb4>)
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	e01d      	b.n	8002978 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTD : *GPIO_BaseAddr = GPIOD; errorState = ES_OK; break;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4a15      	ldr	r2, [pc, #84]	; (8002994 <MCAL_GPIO_SelectPort+0xb8>)
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
 8002946:	e017      	b.n	8002978 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTE : *GPIO_BaseAddr = GPIOE; errorState = ES_OK; break;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4a13      	ldr	r2, [pc, #76]	; (8002998 <MCAL_GPIO_SelectPort+0xbc>)
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	e011      	b.n	8002978 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTF : *GPIO_BaseAddr = GPIOF; errorState = ES_OK; break;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4a11      	ldr	r2, [pc, #68]	; (800299c <MCAL_GPIO_SelectPort+0xc0>)
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	e00b      	b.n	8002978 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTG : *GPIO_BaseAddr = GPIOG; errorState = ES_OK; break;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <MCAL_GPIO_SelectPort+0xc4>)
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
 800296a:	e005      	b.n	8002978 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTH : *GPIO_BaseAddr = GPIOH; errorState = ES_OK; break;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <MCAL_GPIO_SelectPort+0xc8>)
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
 8002976:	bf00      	nop
	}
	return errorState;
 8002978:	7bfb      	ldrb	r3, [r7, #15]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40020000 	.word	0x40020000
 800298c:	40020400 	.word	0x40020400
 8002990:	40020800 	.word	0x40020800
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40021000 	.word	0x40021000
 800299c:	40021400 	.word	0x40021400
 80029a0:	40021800 	.word	0x40021800
 80029a4:	40021c00 	.word	0x40021c00

080029a8 <MCAL_GPIO_SetPinMode>:


ES_t MCAL_GPIO_SetPinMode(GPIO_RegDef_t* GPIO_BaseAddr,u8 PinNum,u8 Mode)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	70fb      	strb	r3, [r7, #3]
 80029b4:	4613      	mov	r3, r2
 80029b6:	70bb      	strb	r3, [r7, #2]
	ES_t errorState = ES_NOT_OK;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]

	if(Mode <= MCAL_GPIO_MODE_INPUT_ANALOG)
 80029bc:	78bb      	ldrb	r3, [r7, #2]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d816      	bhi.n	80029f0 <MCAL_GPIO_SetPinMode+0x48>
	{
		GPIO_BaseAddr->MODER &= ~(0x3 << 2 * PinNum);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	0052      	lsls	r2, r2, #1
 80029ca:	2103      	movs	r1, #3
 80029cc:	fa01 f202 	lsl.w	r2, r1, r2
 80029d0:	43d2      	mvns	r2, r2
 80029d2:	401a      	ands	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	601a      	str	r2, [r3, #0]
		GPIO_BaseAddr->MODER |= (Mode<< 2 * PinNum);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	78b9      	ldrb	r1, [r7, #2]
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	0052      	lsls	r2, r2, #1
 80029e2:	fa01 f202 	lsl.w	r2, r1, r2
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	601a      	str	r2, [r3, #0]
		errorState = ES_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]
	}
	return errorState;
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <MCAL_GPIO_SelectSpeed>:


ES_t MCAL_GPIO_SelectSpeed(GPIO_RegDef_t* GPIO_BaseAddr,u8 PinNum,u8 Speed)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	70fb      	strb	r3, [r7, #3]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	70bb      	strb	r3, [r7, #2]
	ES_t errorState = ES_NOT_OK;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]

	GPIO_BaseAddr->OSPEEDR &= ~(0x3 << 2 *PinNum);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	0052      	lsls	r2, r2, #1
 8002a1a:	2103      	movs	r1, #3
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	43d2      	mvns	r2, r2
 8002a22:	401a      	ands	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]
	GPIO_BaseAddr->OSPEEDR |= (Speed << 2 * PinNum);;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	78b9      	ldrb	r1, [r7, #2]
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	0052      	lsls	r2, r2, #1
 8002a32:	fa01 f202 	lsl.w	r2, r1, r2
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	609a      	str	r2, [r3, #8]

	return errorState;
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <MCAL_GPIO_SetPullUpPullDown>:



ES_t MCAL_GPIO_SetPullUpPullDown(GPIO_RegDef_t* GPIO_BaseAddr,u8 PinNum,u8 PuPd)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	70fb      	strb	r3, [r7, #3]
 8002a56:	4613      	mov	r3, r2
 8002a58:	70bb      	strb	r3, [r7, #2]
	ES_t errorState = ES_NOT_OK;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]


	GPIO_BaseAddr->PUPDR &= ~(0x3 << 2 * PinNum);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	0052      	lsls	r2, r2, #1
 8002a66:	2103      	movs	r1, #3
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	43d2      	mvns	r2, r2
 8002a6e:	401a      	ands	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	60da      	str	r2, [r3, #12]
	GPIO_BaseAddr->PUPDR |= (PuPd << 2 * PinNum);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	78b9      	ldrb	r1, [r7, #2]
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	0052      	lsls	r2, r2, #1
 8002a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	60da      	str	r2, [r3, #12]

	errorState = ES_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
	return errorState;
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <MCAL_GPIO_SelectPinOutputType>:


ES_t MCAL_GPIO_SelectPinOutputType(GPIO_RegDef_t* GPIO_BaseAddr,u8 PinNum,u8 PinOPType)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	70fb      	strb	r3, [r7, #3]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	70bb      	strb	r3, [r7, #2]
	ES_t errorState = ES_NOT_OK;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]

	GPIO_BaseAddr->OTYPER &= ~(1<< PinNum);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aba:	43d2      	mvns	r2, r2
 8002abc:	401a      	ands	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	605a      	str	r2, [r3, #4]
	GPIO_BaseAddr->OTYPER |= (PinOPType<< PinNum);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	78b9      	ldrb	r1, [r7, #2]
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	fa01 f202 	lsl.w	r2, r1, r2
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	605a      	str	r2, [r3, #4]

	return errorState;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <MCAL_GPIO_SetAltFuncMode>:

ES_t MCAL_GPIO_SetAltFuncMode(GPIO_RegDef_t* GPIO_BaseAddr,u8 PinNum,u8 AltFunMode)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	70fb      	strb	r3, [r7, #3]
 8002aee:	4613      	mov	r3, r2
 8002af0:	70bb      	strb	r3, [r7, #2]
	ES_t errorState = ES_NOT_OK;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]

	// configure the alt function registers.
	u8 Temp1,Temp2;

	Temp1 = PinNum / 8;
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	08db      	lsrs	r3, r3, #3
 8002afa:	73bb      	strb	r3, [r7, #14]
	Temp2 = PinNum % 8;
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	737b      	strb	r3, [r7, #13]

	GPIO_BaseAddr->AFR[Temp1] &= ~(0xF << (4 * Temp2));
 8002b04:	7bba      	ldrb	r2, [r7, #14]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0e:	7b7a      	ldrb	r2, [r7, #13]
 8002b10:	0092      	lsls	r2, r2, #2
 8002b12:	210f      	movs	r1, #15
 8002b14:	fa01 f202 	lsl.w	r2, r1, r2
 8002b18:	43d2      	mvns	r2, r2
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	7bba      	ldrb	r2, [r7, #14]
 8002b1e:	4019      	ands	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3208      	adds	r2, #8
 8002b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIO_BaseAddr->AFR[Temp1] |= (AltFunMode << (4 * Temp2));
 8002b28:	7bba      	ldrb	r2, [r7, #14]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b32:	78b9      	ldrb	r1, [r7, #2]
 8002b34:	7b7a      	ldrb	r2, [r7, #13]
 8002b36:	0092      	lsls	r2, r2, #2
 8002b38:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	7bba      	ldrb	r2, [r7, #14]
 8002b40:	4319      	orrs	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3208      	adds	r2, #8
 8002b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	errorState = ES_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]

	return errorState;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <MCAL_EXTI_SetEdgeTrig>:


/*********************************************/

ES_t MCAL_EXTI_SetEdgeTrig(u8 PinNum,u8 Mode)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	460a      	mov	r2, r1
 8002b66:	71fb      	strb	r3, [r7, #7]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	71bb      	strb	r3, [r7, #6]
	ES_t errorState = ES_NOT_OK;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
	if (Mode == MCAL_GPIO_MODE_EXTI_FT)
 8002b70:	79bb      	ldrb	r3, [r7, #6]
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d117      	bne.n	8002ba6 <MCAL_EXTI_SetEdgeTrig+0x4a>
	{
		// 1. configure the FTSR
		SET_BIT(EXTI->FTSR,PinNum);
 8002b76:	4b29      	ldr	r3, [pc, #164]	; (8002c1c <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	79fa      	ldrb	r2, [r7, #7]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b82:	4611      	mov	r1, r2
 8002b84:	4a25      	ldr	r2, [pc, #148]	; (8002c1c <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002b86:	430b      	orrs	r3, r1
 8002b88:	60d3      	str	r3, [r2, #12]
		// Clear the corresponding RTSR bit
		CLR_BIT(EXTI->RTSR,PinNum);
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	79fa      	ldrb	r2, [r7, #7]
 8002b90:	2101      	movs	r1, #1
 8002b92:	fa01 f202 	lsl.w	r2, r1, r2
 8002b96:	43d2      	mvns	r2, r2
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4a20      	ldr	r2, [pc, #128]	; (8002c1c <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002b9c:	400b      	ands	r3, r1
 8002b9e:	6093      	str	r3, [r2, #8]

		errorState = ES_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	e033      	b.n	8002c0e <MCAL_EXTI_SetEdgeTrig+0xb2>
	}
	else if (Mode == MCAL_GPIO_MODE_EXTI_RT)
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d117      	bne.n	8002bdc <MCAL_EXTI_SetEdgeTrig+0x80>
	{
		// 1 . configure the RTSR
		SET_BIT(EXTI->RTSR,PinNum);
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	79fa      	ldrb	r2, [r7, #7]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6093      	str	r3, [r2, #8]
		// Clear the corresponding FTSR bit
		CLR_BIT(EXTI->FTSR,PinNum);
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	79fa      	ldrb	r2, [r7, #7]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bcc:	43d2      	mvns	r2, r2
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002bd2:	400b      	ands	r3, r1
 8002bd4:	60d3      	str	r3, [r2, #12]

		errorState = ES_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	e018      	b.n	8002c0e <MCAL_EXTI_SetEdgeTrig+0xb2>
	}
	else if (Mode == MCAL_GPIO_MODE_EXTI_RFT)
 8002bdc:	79bb      	ldrb	r3, [r7, #6]
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d115      	bne.n	8002c0e <MCAL_EXTI_SetEdgeTrig+0xb2>
	{
		// 1. configure both FTSR and RTSR
		SET_BIT(EXTI->RTSR,PinNum);
 8002be2:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	79fa      	ldrb	r2, [r7, #7]
 8002be8:	2101      	movs	r1, #1
 8002bea:	fa01 f202 	lsl.w	r2, r1, r2
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	6093      	str	r3, [r2, #8]
		SET_BIT(EXTI->FTSR,PinNum);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	79fa      	ldrb	r2, [r7, #7]
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002c02:	4611      	mov	r1, r2
 8002c04:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002c06:	430b      	orrs	r3, r1
 8002c08:	60d3      	str	r3, [r2, #12]

		errorState = ES_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
	}

	return errorState;
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40013c00 	.word	0x40013c00

08002c20 <MCAL_SYSCFG_SellectEXTIChannel>:




ES_t MCAL_SYSCFG_SellectEXTIChannel(u8 GPIO_Port,u8 PinNum)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	460a      	mov	r2, r1
 8002c2a:	71fb      	strb	r3, [r7, #7]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	71bb      	strb	r3, [r7, #6]
	ES_t errorState = ES_NOT_OK;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]

	u8 RNTemp   = PinNum / 4;
 8002c34:	79bb      	ldrb	r3, [r7, #6]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	73bb      	strb	r3, [r7, #14]
	u8 IndxTemp = PinNum % 4;
 8002c3a:	79bb      	ldrb	r3, [r7, #6]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	737b      	strb	r3, [r7, #13]

	SYSCFG->EXTICR[RNTemp] = GPIO_Port << (IndxTemp * 4);
 8002c42:	79fa      	ldrb	r2, [r7, #7]
 8002c44:	7b7b      	ldrb	r3, [r7, #13]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	fa02 f103 	lsl.w	r1, r2, r3
 8002c4c:	4a06      	ldr	r2, [pc, #24]	; (8002c68 <MCAL_SYSCFG_SellectEXTIChannel+0x48>)
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	3302      	adds	r3, #2
 8002c52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	errorState = ES_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]

	return errorState;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40013800 	.word	0x40013800

08002c6c <MCAL_EXTI_EnableLine>:


ES_t MCAL_EXTI_EnableLine(u8 PinNum)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]

	SET_BIT(EXTI->IMR,PinNum);
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <MCAL_EXTI_EnableLine+0x34>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	79fa      	ldrb	r2, [r7, #7]
 8002c80:	2101      	movs	r1, #1
 8002c82:	fa01 f202 	lsl.w	r2, r1, r2
 8002c86:	4611      	mov	r1, r2
 8002c88:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <MCAL_EXTI_EnableLine+0x34>)
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	6013      	str	r3, [r2, #0]

	errorState = ES_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	73fb      	strb	r3, [r7, #15]

	return errorState;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	40013c00 	.word	0x40013c00

08002ca4 <MCAL_EXTI_SetCallBack>:


ES_t MCAL_EXTI_SetCallBack(u8 Line, void (*callBackFun)(void))
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]

	if(Line <= 16)
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d806      	bhi.n	8002cc8 <MCAL_EXTI_SetCallBack+0x24>
	{
		EXTI_CallBack[Line] = callBackFun;
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	4906      	ldr	r1, [pc, #24]	; (8002cd8 <MCAL_EXTI_SetCallBack+0x34>)
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		errorState = ES_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73fb      	strb	r3, [r7, #15]
	}

	return errorState;
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20012e7c 	.word	0x20012e7c

08002cdc <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 0))
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <EXTI0_IRQHandler+0x30>)
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00c      	beq.n	8002d06 <EXTI0_IRQHandler+0x2a>
	{


		if (EXTI_CallBack[0] != NULL) // then call the callback function
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <EXTI0_IRQHandler+0x34>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <EXTI0_IRQHandler+0x1e>
		{
			EXTI_CallBack[0]();
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <EXTI0_IRQHandler+0x34>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4798      	blx	r3
		}

		EXTI->PR |= (1 << 0);
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <EXTI0_IRQHandler+0x30>)
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	4a03      	ldr	r2, [pc, #12]	; (8002d0c <EXTI0_IRQHandler+0x30>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6153      	str	r3, [r2, #20]
	}
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40013c00 	.word	0x40013c00
 8002d10:	20012e7c 	.word	0x20012e7c

08002d14 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 1))
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <EXTI1_IRQHandler+0x30>)
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00c      	beq.n	8002d3e <EXTI1_IRQHandler+0x2a>
	{

		if (EXTI_CallBack[1] != NULL) // then call the callback function
 8002d24:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <EXTI1_IRQHandler+0x34>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <EXTI1_IRQHandler+0x1e>
		{
			EXTI_CallBack[1]();
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <EXTI1_IRQHandler+0x34>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4798      	blx	r3
		}

		EXTI->PR |= (1 << 1);
 8002d32:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <EXTI1_IRQHandler+0x30>)
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	4a03      	ldr	r2, [pc, #12]	; (8002d44 <EXTI1_IRQHandler+0x30>)
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	6153      	str	r3, [r2, #20]
	}
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40013c00 	.word	0x40013c00
 8002d48:	20012e7c 	.word	0x20012e7c

08002d4c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 2))
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <EXTI2_IRQHandler+0x30>)
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00c      	beq.n	8002d76 <EXTI2_IRQHandler+0x2a>
	{

		if (EXTI_CallBack[2] != NULL) // then call the callback function
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <EXTI2_IRQHandler+0x34>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <EXTI2_IRQHandler+0x1e>
		{
			EXTI_CallBack[2]();
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <EXTI2_IRQHandler+0x34>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 2);
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <EXTI2_IRQHandler+0x30>)
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <EXTI2_IRQHandler+0x30>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	6153      	str	r3, [r2, #20]
	}
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40013c00 	.word	0x40013c00
 8002d80:	20012e7c 	.word	0x20012e7c

08002d84 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 3))
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <EXTI3_IRQHandler+0x30>)
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00c      	beq.n	8002dae <EXTI3_IRQHandler+0x2a>
	{

		if (EXTI_CallBack[3] != NULL) // then call the callback function
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <EXTI3_IRQHandler+0x34>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <EXTI3_IRQHandler+0x1e>
		{
			EXTI_CallBack[3]();
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <EXTI3_IRQHandler+0x34>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 3);
 8002da2:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <EXTI3_IRQHandler+0x30>)
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	4a03      	ldr	r2, [pc, #12]	; (8002db4 <EXTI3_IRQHandler+0x30>)
 8002da8:	f043 0308 	orr.w	r3, r3, #8
 8002dac:	6153      	str	r3, [r2, #20]
	}
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40013c00 	.word	0x40013c00
 8002db8:	20012e7c 	.word	0x20012e7c

08002dbc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 4))
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <EXTI4_IRQHandler+0x30>)
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00c      	beq.n	8002de6 <EXTI4_IRQHandler+0x2a>
	{

		if (EXTI_CallBack[4] != NULL) // then call the callback function
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <EXTI4_IRQHandler+0x34>)
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <EXTI4_IRQHandler+0x1e>
		{
			EXTI_CallBack[4]();
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <EXTI4_IRQHandler+0x34>)
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	4798      	blx	r3
		}

		EXTI->PR |= (1 << 4);
 8002dda:	4b04      	ldr	r3, [pc, #16]	; (8002dec <EXTI4_IRQHandler+0x30>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	4a03      	ldr	r2, [pc, #12]	; (8002dec <EXTI4_IRQHandler+0x30>)
 8002de0:	f043 0310 	orr.w	r3, r3, #16
 8002de4:	6153      	str	r3, [r2, #20]
	}
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40013c00 	.word	0x40013c00
 8002df0:	20012e7c 	.word	0x20012e7c

08002df4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0

	if (EXTI->PR & (1 << 5))
 8002df8:	4b30      	ldr	r3, [pc, #192]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00c      	beq.n	8002e1e <EXTI9_5_IRQHandler+0x2a>
	{

		if (EXTI_CallBack[5] != NULL) // then call the callback function
 8002e04:	4b2e      	ldr	r3, [pc, #184]	; (8002ec0 <EXTI9_5_IRQHandler+0xcc>)
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <EXTI9_5_IRQHandler+0x1e>
		{
			EXTI_CallBack[5]();
 8002e0c:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <EXTI9_5_IRQHandler+0xcc>)
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 5);
 8002e12:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	4a29      	ldr	r2, [pc, #164]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002e18:	f043 0320 	orr.w	r3, r3, #32
 8002e1c:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 6))
 8002e1e:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00c      	beq.n	8002e44 <EXTI9_5_IRQHandler+0x50>
	{

		if (EXTI_CallBack[6] != NULL) // then call the callback function
 8002e2a:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <EXTI9_5_IRQHandler+0xcc>)
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <EXTI9_5_IRQHandler+0x44>
		{
			EXTI_CallBack[6]();
 8002e32:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <EXTI9_5_IRQHandler+0xcc>)
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 6);
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e42:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 7))
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00c      	beq.n	8002e6a <EXTI9_5_IRQHandler+0x76>
	{
		if (EXTI_CallBack[7] != NULL) // then call the callback function
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <EXTI9_5_IRQHandler+0xcc>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <EXTI9_5_IRQHandler+0x6a>
		{
			EXTI_CallBack[7]();
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <EXTI9_5_IRQHandler+0xcc>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 7);
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e68:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 8))
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00c      	beq.n	8002e90 <EXTI9_5_IRQHandler+0x9c>
	{

		if (EXTI_CallBack[8] != NULL) // then call the callback function
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <EXTI9_5_IRQHandler+0xcc>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <EXTI9_5_IRQHandler+0x90>
		{
			EXTI_CallBack[8]();
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <EXTI9_5_IRQHandler+0xcc>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 8);
 8002e84:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8e:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 9))
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00c      	beq.n	8002eb6 <EXTI9_5_IRQHandler+0xc2>
	{

		if (EXTI_CallBack[9] != NULL) // then call the callback function
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <EXTI9_5_IRQHandler+0xcc>)
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <EXTI9_5_IRQHandler+0xb6>
		{
			EXTI_CallBack[9]();
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <EXTI9_5_IRQHandler+0xcc>)
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 9);
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	4a03      	ldr	r2, [pc, #12]	; (8002ebc <EXTI9_5_IRQHandler+0xc8>)
 8002eb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb4:	6153      	str	r3, [r2, #20]
	}
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40013c00 	.word	0x40013c00
 8002ec0:	20012e7c 	.word	0x20012e7c

08002ec4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10))
 8002ec8:	4b39      	ldr	r3, [pc, #228]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00c      	beq.n	8002eee <EXTI15_10_IRQHandler+0x2a>
	{

		if (EXTI_CallBack[10] != NULL) // then call the callback function
 8002ed4:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <EXTI15_10_IRQHandler+0xf0>)
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <EXTI15_10_IRQHandler+0x1e>
		{
			EXTI_CallBack[10]();
 8002edc:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <EXTI15_10_IRQHandler+0xf0>)
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 10);
 8002ee2:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	4a32      	ldr	r2, [pc, #200]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002ee8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eec:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 11))
 8002eee:	4b30      	ldr	r3, [pc, #192]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <EXTI15_10_IRQHandler+0x50>
	{

		if (EXTI_CallBack[11] != NULL) // then call the callback function
 8002efa:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <EXTI15_10_IRQHandler+0xf0>)
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <EXTI15_10_IRQHandler+0x44>
		{
			EXTI_CallBack[11]();
 8002f02:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <EXTI15_10_IRQHandler+0xf0>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 11);
 8002f08:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002f0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f12:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 12))
 8002f14:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00c      	beq.n	8002f3a <EXTI15_10_IRQHandler+0x76>
	{

		if (EXTI_CallBack[12] != NULL) // then call the callback function
 8002f20:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <EXTI15_10_IRQHandler+0xf0>)
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <EXTI15_10_IRQHandler+0x6a>
		{
			EXTI_CallBack[12]();
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <EXTI15_10_IRQHandler+0xf0>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 12);
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002f34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f38:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 13))
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00c      	beq.n	8002f60 <EXTI15_10_IRQHandler+0x9c>
	{

		if (EXTI_CallBack[13] != NULL) // then call the callback function
 8002f46:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <EXTI15_10_IRQHandler+0xf0>)
 8002f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <EXTI15_10_IRQHandler+0x90>
		{
			EXTI_CallBack[13]();
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <EXTI15_10_IRQHandler+0xf0>)
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 13);
 8002f54:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002f5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f5e:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 14))
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00c      	beq.n	8002f86 <EXTI15_10_IRQHandler+0xc2>
	{
		if (EXTI_CallBack[14] != NULL) // then call the callback function
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <EXTI15_10_IRQHandler+0xf0>)
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <EXTI15_10_IRQHandler+0xb6>
		{
			EXTI_CallBack[14]();
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <EXTI15_10_IRQHandler+0xf0>)
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 14);
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f84:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 15))
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <EXTI15_10_IRQHandler+0xe8>
	{
		if (EXTI_CallBack[15] != NULL) // then call the callback function
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <EXTI15_10_IRQHandler+0xf0>)
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <EXTI15_10_IRQHandler+0xdc>
		{
			EXTI_CallBack[15]();
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <EXTI15_10_IRQHandler+0xf0>)
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 15);
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	4a02      	ldr	r2, [pc, #8]	; (8002fb0 <EXTI15_10_IRQHandler+0xec>)
 8002fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002faa:	6153      	str	r3, [r2, #20]
	}
}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40013c00 	.word	0x40013c00
 8002fb4:	20012e7c 	.word	0x20012e7c

08002fb8 <MCAL_RCC_SetAHBPrescaller>:
u8 APB_PreScaler[4] = { 2, 4 , 8, 16};



void MCAL_RCC_SetAHBPrescaller(u8 AHBPrescaller)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << 4);
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <MCAL_RCC_SetAHBPrescaller+0x34>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <MCAL_RCC_SetAHBPrescaller+0x34>)
 8002fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fcc:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (AHBPrescaller << 4);         //AHB  pre-scaler
 8002fce:	4b07      	ldr	r3, [pc, #28]	; (8002fec <MCAL_RCC_SetAHBPrescaller+0x34>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	79fa      	ldrb	r2, [r7, #7]
 8002fd4:	0112      	lsls	r2, r2, #4
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4a04      	ldr	r2, [pc, #16]	; (8002fec <MCAL_RCC_SetAHBPrescaller+0x34>)
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	6093      	str	r3, [r2, #8]
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800

08002ff0 <MCAL_RCC_SetAPB1Prescaller>:

void MCAL_RCC_SetAPB1Prescaller(u8 APB1Prescaller)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0x7 << 10);
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <MCAL_RCC_SetAPB1Prescaller+0x34>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	4a09      	ldr	r2, [pc, #36]	; (8003024 <MCAL_RCC_SetAPB1Prescaller+0x34>)
 8003000:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003004:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (APB1Prescaller << 10);      //APB1 pre-scaler
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <MCAL_RCC_SetAPB1Prescaller+0x34>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	79fa      	ldrb	r2, [r7, #7]
 800300c:	0292      	lsls	r2, r2, #10
 800300e:	4611      	mov	r1, r2
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <MCAL_RCC_SetAPB1Prescaller+0x34>)
 8003012:	430b      	orrs	r3, r1
 8003014:	6093      	str	r3, [r2, #8]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800

08003028 <MCAL_RCC_SetAPB2Prescaller>:

void MCAL_RCC_SetAPB2Prescaller(u8 APB2Prescaller)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0x7 << 13);
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <MCAL_RCC_SetAPB2Prescaller+0x34>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <MCAL_RCC_SetAPB2Prescaller+0x34>)
 8003038:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800303c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (APB2Prescaller << 13);      //APB2 pre-scaler
 800303e:	4b07      	ldr	r3, [pc, #28]	; (800305c <MCAL_RCC_SetAPB2Prescaller+0x34>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	79fa      	ldrb	r2, [r7, #7]
 8003044:	0352      	lsls	r2, r2, #13
 8003046:	4611      	mov	r1, r2
 8003048:	4a04      	ldr	r2, [pc, #16]	; (800305c <MCAL_RCC_SetAPB2Prescaller+0x34>)
 800304a:	430b      	orrs	r3, r1
 800304c:	6093      	str	r3, [r2, #8]
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800

08003060 <MCAL_RCC_SelectSystemClockSource>:



ES_t MCAL_RCC_SelectSystemClockSource(u8 SysClkSrc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]

	ES_t errorState =ES_NOT_OK;
 800306a:	2301      	movs	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]

	if(SysClkSrc == MCAL_RCC_SYSCLK_HSE_CRYSTAL)
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d108      	bne.n	8003086 <MCAL_RCC_SelectSystemClockSource+0x26>
	{
		EnableHSE_crys(); // enable the HSE
 8003074:	f000 f956 	bl	8003324 <EnableHSE_crys>
		SelectHSE();      // select HSE
 8003078:	f000 f996 	bl	80033a8 <SelectHSE>
		DisableHSI();     // disable HSI
 800307c:	f000 f9c0 	bl	8003400 <DisableHSI>
		errorState =ES_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	e016      	b.n	80030b4 <MCAL_RCC_SelectSystemClockSource+0x54>
	}
	else if(SysClkSrc == MCAL_RCC_SYSCLK_HSE_RC)
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d108      	bne.n	800309e <MCAL_RCC_SelectSystemClockSource+0x3e>
	{
		EnableHSE_rc();    // enable the HSE
 800308c:	f000 f960 	bl	8003350 <EnableHSE_rc>
		SelectHSE();       // select HSE
 8003090:	f000 f98a 	bl	80033a8 <SelectHSE>
		DisableHSI();      // disable HSI
 8003094:	f000 f9b4 	bl	8003400 <DisableHSI>
		errorState =ES_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	e00a      	b.n	80030b4 <MCAL_RCC_SelectSystemClockSource+0x54>
	}
	else if(SysClkSrc == MCAL_RCC_SYSCLK_HSI)
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d107      	bne.n	80030b4 <MCAL_RCC_SelectSystemClockSource+0x54>
	{
		EnableHSI();      // enable the HSI
 80030a4:	f000 f996 	bl	80033d4 <EnableHSI>
		SelectHSI();      // select HSI
 80030a8:	f000 f9ba 	bl	8003420 <SelectHSI>
		DisableHSE();     // disable HSE
 80030ac:	f000 f966 	bl	800337c <DisableHSE>
		errorState =ES_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]
	else if(SysClkSrc == MCAL_RCC_SYSCLK_PLL)
	{

	}

	return errorState;
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <MCAL_RCC_AHB1PeriphClockEnable>:


ES_t MCAL_RCC_AHB1PeriphClockEnable(u8 PerNum)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]

	SET_BIT(RCC->AHB1ENR,PerNum);
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <MCAL_RCC_AHB1PeriphClockEnable+0x34>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	79fa      	ldrb	r2, [r7, #7]
 80030d4:	2101      	movs	r1, #1
 80030d6:	fa01 f202 	lsl.w	r2, r1, r2
 80030da:	4611      	mov	r1, r2
 80030dc:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <MCAL_RCC_AHB1PeriphClockEnable+0x34>)
 80030de:	430b      	orrs	r3, r1
 80030e0:	6313      	str	r3, [r2, #48]	; 0x30

	errorState = ES_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	73fb      	strb	r3, [r7, #15]

	return errorState;
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40023800 	.word	0x40023800

080030f8 <MCAL_RCC_APB1PeriphClockEnable>:
	return errorState;
}


ES_t MCAL_RCC_APB1PeriphClockEnable(u8 PerNum)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]

	SET_BIT(RCC->APB1ENR,PerNum);
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <MCAL_RCC_APB1PeriphClockEnable+0x34>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	79fa      	ldrb	r2, [r7, #7]
 800310c:	2101      	movs	r1, #1
 800310e:	fa01 f202 	lsl.w	r2, r1, r2
 8003112:	4611      	mov	r1, r2
 8003114:	4a05      	ldr	r2, [pc, #20]	; (800312c <MCAL_RCC_APB1PeriphClockEnable+0x34>)
 8003116:	430b      	orrs	r3, r1
 8003118:	6413      	str	r3, [r2, #64]	; 0x40

	errorState = ES_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]

	return errorState;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40023800 	.word	0x40023800

08003130 <MCAL_RCC_AHB1PeriphClockDisable>:
	return errorState;
}


ES_t MCAL_RCC_AHB1PeriphClockDisable(u8 PerNum)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]

	CLR_BIT(RCC->AHB1ENR,PerNum);
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <MCAL_RCC_AHB1PeriphClockDisable+0x38>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	79fa      	ldrb	r2, [r7, #7]
 8003144:	2101      	movs	r1, #1
 8003146:	fa01 f202 	lsl.w	r2, r1, r2
 800314a:	43d2      	mvns	r2, r2
 800314c:	4611      	mov	r1, r2
 800314e:	4a06      	ldr	r2, [pc, #24]	; (8003168 <MCAL_RCC_AHB1PeriphClockDisable+0x38>)
 8003150:	400b      	ands	r3, r1
 8003152:	6313      	str	r3, [r2, #48]	; 0x30

	errorState = ES_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]

	return errorState;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <MCAL_RCC_APB1PeriphClockDisable>:
	return errorState;
}


ES_t MCAL_RCC_APB1PeriphClockDisable(u8 PerNum)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]

	CLR_BIT(RCC->APB1ENR,PerNum);
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <MCAL_RCC_APB1PeriphClockDisable+0x38>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	79fa      	ldrb	r2, [r7, #7]
 8003180:	2101      	movs	r1, #1
 8003182:	fa01 f202 	lsl.w	r2, r1, r2
 8003186:	43d2      	mvns	r2, r2
 8003188:	4611      	mov	r1, r2
 800318a:	4a06      	ldr	r2, [pc, #24]	; (80031a4 <MCAL_RCC_APB1PeriphClockDisable+0x38>)
 800318c:	400b      	ands	r3, r1
 800318e:	6413      	str	r3, [r2, #64]	; 0x40

	errorState = ES_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	73fb      	strb	r3, [r7, #15]

	return errorState;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800

080031a8 <MCAL_RCC_GetAPB1Value>:
	return errorState;
}


ES_t MCAL_RCC_GetAPB1Value(u32 *APB2Value)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	ES_t errorState = ES_NOT_OK;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
	u32 PCLK1,SystemClk;
	u8 ClockSource, Temp,APB1Prescaler;
	u16 AHBPrescaler;


	ClockSource = ((RCC->CFGR >> RCC_CFGR_SWS0) & 0x3);
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <MCAL_RCC_GetAPB1Value+0xb0>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	089b      	lsrs	r3, r3, #2
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	73bb      	strb	r3, [r7, #14]

	if(ClockSource == 0 )
 80031c2:	7bbb      	ldrb	r3, [r7, #14]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d102      	bne.n	80031ce <MCAL_RCC_GetAPB1Value+0x26>
	{
		SystemClk = 16000000; //HSI
 80031c8:	4b24      	ldr	r3, [pc, #144]	; (800325c <MCAL_RCC_GetAPB1Value+0xb4>)
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	e00a      	b.n	80031e4 <MCAL_RCC_GetAPB1Value+0x3c>
	}
	else if(ClockSource == 1)
 80031ce:	7bbb      	ldrb	r3, [r7, #14]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d102      	bne.n	80031da <MCAL_RCC_GetAPB1Value+0x32>
	{
		SystemClk = 8000000; //HSE
 80031d4:	4b22      	ldr	r3, [pc, #136]	; (8003260 <MCAL_RCC_GetAPB1Value+0xb8>)
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e004      	b.n	80031e4 <MCAL_RCC_GetAPB1Value+0x3c>
	}
	else if (ClockSource == 2)
 80031da:	7bbb      	ldrb	r3, [r7, #14]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d001      	beq.n	80031e4 <MCAL_RCC_GetAPB1Value+0x3c>
	{
		// PLL
	}
	else
	{
		return errorState;
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	e032      	b.n	800324a <MCAL_RCC_GetAPB1Value+0xa2>
	}

	//for AHB pre-scaler
	Temp = ((RCC->CFGR >> 4 ) & 0xF);
 80031e4:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <MCAL_RCC_GetAPB1Value+0xb0>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	737b      	strb	r3, [r7, #13]

	if(Temp < 8)
 80031f2:	7b7b      	ldrb	r3, [r7, #13]
 80031f4:	2b07      	cmp	r3, #7
 80031f6:	d802      	bhi.n	80031fe <MCAL_RCC_GetAPB1Value+0x56>
	{
		AHBPrescaler = 1;
 80031f8:	2301      	movs	r3, #1
 80031fa:	823b      	strh	r3, [r7, #16]
 80031fc:	e005      	b.n	800320a <MCAL_RCC_GetAPB1Value+0x62>
	}
	else
	{
		AHBPrescaler = AHB_PreScaler[Temp-8];
 80031fe:	7b7b      	ldrb	r3, [r7, #13]
 8003200:	3b08      	subs	r3, #8
 8003202:	4a18      	ldr	r2, [pc, #96]	; (8003264 <MCAL_RCC_GetAPB1Value+0xbc>)
 8003204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003208:	823b      	strh	r3, [r7, #16]
	}


	//apb1
	Temp = ((RCC->CFGR >> 10 ) & 0x7);
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <MCAL_RCC_GetAPB1Value+0xb0>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	0a9b      	lsrs	r3, r3, #10
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	737b      	strb	r3, [r7, #13]

	if(Temp < 4)
 8003218:	7b7b      	ldrb	r3, [r7, #13]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d802      	bhi.n	8003224 <MCAL_RCC_GetAPB1Value+0x7c>
	{
		APB1Prescaler = 1;
 800321e:	2301      	movs	r3, #1
 8003220:	74fb      	strb	r3, [r7, #19]
 8003222:	e004      	b.n	800322e <MCAL_RCC_GetAPB1Value+0x86>
	}
	else
	{
		APB1Prescaler = APB_PreScaler[Temp-4];
 8003224:	7b7b      	ldrb	r3, [r7, #13]
 8003226:	3b04      	subs	r3, #4
 8003228:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <MCAL_RCC_GetAPB1Value+0xc0>)
 800322a:	5cd3      	ldrb	r3, [r2, r3]
 800322c:	74fb      	strb	r3, [r7, #19]
	}

	PCLK1 =  (SystemClk / AHBPrescaler) /APB1Prescaler;
 800322e:	8a3b      	ldrh	r3, [r7, #16]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	fbb2 f2f3 	udiv	r2, r2, r3
 8003236:	7cfb      	ldrb	r3, [r7, #19]
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	60bb      	str	r3, [r7, #8]
	errorState = ES_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]

	*APB2Value = PCLK1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	601a      	str	r2, [r3, #0]

	return errorState;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	00f42400 	.word	0x00f42400
 8003260:	007a1200 	.word	0x007a1200
 8003264:	2000001c 	.word	0x2000001c
 8003268:	2000002c 	.word	0x2000002c

0800326c <MCAL_RCC_GetSysClkValue>:

	return errorState;
}

ES_t MCAL_RCC_GetSysClkValue(u32 *SysClkValue)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	ES_t errorState = ES_NOT_OK;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]

	u8 ClockSource = ((RCC->CFGR >> RCC_CFGR_SWS0) & 0x3);
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <MCAL_RCC_GetSysClkValue+0x4c>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	089b      	lsrs	r3, r3, #2
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	73bb      	strb	r3, [r7, #14]

	if(ClockSource == 0 )
 8003286:	7bbb      	ldrb	r3, [r7, #14]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <MCAL_RCC_GetSysClkValue+0x2c>
	{
		*SysClkValue = 16000000; //HSI
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a0b      	ldr	r2, [pc, #44]	; (80032bc <MCAL_RCC_GetSysClkValue+0x50>)
 8003290:	601a      	str	r2, [r3, #0]
		errorState = ES_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]
 8003296:	e007      	b.n	80032a8 <MCAL_RCC_GetSysClkValue+0x3c>
	}
	else if(ClockSource == 1)
 8003298:	7bbb      	ldrb	r3, [r7, #14]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d104      	bne.n	80032a8 <MCAL_RCC_GetSysClkValue+0x3c>
	{
		*SysClkValue = 8000000; //HSE
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <MCAL_RCC_GetSysClkValue+0x54>)
 80032a2:	601a      	str	r2, [r3, #0]
		errorState = ES_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	73fb      	strb	r3, [r7, #15]
	else if (ClockSource == 2)
	{
		// PLL
	}

	return errorState;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	00f42400 	.word	0x00f42400
 80032c0:	007a1200 	.word	0x007a1200

080032c4 <MCAL_RCC_GetSysClkType>:


ES_t MCAL_RCC_GetSysClkType(u8 *SysClkType)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	ES_t errorState = ES_NOT_OK;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]

	u8 ClockSource;

	ClockSource = ((RCC->CFGR >> RCC_CFGR_SWS0) & 0x3);
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <MCAL_RCC_GetSysClkType+0x5c>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	73bb      	strb	r3, [r7, #14]

	if(ClockSource == 0 )
 80032de:	7bbb      	ldrb	r3, [r7, #14]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d105      	bne.n	80032f0 <MCAL_RCC_GetSysClkType+0x2c>
	{
		*SysClkType = MCAL_RCC_SYSCLK_HSI; //HSI
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
		errorState = ES_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	73fb      	strb	r3, [r7, #15]
 80032ee:	e010      	b.n	8003312 <MCAL_RCC_GetSysClkType+0x4e>
	}
	else if(ClockSource == 1)
 80032f0:	7bbb      	ldrb	r3, [r7, #14]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d105      	bne.n	8003302 <MCAL_RCC_GetSysClkType+0x3e>
	{
		*SysClkType = MCAL_RCC_SYSCLK_HSE_CRYSTAL; //HSE
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
		errorState = ES_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	e007      	b.n	8003312 <MCAL_RCC_GetSysClkType+0x4e>
	}
	else if (ClockSource == 2)
 8003302:	7bbb      	ldrb	r3, [r7, #14]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d104      	bne.n	8003312 <MCAL_RCC_GetSysClkType+0x4e>
	{
		*SysClkType = MCAL_RCC_SYSCLK_PLL; // PLL
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2203      	movs	r2, #3
 800330c:	701a      	strb	r2, [r3, #0]
		errorState = ES_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
	}

	return errorState;
 8003312:	7bfb      	ldrb	r3, [r7, #15]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40023800 	.word	0x40023800

08003324 <EnableHSE_crys>:


/****************************************** static functions ********************************************/

static void EnableHSE_crys(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR,RCC_CR_HSEON);
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <EnableHSE_crys+0x28>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a07      	ldr	r2, [pc, #28]	; (800334c <EnableHSE_crys+0x28>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->CR,RCC_CR_HSYBYP);
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <EnableHSE_crys+0x28>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <EnableHSE_crys+0x28>)
 800333a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800333e:	6013      	str	r3, [r2, #0]
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800

08003350 <EnableHSE_rc>:

static void EnableHSE_rc(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR,RCC_CR_HSEON);
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <EnableHSE_rc+0x28>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a07      	ldr	r2, [pc, #28]	; (8003378 <EnableHSE_rc+0x28>)
 800335a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335e:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->CR,RCC_CR_HSYBYP);
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <EnableHSE_rc+0x28>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a04      	ldr	r2, [pc, #16]	; (8003378 <EnableHSE_rc+0x28>)
 8003366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800

0800337c <DisableHSE>:

static void DisableHSE(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
	CLR_BIT(RCC->CR,RCC_CR_HSEON);
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <DisableHSE+0x28>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <DisableHSE+0x28>)
 8003386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338a:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC->CR,RCC_CR_HSYBYP);
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <DisableHSE+0x28>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <DisableHSE+0x28>)
 8003392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003396:	6013      	str	r3, [r2, #0]
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800

080033a8 <SelectHSE>:

static void SelectHSE(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CFGR,RCC_CFGR_SW0);
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <SelectHSE+0x28>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4a07      	ldr	r2, [pc, #28]	; (80033d0 <SelectHSE+0x28>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6093      	str	r3, [r2, #8]
	CLR_BIT(RCC->CFGR,RCC_CFGR_SW1);
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <SelectHSE+0x28>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a04      	ldr	r2, [pc, #16]	; (80033d0 <SelectHSE+0x28>)
 80033be:	f023 0302 	bic.w	r3, r3, #2
 80033c2:	6093      	str	r3, [r2, #8]
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800

080033d4 <EnableHSI>:


static void EnableHSI(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR,RCC_CR_HSION);
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <EnableHSI+0x28>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a07      	ldr	r2, [pc, #28]	; (80033fc <EnableHSI+0x28>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->CR,7);  // HSITRIM[4:0]=0x8
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <EnableHSI+0x28>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a04      	ldr	r2, [pc, #16]	; (80033fc <EnableHSI+0x28>)
 80033ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ee:	6013      	str	r3, [r2, #0]
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800

08003400 <DisableHSI>:

static void DisableHSI(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
	CLR_BIT(RCC->CR,RCC_CR_HSION);
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <DisableHSI+0x1c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a04      	ldr	r2, [pc, #16]	; (800341c <DisableHSI+0x1c>)
 800340a:	f023 0301 	bic.w	r3, r3, #1
 800340e:	6013      	str	r3, [r2, #0]
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800

08003420 <SelectHSI>:



static void SelectHSI(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
	CLR_BIT(RCC->CFGR,RCC_CFGR_SW0);
 8003424:	4b08      	ldr	r3, [pc, #32]	; (8003448 <SelectHSI+0x28>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a07      	ldr	r2, [pc, #28]	; (8003448 <SelectHSI+0x28>)
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	6093      	str	r3, [r2, #8]
	CLR_BIT(RCC->CFGR,RCC_CFGR_SW1);
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <SelectHSI+0x28>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <SelectHSI+0x28>)
 8003436:	f023 0302 	bic.w	r3, r3, #2
 800343a:	6093      	str	r3, [r2, #8]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800

0800344c <MCAL_USART_Enable>:
#include "error_state.h"
#include "stm32f407x_usart.h"
#include "stm32f4xxx_rcc.h"

void MCAL_USART_Enable(USART_RegDef_t *pUSARTx)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_UE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	60da      	str	r2, [r3, #12]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <MCAL_USART_EnableRxOnly>:
{
	CLR_BIT(pUSARTx->CR1 ,MCAL_USART_CR1_UE);
}

void MCAL_USART_EnableRxOnly(USART_RegDef_t *pUSARTx)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_RE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f043 0204 	orr.w	r2, r3, #4
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	60da      	str	r2, [r3, #12]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_TE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f023 0208 	bic.w	r2, r3, #8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	60da      	str	r2, [r3, #12]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <MCAL_USART_EnableTxOnly>:

void MCAL_USART_EnableTxOnly(USART_RegDef_t *pUSARTx)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_RE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f023 0204 	bic.w	r2, r3, #4
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	60da      	str	r2, [r3, #12]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_TE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f043 0208 	orr.w	r2, r3, #8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <MCAL_USART_EnableRxTx>:

void MCAL_USART_EnableRxTx(USART_RegDef_t *pUSARTx)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_RE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_TE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f043 0208 	orr.w	r2, r3, #8
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	60da      	str	r2, [r3, #12]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <MCAL_USART_SetWordLen8Bit>:

void MCAL_USART_SetWordLen8Bit(USART_RegDef_t *pUSARTx)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_M);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60da      	str	r2, [r3, #12]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <MCAL_USART_SetWordLen9Bit>:

void MCAL_USART_SetWordLen9Bit(USART_RegDef_t *pUSARTx)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_M);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <MCAL_USART_EnableOddParity>:

void MCAL_USART_EnableOddParity(USART_RegDef_t *pUSARTx)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_PCE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_PS);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <MCAL_USART_EnableEvenParity>:

void MCAL_USART_EnableEvenParity(USART_RegDef_t *pUSARTx)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_PCE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_PS);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <MCAL_USART_DisableParity>:

void MCAL_USART_DisableParity(USART_RegDef_t *pUSARTx)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_PCE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60da      	str	r2, [r3, #12]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_PS);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	60da      	str	r2, [r3, #12]

}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <MCAL_USART_SetStopConfig>:

void MCAL_USART_SetStopConfig(USART_RegDef_t *pUSARTx,u8 StopBitConfig)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	70fb      	strb	r3, [r7, #3]
	if(StopBitConfig < MCAL_USART_STOPBITS_1_5)
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d806      	bhi.n	80035d4 <MCAL_USART_SetStopConfig+0x20>
	{
		pUSARTx->CR2 |= StopBitConfig << MCAL_USART_CR2_STOP;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	0312      	lsls	r2, r2, #12
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	611a      	str	r2, [r3, #16]
	}

}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <MCAL_USART_DisableTXEI>:
{
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_TXEIE);
}

void MCAL_USART_DisableTXEI(USART_RegDef_t *pUSARTx)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_TXEIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60da      	str	r2, [r3, #12]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <MCAL_USART_ReadTXEI>:

u8 MCAL_USART_ReadTXEI(USART_RegDef_t *pUSARTx)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	return GET_BIT(pUSARTx->CR1,MCAL_USART_CR1_TXEIE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	09db      	lsrs	r3, r3, #7
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
}
 8003616:	4618      	mov	r0, r3
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <MCAL_USART_DisableRXNI>:
{
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_RXNEIE);
}

void MCAL_USART_DisableRXNI(USART_RegDef_t *pUSARTx)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_RXNEIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f023 0220 	bic.w	r2, r3, #32
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	60da      	str	r2, [r3, #12]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <MCAL_USART_ReadRXNI>:


u8 MCAL_USART_ReadRXNI(USART_RegDef_t *pUSARTx)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
	return GET_BIT(pUSARTx->CR1,MCAL_USART_CR1_RXNEIE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	b2db      	uxtb	r3, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <MCAL_USART_EnableCTSFlowControl>:

/*
 * HW flow control
 */
void MCAL_USART_EnableCTSFlowControl(USART_RegDef_t *pUSARTx)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR3,MCAL_USART_CR3_CTSE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	615a      	str	r2, [r3, #20]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <MCAL_USART_DisableCTSFlowControl>:

void MCAL_USART_DisableCTSFlowControl(USART_RegDef_t *pUSARTx)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR3,MCAL_USART_CR3_CTSE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	615a      	str	r2, [r3, #20]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <MCAL_USART_EnableRTSFlowControl>:


void MCAL_USART_EnableRTSFlowControl(USART_RegDef_t *pUSARTx)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR3,MCAL_USART_CR3_RTSE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	615a      	str	r2, [r3, #20]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <MCAL_USART_DisableRTSFlowControl>:

void MCAL_USART_DisableRTSFlowControl(USART_RegDef_t *pUSARTx)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR3,MCAL_USART_CR3_RTSE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	615a      	str	r2, [r3, #20]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <MCAL_USART_SetBaudRateValue>:

/*
 * baud rate
 */
void MCAL_USART_SetBaudRateValue(USART_RegDef_t *pUSARTx, u32 BaudRate)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
	u32 usartdiv;

	//variables to hold Mantissa and Fraction values
	u32 M_part,F_part;

	u32 tempreg=0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a33      	ldr	r2, [pc, #204]	; (80037c4 <MCAL_USART_SetBaudRateValue+0xe0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <MCAL_USART_SetBaudRateValue+0x1e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a32      	ldr	r2, [pc, #200]	; (80037c8 <MCAL_USART_SetBaudRateValue+0xe4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d105      	bne.n	800370e <MCAL_USART_SetBaudRateValue+0x2a>
	{
		//USART1 and USART6 are hanging on APB2 bus
		RCC_enuGetAPB1Value(&PCLKx);
 8003702:	f107 030c 	add.w	r3, r7, #12
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f96d 	bl	80039e6 <RCC_enuGetAPB1Value>
 800370c:	e004      	b.n	8003718 <MCAL_USART_SetBaudRateValue+0x34>
	}
	else
	{
		RCC_enuGetAPB1Value(&PCLKx);
 800370e:	f107 030c 	add.w	r3, r7, #12
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f967 	bl	80039e6 <RCC_enuGetAPB1Value>
	}


	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << MCAL_USART_CR1_OVER8))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <MCAL_USART_SetBaudRateValue+0x58>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	009a      	lsls	r2, r3, #2
 800372e:	441a      	add	r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	e00a      	b.n	8003752 <MCAL_USART_SetBaudRateValue+0x6e>
	}
	else
	{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	009a      	lsls	r2, r3, #2
 8003746:	441a      	add	r2, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	61fb      	str	r3, [r7, #28]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <MCAL_USART_SetBaudRateValue+0xe8>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	613b      	str	r3, [r7, #16]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2264      	movs	r2, #100	; 0x64
 800376c:	fb02 f303 	mul.w	r3, r2, r3
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	61bb      	str	r3, [r7, #24]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << MCAL_USART_CR1_OVER8))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <MCAL_USART_SetBaudRateValue+0xb4>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100)& ((u8)0x07);
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	3332      	adds	r3, #50	; 0x32
 8003788:	4a10      	ldr	r2, [pc, #64]	; (80037cc <MCAL_USART_SetBaudRateValue+0xe8>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	e009      	b.n	80037ac <MCAL_USART_SetBaudRateValue+0xc8>

	}else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((u8)0x0F);
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	3332      	adds	r3, #50	; 0x32
 800379e:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <MCAL_USART_SetBaudRateValue+0xe8>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	61bb      	str	r3, [r7, #24]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	609a      	str	r2, [r3, #8]

}
 80037ba:	bf00      	nop
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40001000 	.word	0x40001000
 80037c8:	40001400 	.word	0x40001400
 80037cc:	51eb851f 	.word	0x51eb851f

080037d0 <MCAL_USART_GetFlagStatus>:

u8 MCAL_USART_GetFlagStatus(USART_RegDef_t *pUSARTx, u8 StatusFlagName)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MCAL_USART_GetFlagStatus+0x1c>
    {
    	return SET;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <MCAL_USART_GetFlagStatus+0x1e>
    }

   return RESET;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <MCAL_USART_WriteData>:
	pUSARTx->SR &=~ StatusFlagName;
}


void MCAL_USART_WriteData(USART_RegDef_t *pUSARTx, u16 Data)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	807b      	strh	r3, [r7, #2]
	pUSARTx->DR = Data;
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	605a      	str	r2, [r3, #4]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <MCAL_USART_ReadData>:

u16 MCAL_USART_ReadData(USART_RegDef_t *pUSARTx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	return pUSARTx->DR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	b29b      	uxth	r3, r3
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <GPIO_enuInit>:

/*
 * Init and De-init
 */
ES_t GPIO_enuInit(GPIO_Handle_t *Copy_pstrGPIOHandle)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrSt = ES_NOT_OK;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]

	GPIO_RegDef_t *Local_pstrGPIOx = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]


	/*
	 * 1. select the base address
	 */
	MCAL_GPIO_SelectPort(Copy_pstrGPIOHandle->GPIO_Port,&Local_pstrGPIOx);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	f107 0208 	add.w	r2, r7, #8
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff f845 	bl	80028dc <MCAL_GPIO_SelectPort>

	/*
	 * 2. Configure the mode
	 */
	if(Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinMode <= GPIO_Mode_inputAnal)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	795b      	ldrb	r3, [r3, #5]
 8003856:	2b03      	cmp	r3, #3
 8003858:	d818      	bhi.n	800388c <GPIO_enuInit+0x5a>
	{

		/*Non-Interrupt mode*/

		// alternative function mode
		if (Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinMode == GPIO_Mode_altFun)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	795b      	ldrb	r3, [r3, #5]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d109      	bne.n	8003876 <GPIO_enuInit+0x44>
		{
			Local_enuErrSt = MCAL_GPIO_SetAltFuncMode(Local_pstrGPIOx,
 8003862:	68b8      	ldr	r0, [r7, #8]
				Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7919      	ldrb	r1, [r3, #4]
			Local_enuErrSt = MCAL_GPIO_SetAltFuncMode(Local_pstrGPIOx,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	7a5b      	ldrb	r3, [r3, #9]
 800386c:	461a      	mov	r2, r3
 800386e:	f7ff f938 	bl	8002ae2 <MCAL_GPIO_SetAltFuncMode>
 8003872:	4603      	mov	r3, r0
 8003874:	73fb      	strb	r3, [r7, #15]
				Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinAltFunMode);
		}


		// normal modes
		Local_enuErrSt = MCAL_GPIO_SetPinMode(Local_pstrGPIOx,
 8003876:	68b8      	ldr	r0, [r7, #8]
				Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	7919      	ldrb	r1, [r3, #4]
				Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinMode);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	795b      	ldrb	r3, [r3, #5]
		Local_enuErrSt = MCAL_GPIO_SetPinMode(Local_pstrGPIOx,
 8003880:	461a      	mov	r2, r3
 8003882:	f7ff f891 	bl	80029a8 <MCAL_GPIO_SetPinMode>
 8003886:	4603      	mov	r3, r0
 8003888:	73fb      	strb	r3, [r7, #15]
 800388a:	e024      	b.n	80038d6 <GPIO_enuInit+0xa4>
	else
	{
		/*Interrupt mode*/

		//Configure the edge trigger
		Local_enuErrSt = MCAL_EXTI_SetEdgeTrig(Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	791a      	ldrb	r2, [r3, #4]
				Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinMode);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	795b      	ldrb	r3, [r3, #5]
		Local_enuErrSt = MCAL_EXTI_SetEdgeTrig(Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 8003894:	4619      	mov	r1, r3
 8003896:	4610      	mov	r0, r2
 8003898:	f7ff f960 	bl	8002b5c <MCAL_EXTI_SetEdgeTrig>
 800389c:	4603      	mov	r3, r0
 800389e:	73fb      	strb	r3, [r7, #15]

		// Configure the GPIO port selection in SYSCFG_EXTICR
		Local_enuErrSt = MCAL_SYSCFG_SellectEXTIChannel(Copy_pstrGPIOHandle->GPIO_Port,Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	781a      	ldrb	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	791b      	ldrb	r3, [r3, #4]
 80038a8:	4619      	mov	r1, r3
 80038aa:	4610      	mov	r0, r2
 80038ac:	f7ff f9b8 	bl	8002c20 <MCAL_SYSCFG_SellectEXTIChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	73fb      	strb	r3, [r7, #15]

		// Set Callback function
		Local_enuErrSt = MCAL_EXTI_SetCallBack(Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	791a      	ldrb	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f7ff f9f0 	bl	8002ca4 <MCAL_EXTI_SetCallBack>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]
				Copy_pstrGPIOHandle->GPIO_Config.EXTI_pfCallBackFunc);

		// Enable the EXTI line
		Local_enuErrSt = MCAL_EXTI_EnableLine(Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	791b      	ldrb	r3, [r3, #4]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff f9cd 	bl	8002c6c <MCAL_EXTI_EnableLine>
 80038d2:	4603      	mov	r3, r0
 80038d4:	73fb      	strb	r3, [r7, #15]
	}

	/*
	 * 3. Speed selection
	 */
	Local_enuErrSt = MCAL_GPIO_SelectSpeed(Local_pstrGPIOx,
 80038d6:	68b8      	ldr	r0, [r7, #8]
			Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7919      	ldrb	r1, [r3, #4]
			Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinSpeed);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	799b      	ldrb	r3, [r3, #6]
	Local_enuErrSt = MCAL_GPIO_SelectSpeed(Local_pstrGPIOx,
 80038e0:	461a      	mov	r2, r3
 80038e2:	f7ff f88c 	bl	80029fe <MCAL_GPIO_SelectSpeed>
 80038e6:	4603      	mov	r3, r0
 80038e8:	73fb      	strb	r3, [r7, #15]


	/*
	 *4. pull up/ pull down
	 */
	Local_enuErrSt = MCAL_GPIO_SetPullUpPullDown(Local_pstrGPIOx,
 80038ea:	68b8      	ldr	r0, [r7, #8]
			Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	7919      	ldrb	r1, [r3, #4]
			Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinPuPdControl);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	79db      	ldrb	r3, [r3, #7]
	Local_enuErrSt = MCAL_GPIO_SetPullUpPullDown(Local_pstrGPIOx,
 80038f4:	461a      	mov	r2, r3
 80038f6:	f7ff f8a8 	bl	8002a4a <MCAL_GPIO_SetPullUpPullDown>
 80038fa:	4603      	mov	r3, r0
 80038fc:	73fb      	strb	r3, [r7, #15]


	/*
	 *5. output type
	 */
	Local_enuErrSt = MCAL_GPIO_SelectPinOutputType(Local_pstrGPIOx,
 80038fe:	68b8      	ldr	r0, [r7, #8]
			Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	7919      	ldrb	r1, [r3, #4]
			Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinOPType);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	7a1b      	ldrb	r3, [r3, #8]
	Local_enuErrSt = MCAL_GPIO_SelectPinOutputType(Local_pstrGPIOx,
 8003908:	461a      	mov	r2, r3
 800390a:	f7ff f8c6 	bl	8002a9a <MCAL_GPIO_SelectPinOutputType>
 800390e:	4603      	mov	r3, r0
 8003910:	73fb      	strb	r3, [r7, #15]


	return Local_enuErrSt;
 8003912:	7bfb      	ldrb	r3, [r7, #15]

}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <RCC_enuInitSystemClk>:

#include "stm32f407x_rcc.h"
#include "stm32f4xxx_rcc.h"

ES_t RCC_enuInitSystemClk(RCC_Handler_t *Copy_pstrRCCConfig)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrSt = ES_NOT_OK;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]

	/**************  set pre-scalers first   **************************/
	MCAL_RCC_SetAHBPrescaller(Copy_pstrRCCConfig->RCC_AHBPrescaler);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	785b      	ldrb	r3, [r3, #1]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fb43 	bl	8002fb8 <MCAL_RCC_SetAHBPrescaller>
	MCAL_RCC_SetAPB1Prescaller(Copy_pstrRCCConfig->RCC_APB1Prescaler);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	789b      	ldrb	r3, [r3, #2]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fb5a 	bl	8002ff0 <MCAL_RCC_SetAPB1Prescaller>
	MCAL_RCC_SetAPB2Prescaller(Copy_pstrRCCConfig->RCC_APB2Prescaler);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	78db      	ldrb	r3, [r3, #3]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fb71 	bl	8003028 <MCAL_RCC_SetAPB2Prescaller>

	/*************  select the system clock source  *******************/
	Local_enuErrSt = MCAL_RCC_SelectSystemClockSource(Copy_pstrRCCConfig->RCC_SysClkSource);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fb88 	bl	8003060 <MCAL_RCC_SelectSystemClockSource>
 8003950:	4603      	mov	r3, r0
 8003952:	73fb      	strb	r3, [r7, #15]

	return Local_enuErrSt;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <RCC_enuAHB1PeriphClkCtrl>:

ES_t RCC_enuAHB1PeriphClkCtrl(RCC_AHB1Periph_t Copy_enuPerphNum, u8 Copy_u8EnOrDi)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	460a      	mov	r2, r1
 8003968:	71fb      	strb	r3, [r7, #7]
 800396a:	4613      	mov	r3, r2
 800396c:	71bb      	strb	r3, [r7, #6]
	ES_t Local_enuErrSt = ES_NOT_OK;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]

	if(Copy_u8EnOrDi == ENABLE)
 8003972:	79bb      	ldrb	r3, [r7, #6]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d106      	bne.n	8003986 <RCC_enuAHB1PeriphClkCtrl+0x28>
	{
		Local_enuErrSt = MCAL_RCC_AHB1PeriphClockEnable(Copy_enuPerphNum);
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fba0 	bl	80030c0 <MCAL_RCC_AHB1PeriphClockEnable>
 8003980:	4603      	mov	r3, r0
 8003982:	73fb      	strb	r3, [r7, #15]
 8003984:	e008      	b.n	8003998 <RCC_enuAHB1PeriphClkCtrl+0x3a>

	}
	else if(Copy_u8EnOrDi == DISABLE)
 8003986:	79bb      	ldrb	r3, [r7, #6]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d105      	bne.n	8003998 <RCC_enuAHB1PeriphClkCtrl+0x3a>
	{
		Local_enuErrSt = MCAL_RCC_AHB1PeriphClockDisable(Copy_enuPerphNum);
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fbce 	bl	8003130 <MCAL_RCC_AHB1PeriphClockDisable>
 8003994:	4603      	mov	r3, r0
 8003996:	73fb      	strb	r3, [r7, #15]
	}

	return Local_enuErrSt;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <RCC_enuAPB1PeriphClkCtrl>:
}



ES_t RCC_enuAPB1PeriphClkCtrl(RCC_APB1Periph_t Copy_enuPerphNum, u8 Copy_u8EnOrDi)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	4603      	mov	r3, r0
 80039aa:	460a      	mov	r2, r1
 80039ac:	71fb      	strb	r3, [r7, #7]
 80039ae:	4613      	mov	r3, r2
 80039b0:	71bb      	strb	r3, [r7, #6]
	ES_t Local_enuErrSt = ES_NOT_OK;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]

	if(Copy_u8EnOrDi == ENABLE)
 80039b6:	79bb      	ldrb	r3, [r7, #6]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <RCC_enuAPB1PeriphClkCtrl+0x28>
	{
		Local_enuErrSt = MCAL_RCC_APB1PeriphClockEnable(Copy_enuPerphNum);
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fb9a 	bl	80030f8 <MCAL_RCC_APB1PeriphClockEnable>
 80039c4:	4603      	mov	r3, r0
 80039c6:	73fb      	strb	r3, [r7, #15]
 80039c8:	e008      	b.n	80039dc <RCC_enuAPB1PeriphClkCtrl+0x3a>
	}
	else if(Copy_u8EnOrDi == DISABLE)
 80039ca:	79bb      	ldrb	r3, [r7, #6]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <RCC_enuAPB1PeriphClkCtrl+0x3a>
	{
		Local_enuErrSt = MCAL_RCC_APB1PeriphClockDisable(Copy_enuPerphNum);
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fbca 	bl	800316c <MCAL_RCC_APB1PeriphClockDisable>
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]
	}
	return Local_enuErrSt;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <RCC_enuGetAPB1Value>:

/**********************************************************************************************/


ES_t RCC_enuGetAPB1Value(u32 *Copy_pu8APB2Value)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrSt = ES_NOT_OK;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]

	Local_enuErrSt = MCAL_RCC_GetAPB1Value(Copy_pu8APB2Value);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fbd8 	bl	80031a8 <MCAL_RCC_GetAPB1Value>
 80039f8:	4603      	mov	r3, r0
 80039fa:	73fb      	strb	r3, [r7, #15]

	return Local_enuErrSt;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <RCC_enuGetSysClkValue>:

	return Local_enuErrSt;
}

ES_t RCC_enuGetSysClkValue(u32 *Copy_pu32SysClkValue)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrSt = ES_NOT_OK;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]

	Local_enuErrSt = MCAL_RCC_GetSysClkValue(Copy_pu32SysClkValue);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fc2a 	bl	800326c <MCAL_RCC_GetSysClkValue>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	73fb      	strb	r3, [r7, #15]

	return Local_enuErrSt;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <RCC_enuGetSysClkType>:


ES_t RCC_enuGetSysClkType(RCC_SysClk_t *Copy_penuSysClk)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrSt = ES_NOT_OK;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]

	Local_enuErrSt = MCAL_RCC_GetSysClkType(Copy_penuSysClk);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff fc46 	bl	80032c4 <MCAL_RCC_GetSysClkType>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	73fb      	strb	r3, [r7, #15]

	return Local_enuErrSt;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <USART_enuInit>:
#include "stm32f407x_usart.h"
#include "stm32f4xxx_usart.h"


ES_t USART_enuInit(USART_Handle_t* Copy_pstrUSARTHandler)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrSt = ES_NOT_OK;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]

	if(Copy_pstrUSARTHandler != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 809e 	beq.w	8003b98 <USART_enuInit+0x150>
	{
		// Get USARTx Base address
		USART_RegDef_t *Local_USARTBaseAddr = MCAL_USART_BASEADDR_TO_CODE(Copy_pstrUSARTHandler->USARTx);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01f      	beq.n	8003aa4 <USART_enuInit+0x5c>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d019      	beq.n	8003aa0 <USART_enuInit+0x58>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d013      	beq.n	8003a9c <USART_enuInit+0x54>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d00d      	beq.n	8003a98 <USART_enuInit+0x50>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d007      	beq.n	8003a94 <USART_enuInit+0x4c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d101      	bne.n	8003a90 <USART_enuInit+0x48>
 8003a8c:	4b46      	ldr	r3, [pc, #280]	; (8003ba8 <USART_enuInit+0x160>)
 8003a8e:	e00a      	b.n	8003aa6 <USART_enuInit+0x5e>
 8003a90:	2300      	movs	r3, #0
 8003a92:	e008      	b.n	8003aa6 <USART_enuInit+0x5e>
 8003a94:	4b45      	ldr	r3, [pc, #276]	; (8003bac <USART_enuInit+0x164>)
 8003a96:	e006      	b.n	8003aa6 <USART_enuInit+0x5e>
 8003a98:	4b45      	ldr	r3, [pc, #276]	; (8003bb0 <USART_enuInit+0x168>)
 8003a9a:	e004      	b.n	8003aa6 <USART_enuInit+0x5e>
 8003a9c:	4b45      	ldr	r3, [pc, #276]	; (8003bb4 <USART_enuInit+0x16c>)
 8003a9e:	e002      	b.n	8003aa6 <USART_enuInit+0x5e>
 8003aa0:	4b45      	ldr	r3, [pc, #276]	; (8003bb8 <USART_enuInit+0x170>)
 8003aa2:	e000      	b.n	8003aa6 <USART_enuInit+0x5e>
 8003aa4:	4b45      	ldr	r3, [pc, #276]	; (8003bbc <USART_enuInit+0x174>)
 8003aa6:	60bb      	str	r3, [r7, #8]

		// 1. configure the mode
		if(Copy_pstrUSARTHandler->USART_Config.USART_Mode == USART_Mode_RxOnly)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	791b      	ldrb	r3, [r3, #4]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d103      	bne.n	8003ab8 <USART_enuInit+0x70>
		{
			MCAL_USART_EnableRxOnly(Local_USARTBaseAddr);
 8003ab0:	68b8      	ldr	r0, [r7, #8]
 8003ab2:	f7ff fcdb 	bl	800346c <MCAL_USART_EnableRxOnly>
 8003ab6:	e00e      	b.n	8003ad6 <USART_enuInit+0x8e>
		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_Mode == USART_Mode_TxOnly)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	791b      	ldrb	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d103      	bne.n	8003ac8 <USART_enuInit+0x80>
		{
			MCAL_USART_EnableTxOnly(Local_USARTBaseAddr);
 8003ac0:	68b8      	ldr	r0, [r7, #8]
 8003ac2:	f7ff fce9 	bl	8003498 <MCAL_USART_EnableTxOnly>
 8003ac6:	e006      	b.n	8003ad6 <USART_enuInit+0x8e>
		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_Mode == USART_Mode_RxTx)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	791b      	ldrb	r3, [r3, #4]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d102      	bne.n	8003ad6 <USART_enuInit+0x8e>
		{
			MCAL_USART_EnableRxTx(Local_USARTBaseAddr);
 8003ad0:	68b8      	ldr	r0, [r7, #8]
 8003ad2:	f7ff fcf7 	bl	80034c4 <MCAL_USART_EnableRxTx>

		}

		//2. configure the word length

		if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_8Bits)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	795b      	ldrb	r3, [r3, #5]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <USART_enuInit+0x9e>
		{
			MCAL_USART_SetWordLen8Bit(Local_USARTBaseAddr);
 8003ade:	68b8      	ldr	r0, [r7, #8]
 8003ae0:	f7ff fd06 	bl	80034f0 <MCAL_USART_SetWordLen8Bit>
 8003ae4:	e006      	b.n	8003af4 <USART_enuInit+0xac>
		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_9Bits)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	795b      	ldrb	r3, [r3, #5]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d102      	bne.n	8003af4 <USART_enuInit+0xac>
		{
			MCAL_USART_SetWordLen9Bit(Local_USARTBaseAddr);
 8003aee:	68b8      	ldr	r0, [r7, #8]
 8003af0:	f7ff fd0e 	bl	8003510 <MCAL_USART_SetWordLen9Bit>
		{

		}

		// 3. configure the parity
		if(Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Disable)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	799b      	ldrb	r3, [r3, #6]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d103      	bne.n	8003b04 <USART_enuInit+0xbc>
		{
			MCAL_USART_DisableParity(Local_USARTBaseAddr);
 8003afc:	68b8      	ldr	r0, [r7, #8]
 8003afe:	f7ff fd43 	bl	8003588 <MCAL_USART_DisableParity>
 8003b02:	e00e      	b.n	8003b22 <USART_enuInit+0xda>
		}
		else if (Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Even)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	799b      	ldrb	r3, [r3, #6]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d103      	bne.n	8003b14 <USART_enuInit+0xcc>
		{
			MCAL_USART_EnableEvenParity(Local_USARTBaseAddr);
 8003b0c:	68b8      	ldr	r0, [r7, #8]
 8003b0e:	f7ff fd25 	bl	800355c <MCAL_USART_EnableEvenParity>
 8003b12:	e006      	b.n	8003b22 <USART_enuInit+0xda>
		}
		else if (Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Odd)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	799b      	ldrb	r3, [r3, #6]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d102      	bne.n	8003b22 <USART_enuInit+0xda>
		{
			MCAL_USART_EnableOddParity(Local_USARTBaseAddr);
 8003b1c:	68b8      	ldr	r0, [r7, #8]
 8003b1e:	f7ff fd07 	bl	8003530 <MCAL_USART_EnableOddParity>

		}

		// 4. configure stop pin

		MCAL_USART_SetStopConfig(Local_USARTBaseAddr, Copy_pstrUSARTHandler->USART_Config.USART_StopBits);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	79db      	ldrb	r3, [r3, #7]
 8003b26:	4619      	mov	r1, r3
 8003b28:	68b8      	ldr	r0, [r7, #8]
 8003b2a:	f7ff fd43 	bl	80035b4 <MCAL_USART_SetStopConfig>

		// 5. configure the HW flow control

		if(Copy_pstrUSARTHandler->USART_Config.USART_HwFlowCtrl == USART_HwFlowCtrl_None)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	7a1b      	ldrb	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <USART_enuInit+0xfc>
		{
			MCAL_USART_DisableCTSFlowControl(Local_USARTBaseAddr);
 8003b36:	68b8      	ldr	r0, [r7, #8]
 8003b38:	f7ff fda4 	bl	8003684 <MCAL_USART_DisableCTSFlowControl>
			MCAL_USART_DisableRTSFlowControl(Local_USARTBaseAddr);
 8003b3c:	68b8      	ldr	r0, [r7, #8]
 8003b3e:	f7ff fdc1 	bl	80036c4 <MCAL_USART_DisableRTSFlowControl>
 8003b42:	e01f      	b.n	8003b84 <USART_enuInit+0x13c>
		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_HwFlowCtrl == USART_HwFlowCtrl_CTS)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	7a1b      	ldrb	r3, [r3, #8]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d106      	bne.n	8003b5a <USART_enuInit+0x112>
		{
			MCAL_USART_EnableCTSFlowControl(Local_USARTBaseAddr);
 8003b4c:	68b8      	ldr	r0, [r7, #8]
 8003b4e:	f7ff fd89 	bl	8003664 <MCAL_USART_EnableCTSFlowControl>
			MCAL_USART_DisableRTSFlowControl(Local_USARTBaseAddr);
 8003b52:	68b8      	ldr	r0, [r7, #8]
 8003b54:	f7ff fdb6 	bl	80036c4 <MCAL_USART_DisableRTSFlowControl>
 8003b58:	e014      	b.n	8003b84 <USART_enuInit+0x13c>
		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_HwFlowCtrl == USART_HwFlowCtrl_RTS)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	7a1b      	ldrb	r3, [r3, #8]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d106      	bne.n	8003b70 <USART_enuInit+0x128>
		{
			MCAL_USART_DisableCTSFlowControl(Local_USARTBaseAddr);
 8003b62:	68b8      	ldr	r0, [r7, #8]
 8003b64:	f7ff fd8e 	bl	8003684 <MCAL_USART_DisableCTSFlowControl>
			MCAL_USART_EnableRTSFlowControl(Local_USARTBaseAddr);
 8003b68:	68b8      	ldr	r0, [r7, #8]
 8003b6a:	f7ff fd9b 	bl	80036a4 <MCAL_USART_EnableRTSFlowControl>
 8003b6e:	e009      	b.n	8003b84 <USART_enuInit+0x13c>
		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_HwFlowCtrl == USART_HwFlowCtrl_CTS_RTS)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	7a1b      	ldrb	r3, [r3, #8]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d105      	bne.n	8003b84 <USART_enuInit+0x13c>
		{
			MCAL_USART_EnableRTSFlowControl(Local_USARTBaseAddr);
 8003b78:	68b8      	ldr	r0, [r7, #8]
 8003b7a:	f7ff fd93 	bl	80036a4 <MCAL_USART_EnableRTSFlowControl>
			MCAL_USART_EnableCTSFlowControl(Local_USARTBaseAddr);
 8003b7e:	68b8      	ldr	r0, [r7, #8]
 8003b80:	f7ff fd70 	bl	8003664 <MCAL_USART_EnableCTSFlowControl>

		}

		//6. configure baud rate

		MCAL_USART_SetBaudRateValue(Local_USARTBaseAddr, Copy_pstrUSARTHandler->USART_Config.USART_BaudRate);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	68b8      	ldr	r0, [r7, #8]
 8003b8c:	f7ff fdaa 	bl	80036e4 <MCAL_USART_SetBaudRateValue>


		// 7. Enable USARTx

		MCAL_USART_Enable(Local_USARTBaseAddr);
 8003b90:	68b8      	ldr	r0, [r7, #8]
 8003b92:	f7ff fc5b 	bl	800344c <MCAL_USART_Enable>
 8003b96:	e001      	b.n	8003b9c <USART_enuInit+0x154>

	}
	else
	{
		Local_enuErrSt = ES_NULL_PTR;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	73fb      	strb	r3, [r7, #15]
	}


	return Local_enuErrSt;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40001400 	.word	0x40001400
 8003bac:	40005000 	.word	0x40005000
 8003bb0:	40004c00 	.word	0x40004c00
 8003bb4:	40004800 	.word	0x40004800
 8003bb8:	40004400 	.word	0x40004400
 8003bbc:	40001000 	.word	0x40001000

08003bc0 <USART_enuSendDataSyn>:


ES_t USART_enuSendDataSyn(USART_Handle_t* Copy_pstrUSARTHandler, u8 *Copy_pu8Data,u8 Copy_u8Len)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	71fb      	strb	r3, [r7, #7]
	ES_t Local_enuErrSt = ES_NOT_OK;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	77bb      	strb	r3, [r7, #30]

	if(Copy_pstrUSARTHandler == NULL || Copy_pu8Data == NULL)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <USART_enuSendDataSyn+0x1e>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <USART_enuSendDataSyn+0x22>
	{
		return ES_NULL_PTR;
 8003bde:	2302      	movs	r3, #2
 8003be0:	e06c      	b.n	8003cbc <USART_enuSendDataSyn+0xfc>
	}

	// Get USARTx Base address
	USART_RegDef_t *Local_USARTBaseAddr = MCAL_USART_BASEADDR_TO_CODE(Copy_pstrUSARTHandler->USARTx);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01f      	beq.n	8003c2a <USART_enuSendDataSyn+0x6a>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d019      	beq.n	8003c26 <USART_enuSendDataSyn+0x66>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d013      	beq.n	8003c22 <USART_enuSendDataSyn+0x62>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d00d      	beq.n	8003c1e <USART_enuSendDataSyn+0x5e>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d007      	beq.n	8003c1a <USART_enuSendDataSyn+0x5a>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b05      	cmp	r3, #5
 8003c10:	d101      	bne.n	8003c16 <USART_enuSendDataSyn+0x56>
 8003c12:	4b2c      	ldr	r3, [pc, #176]	; (8003cc4 <USART_enuSendDataSyn+0x104>)
 8003c14:	e00a      	b.n	8003c2c <USART_enuSendDataSyn+0x6c>
 8003c16:	2300      	movs	r3, #0
 8003c18:	e008      	b.n	8003c2c <USART_enuSendDataSyn+0x6c>
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <USART_enuSendDataSyn+0x108>)
 8003c1c:	e006      	b.n	8003c2c <USART_enuSendDataSyn+0x6c>
 8003c1e:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <USART_enuSendDataSyn+0x10c>)
 8003c20:	e004      	b.n	8003c2c <USART_enuSendDataSyn+0x6c>
 8003c22:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <USART_enuSendDataSyn+0x110>)
 8003c24:	e002      	b.n	8003c2c <USART_enuSendDataSyn+0x6c>
 8003c26:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <USART_enuSendDataSyn+0x114>)
 8003c28:	e000      	b.n	8003c2c <USART_enuSendDataSyn+0x6c>
 8003c2a:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <USART_enuSendDataSyn+0x118>)
 8003c2c:	61bb      	str	r3, [r7, #24]


	u16 *LocalData;

	for(u8 i=0 ; i<Copy_u8Len ; i++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e036      	b.n	8003ca2 <USART_enuSendDataSyn+0xe2>
	{

		while(! MCAL_USART_GetFlagStatus(Local_USARTBaseAddr,MCAL_USART_FLAG_TXE));
 8003c34:	bf00      	nop
 8003c36:	2180      	movs	r1, #128	; 0x80
 8003c38:	69b8      	ldr	r0, [r7, #24]
 8003c3a:	f7ff fdc9 	bl	80037d0 <MCAL_USART_GetFlagStatus>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f8      	beq.n	8003c36 <USART_enuSendDataSyn+0x76>

		if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_9Bits)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	795b      	ldrb	r3, [r3, #5]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d119      	bne.n	8003c80 <USART_enuSendDataSyn+0xc0>
		{
			LocalData = (u16*) Copy_pu8Data;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	617b      	str	r3, [r7, #20]

			MCAL_USART_WriteData(Local_USARTBaseAddr, (*LocalData & (u16)0x01FF));
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	69b8      	ldr	r0, [r7, #24]
 8003c5e:	f7ff fdcc 	bl	80037fa <MCAL_USART_WriteData>

			if(Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Disable)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	799b      	ldrb	r3, [r3, #6]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <USART_enuSendDataSyn+0xb8>
			{
				Copy_pu8Data++;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	60bb      	str	r3, [r7, #8]
				Copy_pu8Data++;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	3301      	adds	r3, #1
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	e011      	b.n	8003c9c <USART_enuSendDataSyn+0xdc>
			}
			else
			{
				Copy_pu8Data++;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	e00d      	b.n	8003c9c <USART_enuSendDataSyn+0xdc>
			}

		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_8Bits)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	795b      	ldrb	r3, [r3, #5]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <USART_enuSendDataSyn+0xdc>
		{
			MCAL_USART_WriteData(Local_USARTBaseAddr ,*Copy_pu8Data & (u8)0x0FF);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	4619      	mov	r1, r3
 8003c90:	69b8      	ldr	r0, [r7, #24]
 8003c92:	f7ff fdb2 	bl	80037fa <MCAL_USART_WriteData>
			Copy_pu8Data++;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	60bb      	str	r3, [r7, #8]
	for(u8 i=0 ; i<Copy_u8Len ; i++)
 8003c9c:	7ffb      	ldrb	r3, [r7, #31]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	77fb      	strb	r3, [r7, #31]
 8003ca2:	7ffa      	ldrb	r2, [r7, #31]
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d3c4      	bcc.n	8003c34 <USART_enuSendDataSyn+0x74>
		}

	}


	while(! MCAL_USART_GetFlagStatus(Local_USARTBaseAddr,MCAL_USART_FLAG_TC));
 8003caa:	bf00      	nop
 8003cac:	2140      	movs	r1, #64	; 0x40
 8003cae:	69b8      	ldr	r0, [r7, #24]
 8003cb0:	f7ff fd8e 	bl	80037d0 <MCAL_USART_GetFlagStatus>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f8      	beq.n	8003cac <USART_enuSendDataSyn+0xec>

	return Local_enuErrSt;
 8003cba:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3720      	adds	r7, #32
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40001400 	.word	0x40001400
 8003cc8:	40005000 	.word	0x40005000
 8003ccc:	40004c00 	.word	0x40004c00
 8003cd0:	40004800 	.word	0x40004800
 8003cd4:	40004400 	.word	0x40004400
 8003cd8:	40001000 	.word	0x40001000

08003cdc <USART_IRQHandling>:

	return Local_enuErrSt;
}

void USART_IRQHandling(USART_Handle_t *Copy_pstrUSARTHandler)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
	if(Copy_pstrUSARTHandler == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8126 	beq.w	8003f38 <USART_IRQHandling+0x25c>
	{
		return;
	}

	USART_RegDef_t *Local_USARTBaseAddr =  MCAL_USART_BASEADDR_TO_CODE(Copy_pstrUSARTHandler->USARTx);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01f      	beq.n	8003d34 <USART_IRQHandling+0x58>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d019      	beq.n	8003d30 <USART_IRQHandling+0x54>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d013      	beq.n	8003d2c <USART_IRQHandling+0x50>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d00d      	beq.n	8003d28 <USART_IRQHandling+0x4c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d007      	beq.n	8003d24 <USART_IRQHandling+0x48>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	d101      	bne.n	8003d20 <USART_IRQHandling+0x44>
 8003d1c:	4b88      	ldr	r3, [pc, #544]	; (8003f40 <USART_IRQHandling+0x264>)
 8003d1e:	e00a      	b.n	8003d36 <USART_IRQHandling+0x5a>
 8003d20:	2300      	movs	r3, #0
 8003d22:	e008      	b.n	8003d36 <USART_IRQHandling+0x5a>
 8003d24:	4b87      	ldr	r3, [pc, #540]	; (8003f44 <USART_IRQHandling+0x268>)
 8003d26:	e006      	b.n	8003d36 <USART_IRQHandling+0x5a>
 8003d28:	4b87      	ldr	r3, [pc, #540]	; (8003f48 <USART_IRQHandling+0x26c>)
 8003d2a:	e004      	b.n	8003d36 <USART_IRQHandling+0x5a>
 8003d2c:	4b87      	ldr	r3, [pc, #540]	; (8003f4c <USART_IRQHandling+0x270>)
 8003d2e:	e002      	b.n	8003d36 <USART_IRQHandling+0x5a>
 8003d30:	4b87      	ldr	r3, [pc, #540]	; (8003f50 <USART_IRQHandling+0x274>)
 8003d32:	e000      	b.n	8003d36 <USART_IRQHandling+0x5a>
 8003d34:	4b87      	ldr	r3, [pc, #540]	; (8003f54 <USART_IRQHandling+0x278>)
 8003d36:	617b      	str	r3, [r7, #20]

	u8 Temp1 , Temp2;
	u16 *pData;


	Temp1 = MCAL_USART_GetFlagStatus(Local_USARTBaseAddr, MCAL_USART_FLAG_TC);
 8003d38:	2140      	movs	r1, #64	; 0x40
 8003d3a:	6978      	ldr	r0, [r7, #20]
 8003d3c:	f7ff fd48 	bl	80037d0 <MCAL_USART_GetFlagStatus>
 8003d40:	4603      	mov	r3, r0
 8003d42:	74fb      	strb	r3, [r7, #19]
	Temp2 = MCAL_USART_ReadTXEI(Local_USARTBaseAddr);
 8003d44:	6978      	ldr	r0, [r7, #20]
 8003d46:	f7ff fc5b 	bl	8003600 <MCAL_USART_ReadTXEI>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	74bb      	strb	r3, [r7, #18]

	if(Temp1 && Temp2)
 8003d4e:	7cfb      	ldrb	r3, [r7, #19]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <USART_IRQHandling+0x7c>
 8003d54:	7cbb      	ldrb	r3, [r7, #18]
 8003d56:	2b00      	cmp	r3, #0
				Copy_pstrUSARTHandler->TxCallBackFunc();
			}
		}
	}

	Temp1 = MCAL_USART_GetFlagStatus(Local_USARTBaseAddr, MCAL_USART_FLAG_TXE);
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	6978      	ldr	r0, [r7, #20]
 8003d5c:	f7ff fd38 	bl	80037d0 <MCAL_USART_GetFlagStatus>
 8003d60:	4603      	mov	r3, r0
 8003d62:	74fb      	strb	r3, [r7, #19]
	Temp2 = MCAL_USART_ReadTXEI(Local_USARTBaseAddr);
 8003d64:	6978      	ldr	r0, [r7, #20]
 8003d66:	f7ff fc4b 	bl	8003600 <MCAL_USART_ReadTXEI>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	74bb      	strb	r3, [r7, #18]

	if(Temp1 && Temp2)
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d059      	beq.n	8003e28 <USART_IRQHandling+0x14c>
 8003d74:	7cbb      	ldrb	r3, [r7, #18]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d056      	beq.n	8003e28 <USART_IRQHandling+0x14c>
	{
		/******************* the interrupt because TXE ************************/
		if(Copy_pstrUSARTHandler->TxBusyState == USART_Busy_InTX)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	7e9b      	ldrb	r3, [r3, #26]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d152      	bne.n	8003e28 <USART_IRQHandling+0x14c>
		{
			if(Copy_pstrUSARTHandler->TxLen > 0)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	7e1b      	ldrb	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d047      	beq.n	8003e1a <USART_IRQHandling+0x13e>
			{

				if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_9Bits)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	795b      	ldrb	r3, [r3, #5]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d12c      	bne.n	8003dec <USART_IRQHandling+0x110>
				{
					pData = (u16*)Copy_pstrUSARTHandler->pTxBuffer;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	60fb      	str	r3, [r7, #12]
					MCAL_USART_WriteData(Local_USARTBaseAddr, (*pData & 0x1FF));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	4619      	mov	r1, r3
 8003da4:	6978      	ldr	r0, [r7, #20]
 8003da6:	f7ff fd28 	bl	80037fa <MCAL_USART_WriteData>


					if(Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Disable)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	799b      	ldrb	r3, [r3, #6]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d110      	bne.n	8003dd4 <USART_IRQHandling+0xf8>
					{
						Copy_pstrUSARTHandler->TxLen-=2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7e1b      	ldrb	r3, [r3, #24]
 8003db6:	3b02      	subs	r3, #2
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	761a      	strb	r2, [r3, #24]
						Copy_pstrUSARTHandler->pTxBuffer++;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	611a      	str	r2, [r3, #16]
						Copy_pstrUSARTHandler->pTxBuffer++;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	611a      	str	r2, [r3, #16]
 8003dd2:	e022      	b.n	8003e1a <USART_IRQHandling+0x13e>
					}
					else
					{
						Copy_pstrUSARTHandler->TxLen--;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	7e1b      	ldrb	r3, [r3, #24]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	761a      	strb	r2, [r3, #24]
						Copy_pstrUSARTHandler->pTxBuffer++;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]
 8003dea:	e016      	b.n	8003e1a <USART_IRQHandling+0x13e>
					}


				}
				else if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_8Bits)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	795b      	ldrb	r3, [r3, #5]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d112      	bne.n	8003e1a <USART_IRQHandling+0x13e>
				{
					MCAL_USART_WriteData(Local_USARTBaseAddr,(*Copy_pstrUSARTHandler->pTxBuffer & 0x0FF));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6978      	ldr	r0, [r7, #20]
 8003e00:	f7ff fcfb 	bl	80037fa <MCAL_USART_WriteData>

					Copy_pstrUSARTHandler->TxLen--;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	7e1b      	ldrb	r3, [r3, #24]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	761a      	strb	r2, [r3, #24]
					Copy_pstrUSARTHandler->pTxBuffer++;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	611a      	str	r2, [r3, #16]
				}

			}

			if(Copy_pstrUSARTHandler->TxLen == 0)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	7e1b      	ldrb	r3, [r3, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d102      	bne.n	8003e28 <USART_IRQHandling+0x14c>
			{
				MCAL_USART_DisableTXEI(Local_USARTBaseAddr);
 8003e22:	6978      	ldr	r0, [r7, #20]
 8003e24:	f7ff fbdc 	bl	80035e0 <MCAL_USART_DisableTXEI>
			}
		}
	}


	Temp1 = MCAL_USART_GetFlagStatus(Local_USARTBaseAddr, MCAL_USART_FLAG_RXNE);
 8003e28:	2120      	movs	r1, #32
 8003e2a:	6978      	ldr	r0, [r7, #20]
 8003e2c:	f7ff fcd0 	bl	80037d0 <MCAL_USART_GetFlagStatus>
 8003e30:	4603      	mov	r3, r0
 8003e32:	74fb      	strb	r3, [r7, #19]
	Temp2 = MCAL_USART_ReadRXNI(Local_USARTBaseAddr);
 8003e34:	6978      	ldr	r0, [r7, #20]
 8003e36:	f7ff fc04 	bl	8003642 <MCAL_USART_ReadRXNI>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	74bb      	strb	r3, [r7, #18]

	if(Temp1 && Temp2)
 8003e3e:	7cfb      	ldrb	r3, [r7, #19]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d07a      	beq.n	8003f3a <USART_IRQHandling+0x25e>
 8003e44:	7cbb      	ldrb	r3, [r7, #18]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d077      	beq.n	8003f3a <USART_IRQHandling+0x25e>
	{
		/******************* the interrupt because RXNE ************************/
		if(Copy_pstrUSARTHandler->RxBusyState == USART_Busy_InRX)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	7edb      	ldrb	r3, [r3, #27]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d173      	bne.n	8003f3a <USART_IRQHandling+0x25e>
		{
			if(Copy_pstrUSARTHandler->RxLen > 0)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	7e5b      	ldrb	r3, [r3, #25]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d060      	beq.n	8003f1c <USART_IRQHandling+0x240>
			{

				if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_9Bits)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	795b      	ldrb	r3, [r3, #5]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d134      	bne.n	8003ecc <USART_IRQHandling+0x1f0>
				{

					if(Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Disable)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	799b      	ldrb	r3, [r3, #6]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d11b      	bne.n	8003ea2 <USART_IRQHandling+0x1c6>
					{
						// Read 9 bits
						*(u16*)Copy_pstrUSARTHandler->pRxBuffer = (MCAL_USART_ReadData(Local_USARTBaseAddr) & (u16)0x01FF);
 8003e6a:	6978      	ldr	r0, [r7, #20]
 8003e6c:	f7ff fcd4 	bl	8003818 <MCAL_USART_ReadData>
 8003e70:	4603      	mov	r3, r0
 8003e72:	461a      	mov	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e7c:	b292      	uxth	r2, r2
 8003e7e:	801a      	strh	r2, [r3, #0]

						Copy_pstrUSARTHandler->RxLen-=2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	7e5b      	ldrb	r3, [r3, #25]
 8003e84:	3b02      	subs	r3, #2
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	765a      	strb	r2, [r3, #25]
						Copy_pstrUSARTHandler->pRxBuffer++;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	615a      	str	r2, [r3, #20]
						Copy_pstrUSARTHandler->pRxBuffer++;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	615a      	str	r2, [r3, #20]
 8003ea0:	e03c      	b.n	8003f1c <USART_IRQHandling+0x240>

					}
					else
					{
						// Read 8 bits
						*Copy_pstrUSARTHandler->pRxBuffer = (MCAL_USART_ReadData(Local_USARTBaseAddr) & (u8)0x0FF);
 8003ea2:	6978      	ldr	r0, [r7, #20]
 8003ea4:	f7ff fcb8 	bl	8003818 <MCAL_USART_ReadData>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	461a      	mov	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]

						Copy_pstrUSARTHandler->RxLen--;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7e5b      	ldrb	r3, [r3, #25]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	765a      	strb	r2, [r3, #25]
						Copy_pstrUSARTHandler->pRxBuffer++;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	615a      	str	r2, [r3, #20]
 8003eca:	e027      	b.n	8003f1c <USART_IRQHandling+0x240>
					}


				}
				else if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_8Bits)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	795b      	ldrb	r3, [r3, #5]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d123      	bne.n	8003f1c <USART_IRQHandling+0x240>
				{

					if(Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Disable)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	799b      	ldrb	r3, [r3, #6]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <USART_IRQHandling+0x214>
					{
						// Read 8 bits
						*Copy_pstrUSARTHandler->pRxBuffer = (u8)(MCAL_USART_ReadData(Local_USARTBaseAddr) & (u8)0x0FF);
 8003edc:	6978      	ldr	r0, [r7, #20]
 8003ede:	f7ff fc9b 	bl	8003818 <MCAL_USART_ReadData>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e00a      	b.n	8003f06 <USART_IRQHandling+0x22a>

					}
					else
					{
						// Read 7 bits
						*Copy_pstrUSARTHandler->pRxBuffer = (u8)(MCAL_USART_ReadData(Local_USARTBaseAddr) & (u8)0x07F);
 8003ef0:	6978      	ldr	r0, [r7, #20]
 8003ef2:	f7ff fc91 	bl	8003818 <MCAL_USART_ReadData>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]
					}


					Copy_pstrUSARTHandler->RxLen--;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7e5b      	ldrb	r3, [r3, #25]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	765a      	strb	r2, [r3, #25]
					Copy_pstrUSARTHandler->pRxBuffer++;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	615a      	str	r2, [r3, #20]
				}

			}

			if(!Copy_pstrUSARTHandler->RxLen)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	7e5b      	ldrb	r3, [r3, #25]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10a      	bne.n	8003f3a <USART_IRQHandling+0x25e>
			{
				MCAL_USART_DisableRXNI(Local_USARTBaseAddr);
 8003f24:	6978      	ldr	r0, [r7, #20]
 8003f26:	f7ff fb7c 	bl	8003622 <MCAL_USART_DisableRXNI>
				Copy_pstrUSARTHandler->RxBusyState = USART_Ready;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	76da      	strb	r2, [r3, #27]
				//CALLBACK function
				Copy_pstrUSARTHandler->RxCallBackFunc();
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	4798      	blx	r3
 8003f36:	e000      	b.n	8003f3a <USART_IRQHandling+0x25e>
		return;
 8003f38:	bf00      	nop
			}
		}
	}
}
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40001400 	.word	0x40001400
 8003f44:	40005000 	.word	0x40005000
 8003f48:	40004c00 	.word	0x40004c00
 8003f4c:	40004800 	.word	0x40004800
 8003f50:	40004400 	.word	0x40004400
 8003f54:	40001000 	.word	0x40001000

08003f58 <std>:
 8003f58:	2300      	movs	r3, #0
 8003f5a:	b510      	push	{r4, lr}
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f66:	6083      	str	r3, [r0, #8]
 8003f68:	8181      	strh	r1, [r0, #12]
 8003f6a:	6643      	str	r3, [r0, #100]	; 0x64
 8003f6c:	81c2      	strh	r2, [r0, #14]
 8003f6e:	6183      	str	r3, [r0, #24]
 8003f70:	4619      	mov	r1, r3
 8003f72:	2208      	movs	r2, #8
 8003f74:	305c      	adds	r0, #92	; 0x5c
 8003f76:	f000 f9f7 	bl	8004368 <memset>
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <std+0x58>)
 8003f7c:	6263      	str	r3, [r4, #36]	; 0x24
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <std+0x5c>)
 8003f80:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <std+0x60>)
 8003f84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f86:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <std+0x64>)
 8003f88:	6323      	str	r3, [r4, #48]	; 0x30
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <std+0x68>)
 8003f8c:	6224      	str	r4, [r4, #32]
 8003f8e:	429c      	cmp	r4, r3
 8003f90:	d006      	beq.n	8003fa0 <std+0x48>
 8003f92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003f96:	4294      	cmp	r4, r2
 8003f98:	d002      	beq.n	8003fa0 <std+0x48>
 8003f9a:	33d0      	adds	r3, #208	; 0xd0
 8003f9c:	429c      	cmp	r4, r3
 8003f9e:	d105      	bne.n	8003fac <std+0x54>
 8003fa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa8:	f000 ba56 	b.w	8004458 <__retarget_lock_init_recursive>
 8003fac:	bd10      	pop	{r4, pc}
 8003fae:	bf00      	nop
 8003fb0:	080041b9 	.word	0x080041b9
 8003fb4:	080041db 	.word	0x080041db
 8003fb8:	08004213 	.word	0x08004213
 8003fbc:	08004237 	.word	0x08004237
 8003fc0:	20012ebc 	.word	0x20012ebc

08003fc4 <stdio_exit_handler>:
 8003fc4:	4a02      	ldr	r2, [pc, #8]	; (8003fd0 <stdio_exit_handler+0xc>)
 8003fc6:	4903      	ldr	r1, [pc, #12]	; (8003fd4 <stdio_exit_handler+0x10>)
 8003fc8:	4803      	ldr	r0, [pc, #12]	; (8003fd8 <stdio_exit_handler+0x14>)
 8003fca:	f000 b869 	b.w	80040a0 <_fwalk_sglue>
 8003fce:	bf00      	nop
 8003fd0:	20000030 	.word	0x20000030
 8003fd4:	08004d21 	.word	0x08004d21
 8003fd8:	2000003c 	.word	0x2000003c

08003fdc <cleanup_stdio>:
 8003fdc:	6841      	ldr	r1, [r0, #4]
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <cleanup_stdio+0x34>)
 8003fe0:	4299      	cmp	r1, r3
 8003fe2:	b510      	push	{r4, lr}
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	d001      	beq.n	8003fec <cleanup_stdio+0x10>
 8003fe8:	f000 fe9a 	bl	8004d20 <_fflush_r>
 8003fec:	68a1      	ldr	r1, [r4, #8]
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <cleanup_stdio+0x38>)
 8003ff0:	4299      	cmp	r1, r3
 8003ff2:	d002      	beq.n	8003ffa <cleanup_stdio+0x1e>
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f000 fe93 	bl	8004d20 <_fflush_r>
 8003ffa:	68e1      	ldr	r1, [r4, #12]
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <cleanup_stdio+0x3c>)
 8003ffe:	4299      	cmp	r1, r3
 8004000:	d004      	beq.n	800400c <cleanup_stdio+0x30>
 8004002:	4620      	mov	r0, r4
 8004004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004008:	f000 be8a 	b.w	8004d20 <_fflush_r>
 800400c:	bd10      	pop	{r4, pc}
 800400e:	bf00      	nop
 8004010:	20012ebc 	.word	0x20012ebc
 8004014:	20012f24 	.word	0x20012f24
 8004018:	20012f8c 	.word	0x20012f8c

0800401c <global_stdio_init.part.0>:
 800401c:	b510      	push	{r4, lr}
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <global_stdio_init.part.0+0x30>)
 8004020:	4c0b      	ldr	r4, [pc, #44]	; (8004050 <global_stdio_init.part.0+0x34>)
 8004022:	4a0c      	ldr	r2, [pc, #48]	; (8004054 <global_stdio_init.part.0+0x38>)
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	4620      	mov	r0, r4
 8004028:	2200      	movs	r2, #0
 800402a:	2104      	movs	r1, #4
 800402c:	f7ff ff94 	bl	8003f58 <std>
 8004030:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004034:	2201      	movs	r2, #1
 8004036:	2109      	movs	r1, #9
 8004038:	f7ff ff8e 	bl	8003f58 <std>
 800403c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004040:	2202      	movs	r2, #2
 8004042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004046:	2112      	movs	r1, #18
 8004048:	f7ff bf86 	b.w	8003f58 <std>
 800404c:	20012ff4 	.word	0x20012ff4
 8004050:	20012ebc 	.word	0x20012ebc
 8004054:	08003fc5 	.word	0x08003fc5

08004058 <__sfp_lock_acquire>:
 8004058:	4801      	ldr	r0, [pc, #4]	; (8004060 <__sfp_lock_acquire+0x8>)
 800405a:	f000 b9fe 	b.w	800445a <__retarget_lock_acquire_recursive>
 800405e:	bf00      	nop
 8004060:	20012ffd 	.word	0x20012ffd

08004064 <__sfp_lock_release>:
 8004064:	4801      	ldr	r0, [pc, #4]	; (800406c <__sfp_lock_release+0x8>)
 8004066:	f000 b9f9 	b.w	800445c <__retarget_lock_release_recursive>
 800406a:	bf00      	nop
 800406c:	20012ffd 	.word	0x20012ffd

08004070 <__sinit>:
 8004070:	b510      	push	{r4, lr}
 8004072:	4604      	mov	r4, r0
 8004074:	f7ff fff0 	bl	8004058 <__sfp_lock_acquire>
 8004078:	6a23      	ldr	r3, [r4, #32]
 800407a:	b11b      	cbz	r3, 8004084 <__sinit+0x14>
 800407c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004080:	f7ff bff0 	b.w	8004064 <__sfp_lock_release>
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <__sinit+0x28>)
 8004086:	6223      	str	r3, [r4, #32]
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <__sinit+0x2c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f5      	bne.n	800407c <__sinit+0xc>
 8004090:	f7ff ffc4 	bl	800401c <global_stdio_init.part.0>
 8004094:	e7f2      	b.n	800407c <__sinit+0xc>
 8004096:	bf00      	nop
 8004098:	08003fdd 	.word	0x08003fdd
 800409c:	20012ff4 	.word	0x20012ff4

080040a0 <_fwalk_sglue>:
 80040a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040a4:	4607      	mov	r7, r0
 80040a6:	4688      	mov	r8, r1
 80040a8:	4614      	mov	r4, r2
 80040aa:	2600      	movs	r6, #0
 80040ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040b0:	f1b9 0901 	subs.w	r9, r9, #1
 80040b4:	d505      	bpl.n	80040c2 <_fwalk_sglue+0x22>
 80040b6:	6824      	ldr	r4, [r4, #0]
 80040b8:	2c00      	cmp	r4, #0
 80040ba:	d1f7      	bne.n	80040ac <_fwalk_sglue+0xc>
 80040bc:	4630      	mov	r0, r6
 80040be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040c2:	89ab      	ldrh	r3, [r5, #12]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d907      	bls.n	80040d8 <_fwalk_sglue+0x38>
 80040c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040cc:	3301      	adds	r3, #1
 80040ce:	d003      	beq.n	80040d8 <_fwalk_sglue+0x38>
 80040d0:	4629      	mov	r1, r5
 80040d2:	4638      	mov	r0, r7
 80040d4:	47c0      	blx	r8
 80040d6:	4306      	orrs	r6, r0
 80040d8:	3568      	adds	r5, #104	; 0x68
 80040da:	e7e9      	b.n	80040b0 <_fwalk_sglue+0x10>

080040dc <iprintf>:
 80040dc:	b40f      	push	{r0, r1, r2, r3}
 80040de:	b507      	push	{r0, r1, r2, lr}
 80040e0:	4906      	ldr	r1, [pc, #24]	; (80040fc <iprintf+0x20>)
 80040e2:	ab04      	add	r3, sp, #16
 80040e4:	6808      	ldr	r0, [r1, #0]
 80040e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80040ea:	6881      	ldr	r1, [r0, #8]
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	f000 fae7 	bl	80046c0 <_vfiprintf_r>
 80040f2:	b003      	add	sp, #12
 80040f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040f8:	b004      	add	sp, #16
 80040fa:	4770      	bx	lr
 80040fc:	20000088 	.word	0x20000088

08004100 <_puts_r>:
 8004100:	6a03      	ldr	r3, [r0, #32]
 8004102:	b570      	push	{r4, r5, r6, lr}
 8004104:	6884      	ldr	r4, [r0, #8]
 8004106:	4605      	mov	r5, r0
 8004108:	460e      	mov	r6, r1
 800410a:	b90b      	cbnz	r3, 8004110 <_puts_r+0x10>
 800410c:	f7ff ffb0 	bl	8004070 <__sinit>
 8004110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004112:	07db      	lsls	r3, r3, #31
 8004114:	d405      	bmi.n	8004122 <_puts_r+0x22>
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	0598      	lsls	r0, r3, #22
 800411a:	d402      	bmi.n	8004122 <_puts_r+0x22>
 800411c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800411e:	f000 f99c 	bl	800445a <__retarget_lock_acquire_recursive>
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	0719      	lsls	r1, r3, #28
 8004126:	d513      	bpl.n	8004150 <_puts_r+0x50>
 8004128:	6923      	ldr	r3, [r4, #16]
 800412a:	b18b      	cbz	r3, 8004150 <_puts_r+0x50>
 800412c:	3e01      	subs	r6, #1
 800412e:	68a3      	ldr	r3, [r4, #8]
 8004130:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004134:	3b01      	subs	r3, #1
 8004136:	60a3      	str	r3, [r4, #8]
 8004138:	b9e9      	cbnz	r1, 8004176 <_puts_r+0x76>
 800413a:	2b00      	cmp	r3, #0
 800413c:	da2e      	bge.n	800419c <_puts_r+0x9c>
 800413e:	4622      	mov	r2, r4
 8004140:	210a      	movs	r1, #10
 8004142:	4628      	mov	r0, r5
 8004144:	f000 f87b 	bl	800423e <__swbuf_r>
 8004148:	3001      	adds	r0, #1
 800414a:	d007      	beq.n	800415c <_puts_r+0x5c>
 800414c:	250a      	movs	r5, #10
 800414e:	e007      	b.n	8004160 <_puts_r+0x60>
 8004150:	4621      	mov	r1, r4
 8004152:	4628      	mov	r0, r5
 8004154:	f000 f8b0 	bl	80042b8 <__swsetup_r>
 8004158:	2800      	cmp	r0, #0
 800415a:	d0e7      	beq.n	800412c <_puts_r+0x2c>
 800415c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004162:	07da      	lsls	r2, r3, #31
 8004164:	d405      	bmi.n	8004172 <_puts_r+0x72>
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	059b      	lsls	r3, r3, #22
 800416a:	d402      	bmi.n	8004172 <_puts_r+0x72>
 800416c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800416e:	f000 f975 	bl	800445c <__retarget_lock_release_recursive>
 8004172:	4628      	mov	r0, r5
 8004174:	bd70      	pop	{r4, r5, r6, pc}
 8004176:	2b00      	cmp	r3, #0
 8004178:	da04      	bge.n	8004184 <_puts_r+0x84>
 800417a:	69a2      	ldr	r2, [r4, #24]
 800417c:	429a      	cmp	r2, r3
 800417e:	dc06      	bgt.n	800418e <_puts_r+0x8e>
 8004180:	290a      	cmp	r1, #10
 8004182:	d004      	beq.n	800418e <_puts_r+0x8e>
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	6022      	str	r2, [r4, #0]
 800418a:	7019      	strb	r1, [r3, #0]
 800418c:	e7cf      	b.n	800412e <_puts_r+0x2e>
 800418e:	4622      	mov	r2, r4
 8004190:	4628      	mov	r0, r5
 8004192:	f000 f854 	bl	800423e <__swbuf_r>
 8004196:	3001      	adds	r0, #1
 8004198:	d1c9      	bne.n	800412e <_puts_r+0x2e>
 800419a:	e7df      	b.n	800415c <_puts_r+0x5c>
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	250a      	movs	r5, #10
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	6022      	str	r2, [r4, #0]
 80041a4:	701d      	strb	r5, [r3, #0]
 80041a6:	e7db      	b.n	8004160 <_puts_r+0x60>

080041a8 <puts>:
 80041a8:	4b02      	ldr	r3, [pc, #8]	; (80041b4 <puts+0xc>)
 80041aa:	4601      	mov	r1, r0
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	f7ff bfa7 	b.w	8004100 <_puts_r>
 80041b2:	bf00      	nop
 80041b4:	20000088 	.word	0x20000088

080041b8 <__sread>:
 80041b8:	b510      	push	{r4, lr}
 80041ba:	460c      	mov	r4, r1
 80041bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c0:	f000 f8fc 	bl	80043bc <_read_r>
 80041c4:	2800      	cmp	r0, #0
 80041c6:	bfab      	itete	ge
 80041c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041ca:	89a3      	ldrhlt	r3, [r4, #12]
 80041cc:	181b      	addge	r3, r3, r0
 80041ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041d2:	bfac      	ite	ge
 80041d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80041d6:	81a3      	strhlt	r3, [r4, #12]
 80041d8:	bd10      	pop	{r4, pc}

080041da <__swrite>:
 80041da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041de:	461f      	mov	r7, r3
 80041e0:	898b      	ldrh	r3, [r1, #12]
 80041e2:	05db      	lsls	r3, r3, #23
 80041e4:	4605      	mov	r5, r0
 80041e6:	460c      	mov	r4, r1
 80041e8:	4616      	mov	r6, r2
 80041ea:	d505      	bpl.n	80041f8 <__swrite+0x1e>
 80041ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f0:	2302      	movs	r3, #2
 80041f2:	2200      	movs	r2, #0
 80041f4:	f000 f8d0 	bl	8004398 <_lseek_r>
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004202:	81a3      	strh	r3, [r4, #12]
 8004204:	4632      	mov	r2, r6
 8004206:	463b      	mov	r3, r7
 8004208:	4628      	mov	r0, r5
 800420a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800420e:	f000 b8e7 	b.w	80043e0 <_write_r>

08004212 <__sseek>:
 8004212:	b510      	push	{r4, lr}
 8004214:	460c      	mov	r4, r1
 8004216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800421a:	f000 f8bd 	bl	8004398 <_lseek_r>
 800421e:	1c43      	adds	r3, r0, #1
 8004220:	89a3      	ldrh	r3, [r4, #12]
 8004222:	bf15      	itete	ne
 8004224:	6560      	strne	r0, [r4, #84]	; 0x54
 8004226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800422a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800422e:	81a3      	strheq	r3, [r4, #12]
 8004230:	bf18      	it	ne
 8004232:	81a3      	strhne	r3, [r4, #12]
 8004234:	bd10      	pop	{r4, pc}

08004236 <__sclose>:
 8004236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800423a:	f000 b89d 	b.w	8004378 <_close_r>

0800423e <__swbuf_r>:
 800423e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004240:	460e      	mov	r6, r1
 8004242:	4614      	mov	r4, r2
 8004244:	4605      	mov	r5, r0
 8004246:	b118      	cbz	r0, 8004250 <__swbuf_r+0x12>
 8004248:	6a03      	ldr	r3, [r0, #32]
 800424a:	b90b      	cbnz	r3, 8004250 <__swbuf_r+0x12>
 800424c:	f7ff ff10 	bl	8004070 <__sinit>
 8004250:	69a3      	ldr	r3, [r4, #24]
 8004252:	60a3      	str	r3, [r4, #8]
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	071a      	lsls	r2, r3, #28
 8004258:	d525      	bpl.n	80042a6 <__swbuf_r+0x68>
 800425a:	6923      	ldr	r3, [r4, #16]
 800425c:	b31b      	cbz	r3, 80042a6 <__swbuf_r+0x68>
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	6922      	ldr	r2, [r4, #16]
 8004262:	1a98      	subs	r0, r3, r2
 8004264:	6963      	ldr	r3, [r4, #20]
 8004266:	b2f6      	uxtb	r6, r6
 8004268:	4283      	cmp	r3, r0
 800426a:	4637      	mov	r7, r6
 800426c:	dc04      	bgt.n	8004278 <__swbuf_r+0x3a>
 800426e:	4621      	mov	r1, r4
 8004270:	4628      	mov	r0, r5
 8004272:	f000 fd55 	bl	8004d20 <_fflush_r>
 8004276:	b9e0      	cbnz	r0, 80042b2 <__swbuf_r+0x74>
 8004278:	68a3      	ldr	r3, [r4, #8]
 800427a:	3b01      	subs	r3, #1
 800427c:	60a3      	str	r3, [r4, #8]
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	6022      	str	r2, [r4, #0]
 8004284:	701e      	strb	r6, [r3, #0]
 8004286:	6962      	ldr	r2, [r4, #20]
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	429a      	cmp	r2, r3
 800428c:	d004      	beq.n	8004298 <__swbuf_r+0x5a>
 800428e:	89a3      	ldrh	r3, [r4, #12]
 8004290:	07db      	lsls	r3, r3, #31
 8004292:	d506      	bpl.n	80042a2 <__swbuf_r+0x64>
 8004294:	2e0a      	cmp	r6, #10
 8004296:	d104      	bne.n	80042a2 <__swbuf_r+0x64>
 8004298:	4621      	mov	r1, r4
 800429a:	4628      	mov	r0, r5
 800429c:	f000 fd40 	bl	8004d20 <_fflush_r>
 80042a0:	b938      	cbnz	r0, 80042b2 <__swbuf_r+0x74>
 80042a2:	4638      	mov	r0, r7
 80042a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a6:	4621      	mov	r1, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	f000 f805 	bl	80042b8 <__swsetup_r>
 80042ae:	2800      	cmp	r0, #0
 80042b0:	d0d5      	beq.n	800425e <__swbuf_r+0x20>
 80042b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80042b6:	e7f4      	b.n	80042a2 <__swbuf_r+0x64>

080042b8 <__swsetup_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <__swsetup_r+0xac>)
 80042bc:	4605      	mov	r5, r0
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	460c      	mov	r4, r1
 80042c2:	b118      	cbz	r0, 80042cc <__swsetup_r+0x14>
 80042c4:	6a03      	ldr	r3, [r0, #32]
 80042c6:	b90b      	cbnz	r3, 80042cc <__swsetup_r+0x14>
 80042c8:	f7ff fed2 	bl	8004070 <__sinit>
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042d2:	0718      	lsls	r0, r3, #28
 80042d4:	d422      	bmi.n	800431c <__swsetup_r+0x64>
 80042d6:	06d9      	lsls	r1, r3, #27
 80042d8:	d407      	bmi.n	80042ea <__swsetup_r+0x32>
 80042da:	2309      	movs	r3, #9
 80042dc:	602b      	str	r3, [r5, #0]
 80042de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042e2:	81a3      	strh	r3, [r4, #12]
 80042e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042e8:	e034      	b.n	8004354 <__swsetup_r+0x9c>
 80042ea:	0758      	lsls	r0, r3, #29
 80042ec:	d512      	bpl.n	8004314 <__swsetup_r+0x5c>
 80042ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042f0:	b141      	cbz	r1, 8004304 <__swsetup_r+0x4c>
 80042f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042f6:	4299      	cmp	r1, r3
 80042f8:	d002      	beq.n	8004300 <__swsetup_r+0x48>
 80042fa:	4628      	mov	r0, r5
 80042fc:	f000 f8be 	bl	800447c <_free_r>
 8004300:	2300      	movs	r3, #0
 8004302:	6363      	str	r3, [r4, #52]	; 0x34
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	2300      	movs	r3, #0
 800430e:	6063      	str	r3, [r4, #4]
 8004310:	6923      	ldr	r3, [r4, #16]
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	89a3      	ldrh	r3, [r4, #12]
 8004316:	f043 0308 	orr.w	r3, r3, #8
 800431a:	81a3      	strh	r3, [r4, #12]
 800431c:	6923      	ldr	r3, [r4, #16]
 800431e:	b94b      	cbnz	r3, 8004334 <__swsetup_r+0x7c>
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432a:	d003      	beq.n	8004334 <__swsetup_r+0x7c>
 800432c:	4621      	mov	r1, r4
 800432e:	4628      	mov	r0, r5
 8004330:	f000 fd44 	bl	8004dbc <__smakebuf_r>
 8004334:	89a0      	ldrh	r0, [r4, #12]
 8004336:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800433a:	f010 0301 	ands.w	r3, r0, #1
 800433e:	d00a      	beq.n	8004356 <__swsetup_r+0x9e>
 8004340:	2300      	movs	r3, #0
 8004342:	60a3      	str	r3, [r4, #8]
 8004344:	6963      	ldr	r3, [r4, #20]
 8004346:	425b      	negs	r3, r3
 8004348:	61a3      	str	r3, [r4, #24]
 800434a:	6923      	ldr	r3, [r4, #16]
 800434c:	b943      	cbnz	r3, 8004360 <__swsetup_r+0xa8>
 800434e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004352:	d1c4      	bne.n	80042de <__swsetup_r+0x26>
 8004354:	bd38      	pop	{r3, r4, r5, pc}
 8004356:	0781      	lsls	r1, r0, #30
 8004358:	bf58      	it	pl
 800435a:	6963      	ldrpl	r3, [r4, #20]
 800435c:	60a3      	str	r3, [r4, #8]
 800435e:	e7f4      	b.n	800434a <__swsetup_r+0x92>
 8004360:	2000      	movs	r0, #0
 8004362:	e7f7      	b.n	8004354 <__swsetup_r+0x9c>
 8004364:	20000088 	.word	0x20000088

08004368 <memset>:
 8004368:	4402      	add	r2, r0
 800436a:	4603      	mov	r3, r0
 800436c:	4293      	cmp	r3, r2
 800436e:	d100      	bne.n	8004372 <memset+0xa>
 8004370:	4770      	bx	lr
 8004372:	f803 1b01 	strb.w	r1, [r3], #1
 8004376:	e7f9      	b.n	800436c <memset+0x4>

08004378 <_close_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4d06      	ldr	r5, [pc, #24]	; (8004394 <_close_r+0x1c>)
 800437c:	2300      	movs	r3, #0
 800437e:	4604      	mov	r4, r0
 8004380:	4608      	mov	r0, r1
 8004382:	602b      	str	r3, [r5, #0]
 8004384:	f7fe f8ff 	bl	8002586 <_close>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d102      	bne.n	8004392 <_close_r+0x1a>
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	b103      	cbz	r3, 8004392 <_close_r+0x1a>
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	bd38      	pop	{r3, r4, r5, pc}
 8004394:	20012ff8 	.word	0x20012ff8

08004398 <_lseek_r>:
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	4d07      	ldr	r5, [pc, #28]	; (80043b8 <_lseek_r+0x20>)
 800439c:	4604      	mov	r4, r0
 800439e:	4608      	mov	r0, r1
 80043a0:	4611      	mov	r1, r2
 80043a2:	2200      	movs	r2, #0
 80043a4:	602a      	str	r2, [r5, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f7fe f914 	bl	80025d4 <_lseek>
 80043ac:	1c43      	adds	r3, r0, #1
 80043ae:	d102      	bne.n	80043b6 <_lseek_r+0x1e>
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	b103      	cbz	r3, 80043b6 <_lseek_r+0x1e>
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	bd38      	pop	{r3, r4, r5, pc}
 80043b8:	20012ff8 	.word	0x20012ff8

080043bc <_read_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4d07      	ldr	r5, [pc, #28]	; (80043dc <_read_r+0x20>)
 80043c0:	4604      	mov	r4, r0
 80043c2:	4608      	mov	r0, r1
 80043c4:	4611      	mov	r1, r2
 80043c6:	2200      	movs	r2, #0
 80043c8:	602a      	str	r2, [r5, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f7fe f8a2 	bl	8002514 <_read>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d102      	bne.n	80043da <_read_r+0x1e>
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	b103      	cbz	r3, 80043da <_read_r+0x1e>
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	bd38      	pop	{r3, r4, r5, pc}
 80043dc:	20012ff8 	.word	0x20012ff8

080043e0 <_write_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	4d07      	ldr	r5, [pc, #28]	; (8004400 <_write_r+0x20>)
 80043e4:	4604      	mov	r4, r0
 80043e6:	4608      	mov	r0, r1
 80043e8:	4611      	mov	r1, r2
 80043ea:	2200      	movs	r2, #0
 80043ec:	602a      	str	r2, [r5, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f7fe f8ad 	bl	800254e <_write>
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	d102      	bne.n	80043fe <_write_r+0x1e>
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	b103      	cbz	r3, 80043fe <_write_r+0x1e>
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	bd38      	pop	{r3, r4, r5, pc}
 8004400:	20012ff8 	.word	0x20012ff8

08004404 <__errno>:
 8004404:	4b01      	ldr	r3, [pc, #4]	; (800440c <__errno+0x8>)
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20000088 	.word	0x20000088

08004410 <__libc_init_array>:
 8004410:	b570      	push	{r4, r5, r6, lr}
 8004412:	4d0d      	ldr	r5, [pc, #52]	; (8004448 <__libc_init_array+0x38>)
 8004414:	4c0d      	ldr	r4, [pc, #52]	; (800444c <__libc_init_array+0x3c>)
 8004416:	1b64      	subs	r4, r4, r5
 8004418:	10a4      	asrs	r4, r4, #2
 800441a:	2600      	movs	r6, #0
 800441c:	42a6      	cmp	r6, r4
 800441e:	d109      	bne.n	8004434 <__libc_init_array+0x24>
 8004420:	4d0b      	ldr	r5, [pc, #44]	; (8004450 <__libc_init_array+0x40>)
 8004422:	4c0c      	ldr	r4, [pc, #48]	; (8004454 <__libc_init_array+0x44>)
 8004424:	f000 fd38 	bl	8004e98 <_init>
 8004428:	1b64      	subs	r4, r4, r5
 800442a:	10a4      	asrs	r4, r4, #2
 800442c:	2600      	movs	r6, #0
 800442e:	42a6      	cmp	r6, r4
 8004430:	d105      	bne.n	800443e <__libc_init_array+0x2e>
 8004432:	bd70      	pop	{r4, r5, r6, pc}
 8004434:	f855 3b04 	ldr.w	r3, [r5], #4
 8004438:	4798      	blx	r3
 800443a:	3601      	adds	r6, #1
 800443c:	e7ee      	b.n	800441c <__libc_init_array+0xc>
 800443e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004442:	4798      	blx	r3
 8004444:	3601      	adds	r6, #1
 8004446:	e7f2      	b.n	800442e <__libc_init_array+0x1e>
 8004448:	08004f98 	.word	0x08004f98
 800444c:	08004f98 	.word	0x08004f98
 8004450:	08004f98 	.word	0x08004f98
 8004454:	08004f9c 	.word	0x08004f9c

08004458 <__retarget_lock_init_recursive>:
 8004458:	4770      	bx	lr

0800445a <__retarget_lock_acquire_recursive>:
 800445a:	4770      	bx	lr

0800445c <__retarget_lock_release_recursive>:
 800445c:	4770      	bx	lr

0800445e <memcpy>:
 800445e:	440a      	add	r2, r1
 8004460:	4291      	cmp	r1, r2
 8004462:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004466:	d100      	bne.n	800446a <memcpy+0xc>
 8004468:	4770      	bx	lr
 800446a:	b510      	push	{r4, lr}
 800446c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004474:	4291      	cmp	r1, r2
 8004476:	d1f9      	bne.n	800446c <memcpy+0xe>
 8004478:	bd10      	pop	{r4, pc}
	...

0800447c <_free_r>:
 800447c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800447e:	2900      	cmp	r1, #0
 8004480:	d044      	beq.n	800450c <_free_r+0x90>
 8004482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004486:	9001      	str	r0, [sp, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	f1a1 0404 	sub.w	r4, r1, #4
 800448e:	bfb8      	it	lt
 8004490:	18e4      	addlt	r4, r4, r3
 8004492:	f000 f8df 	bl	8004654 <__malloc_lock>
 8004496:	4a1e      	ldr	r2, [pc, #120]	; (8004510 <_free_r+0x94>)
 8004498:	9801      	ldr	r0, [sp, #4]
 800449a:	6813      	ldr	r3, [r2, #0]
 800449c:	b933      	cbnz	r3, 80044ac <_free_r+0x30>
 800449e:	6063      	str	r3, [r4, #4]
 80044a0:	6014      	str	r4, [r2, #0]
 80044a2:	b003      	add	sp, #12
 80044a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044a8:	f000 b8da 	b.w	8004660 <__malloc_unlock>
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	d908      	bls.n	80044c2 <_free_r+0x46>
 80044b0:	6825      	ldr	r5, [r4, #0]
 80044b2:	1961      	adds	r1, r4, r5
 80044b4:	428b      	cmp	r3, r1
 80044b6:	bf01      	itttt	eq
 80044b8:	6819      	ldreq	r1, [r3, #0]
 80044ba:	685b      	ldreq	r3, [r3, #4]
 80044bc:	1949      	addeq	r1, r1, r5
 80044be:	6021      	streq	r1, [r4, #0]
 80044c0:	e7ed      	b.n	800449e <_free_r+0x22>
 80044c2:	461a      	mov	r2, r3
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	b10b      	cbz	r3, 80044cc <_free_r+0x50>
 80044c8:	42a3      	cmp	r3, r4
 80044ca:	d9fa      	bls.n	80044c2 <_free_r+0x46>
 80044cc:	6811      	ldr	r1, [r2, #0]
 80044ce:	1855      	adds	r5, r2, r1
 80044d0:	42a5      	cmp	r5, r4
 80044d2:	d10b      	bne.n	80044ec <_free_r+0x70>
 80044d4:	6824      	ldr	r4, [r4, #0]
 80044d6:	4421      	add	r1, r4
 80044d8:	1854      	adds	r4, r2, r1
 80044da:	42a3      	cmp	r3, r4
 80044dc:	6011      	str	r1, [r2, #0]
 80044de:	d1e0      	bne.n	80044a2 <_free_r+0x26>
 80044e0:	681c      	ldr	r4, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	6053      	str	r3, [r2, #4]
 80044e6:	440c      	add	r4, r1
 80044e8:	6014      	str	r4, [r2, #0]
 80044ea:	e7da      	b.n	80044a2 <_free_r+0x26>
 80044ec:	d902      	bls.n	80044f4 <_free_r+0x78>
 80044ee:	230c      	movs	r3, #12
 80044f0:	6003      	str	r3, [r0, #0]
 80044f2:	e7d6      	b.n	80044a2 <_free_r+0x26>
 80044f4:	6825      	ldr	r5, [r4, #0]
 80044f6:	1961      	adds	r1, r4, r5
 80044f8:	428b      	cmp	r3, r1
 80044fa:	bf04      	itt	eq
 80044fc:	6819      	ldreq	r1, [r3, #0]
 80044fe:	685b      	ldreq	r3, [r3, #4]
 8004500:	6063      	str	r3, [r4, #4]
 8004502:	bf04      	itt	eq
 8004504:	1949      	addeq	r1, r1, r5
 8004506:	6021      	streq	r1, [r4, #0]
 8004508:	6054      	str	r4, [r2, #4]
 800450a:	e7ca      	b.n	80044a2 <_free_r+0x26>
 800450c:	b003      	add	sp, #12
 800450e:	bd30      	pop	{r4, r5, pc}
 8004510:	20013000 	.word	0x20013000

08004514 <sbrk_aligned>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	4e0e      	ldr	r6, [pc, #56]	; (8004550 <sbrk_aligned+0x3c>)
 8004518:	460c      	mov	r4, r1
 800451a:	6831      	ldr	r1, [r6, #0]
 800451c:	4605      	mov	r5, r0
 800451e:	b911      	cbnz	r1, 8004526 <sbrk_aligned+0x12>
 8004520:	f000 fcaa 	bl	8004e78 <_sbrk_r>
 8004524:	6030      	str	r0, [r6, #0]
 8004526:	4621      	mov	r1, r4
 8004528:	4628      	mov	r0, r5
 800452a:	f000 fca5 	bl	8004e78 <_sbrk_r>
 800452e:	1c43      	adds	r3, r0, #1
 8004530:	d00a      	beq.n	8004548 <sbrk_aligned+0x34>
 8004532:	1cc4      	adds	r4, r0, #3
 8004534:	f024 0403 	bic.w	r4, r4, #3
 8004538:	42a0      	cmp	r0, r4
 800453a:	d007      	beq.n	800454c <sbrk_aligned+0x38>
 800453c:	1a21      	subs	r1, r4, r0
 800453e:	4628      	mov	r0, r5
 8004540:	f000 fc9a 	bl	8004e78 <_sbrk_r>
 8004544:	3001      	adds	r0, #1
 8004546:	d101      	bne.n	800454c <sbrk_aligned+0x38>
 8004548:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800454c:	4620      	mov	r0, r4
 800454e:	bd70      	pop	{r4, r5, r6, pc}
 8004550:	20013004 	.word	0x20013004

08004554 <_malloc_r>:
 8004554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004558:	1ccd      	adds	r5, r1, #3
 800455a:	f025 0503 	bic.w	r5, r5, #3
 800455e:	3508      	adds	r5, #8
 8004560:	2d0c      	cmp	r5, #12
 8004562:	bf38      	it	cc
 8004564:	250c      	movcc	r5, #12
 8004566:	2d00      	cmp	r5, #0
 8004568:	4607      	mov	r7, r0
 800456a:	db01      	blt.n	8004570 <_malloc_r+0x1c>
 800456c:	42a9      	cmp	r1, r5
 800456e:	d905      	bls.n	800457c <_malloc_r+0x28>
 8004570:	230c      	movs	r3, #12
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	2600      	movs	r6, #0
 8004576:	4630      	mov	r0, r6
 8004578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800457c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004650 <_malloc_r+0xfc>
 8004580:	f000 f868 	bl	8004654 <__malloc_lock>
 8004584:	f8d8 3000 	ldr.w	r3, [r8]
 8004588:	461c      	mov	r4, r3
 800458a:	bb5c      	cbnz	r4, 80045e4 <_malloc_r+0x90>
 800458c:	4629      	mov	r1, r5
 800458e:	4638      	mov	r0, r7
 8004590:	f7ff ffc0 	bl	8004514 <sbrk_aligned>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	4604      	mov	r4, r0
 8004598:	d155      	bne.n	8004646 <_malloc_r+0xf2>
 800459a:	f8d8 4000 	ldr.w	r4, [r8]
 800459e:	4626      	mov	r6, r4
 80045a0:	2e00      	cmp	r6, #0
 80045a2:	d145      	bne.n	8004630 <_malloc_r+0xdc>
 80045a4:	2c00      	cmp	r4, #0
 80045a6:	d048      	beq.n	800463a <_malloc_r+0xe6>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	4631      	mov	r1, r6
 80045ac:	4638      	mov	r0, r7
 80045ae:	eb04 0903 	add.w	r9, r4, r3
 80045b2:	f000 fc61 	bl	8004e78 <_sbrk_r>
 80045b6:	4581      	cmp	r9, r0
 80045b8:	d13f      	bne.n	800463a <_malloc_r+0xe6>
 80045ba:	6821      	ldr	r1, [r4, #0]
 80045bc:	1a6d      	subs	r5, r5, r1
 80045be:	4629      	mov	r1, r5
 80045c0:	4638      	mov	r0, r7
 80045c2:	f7ff ffa7 	bl	8004514 <sbrk_aligned>
 80045c6:	3001      	adds	r0, #1
 80045c8:	d037      	beq.n	800463a <_malloc_r+0xe6>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	442b      	add	r3, r5
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	f8d8 3000 	ldr.w	r3, [r8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d038      	beq.n	800464a <_malloc_r+0xf6>
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	42a2      	cmp	r2, r4
 80045dc:	d12b      	bne.n	8004636 <_malloc_r+0xe2>
 80045de:	2200      	movs	r2, #0
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	e00f      	b.n	8004604 <_malloc_r+0xb0>
 80045e4:	6822      	ldr	r2, [r4, #0]
 80045e6:	1b52      	subs	r2, r2, r5
 80045e8:	d41f      	bmi.n	800462a <_malloc_r+0xd6>
 80045ea:	2a0b      	cmp	r2, #11
 80045ec:	d917      	bls.n	800461e <_malloc_r+0xca>
 80045ee:	1961      	adds	r1, r4, r5
 80045f0:	42a3      	cmp	r3, r4
 80045f2:	6025      	str	r5, [r4, #0]
 80045f4:	bf18      	it	ne
 80045f6:	6059      	strne	r1, [r3, #4]
 80045f8:	6863      	ldr	r3, [r4, #4]
 80045fa:	bf08      	it	eq
 80045fc:	f8c8 1000 	streq.w	r1, [r8]
 8004600:	5162      	str	r2, [r4, r5]
 8004602:	604b      	str	r3, [r1, #4]
 8004604:	4638      	mov	r0, r7
 8004606:	f104 060b 	add.w	r6, r4, #11
 800460a:	f000 f829 	bl	8004660 <__malloc_unlock>
 800460e:	f026 0607 	bic.w	r6, r6, #7
 8004612:	1d23      	adds	r3, r4, #4
 8004614:	1af2      	subs	r2, r6, r3
 8004616:	d0ae      	beq.n	8004576 <_malloc_r+0x22>
 8004618:	1b9b      	subs	r3, r3, r6
 800461a:	50a3      	str	r3, [r4, r2]
 800461c:	e7ab      	b.n	8004576 <_malloc_r+0x22>
 800461e:	42a3      	cmp	r3, r4
 8004620:	6862      	ldr	r2, [r4, #4]
 8004622:	d1dd      	bne.n	80045e0 <_malloc_r+0x8c>
 8004624:	f8c8 2000 	str.w	r2, [r8]
 8004628:	e7ec      	b.n	8004604 <_malloc_r+0xb0>
 800462a:	4623      	mov	r3, r4
 800462c:	6864      	ldr	r4, [r4, #4]
 800462e:	e7ac      	b.n	800458a <_malloc_r+0x36>
 8004630:	4634      	mov	r4, r6
 8004632:	6876      	ldr	r6, [r6, #4]
 8004634:	e7b4      	b.n	80045a0 <_malloc_r+0x4c>
 8004636:	4613      	mov	r3, r2
 8004638:	e7cc      	b.n	80045d4 <_malloc_r+0x80>
 800463a:	230c      	movs	r3, #12
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4638      	mov	r0, r7
 8004640:	f000 f80e 	bl	8004660 <__malloc_unlock>
 8004644:	e797      	b.n	8004576 <_malloc_r+0x22>
 8004646:	6025      	str	r5, [r4, #0]
 8004648:	e7dc      	b.n	8004604 <_malloc_r+0xb0>
 800464a:	605b      	str	r3, [r3, #4]
 800464c:	deff      	udf	#255	; 0xff
 800464e:	bf00      	nop
 8004650:	20013000 	.word	0x20013000

08004654 <__malloc_lock>:
 8004654:	4801      	ldr	r0, [pc, #4]	; (800465c <__malloc_lock+0x8>)
 8004656:	f7ff bf00 	b.w	800445a <__retarget_lock_acquire_recursive>
 800465a:	bf00      	nop
 800465c:	20012ffc 	.word	0x20012ffc

08004660 <__malloc_unlock>:
 8004660:	4801      	ldr	r0, [pc, #4]	; (8004668 <__malloc_unlock+0x8>)
 8004662:	f7ff befb 	b.w	800445c <__retarget_lock_release_recursive>
 8004666:	bf00      	nop
 8004668:	20012ffc 	.word	0x20012ffc

0800466c <__sfputc_r>:
 800466c:	6893      	ldr	r3, [r2, #8]
 800466e:	3b01      	subs	r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	b410      	push	{r4}
 8004674:	6093      	str	r3, [r2, #8]
 8004676:	da08      	bge.n	800468a <__sfputc_r+0x1e>
 8004678:	6994      	ldr	r4, [r2, #24]
 800467a:	42a3      	cmp	r3, r4
 800467c:	db01      	blt.n	8004682 <__sfputc_r+0x16>
 800467e:	290a      	cmp	r1, #10
 8004680:	d103      	bne.n	800468a <__sfputc_r+0x1e>
 8004682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004686:	f7ff bdda 	b.w	800423e <__swbuf_r>
 800468a:	6813      	ldr	r3, [r2, #0]
 800468c:	1c58      	adds	r0, r3, #1
 800468e:	6010      	str	r0, [r2, #0]
 8004690:	7019      	strb	r1, [r3, #0]
 8004692:	4608      	mov	r0, r1
 8004694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004698:	4770      	bx	lr

0800469a <__sfputs_r>:
 800469a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469c:	4606      	mov	r6, r0
 800469e:	460f      	mov	r7, r1
 80046a0:	4614      	mov	r4, r2
 80046a2:	18d5      	adds	r5, r2, r3
 80046a4:	42ac      	cmp	r4, r5
 80046a6:	d101      	bne.n	80046ac <__sfputs_r+0x12>
 80046a8:	2000      	movs	r0, #0
 80046aa:	e007      	b.n	80046bc <__sfputs_r+0x22>
 80046ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b0:	463a      	mov	r2, r7
 80046b2:	4630      	mov	r0, r6
 80046b4:	f7ff ffda 	bl	800466c <__sfputc_r>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d1f3      	bne.n	80046a4 <__sfputs_r+0xa>
 80046bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046c0 <_vfiprintf_r>:
 80046c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c4:	460d      	mov	r5, r1
 80046c6:	b09d      	sub	sp, #116	; 0x74
 80046c8:	4614      	mov	r4, r2
 80046ca:	4698      	mov	r8, r3
 80046cc:	4606      	mov	r6, r0
 80046ce:	b118      	cbz	r0, 80046d8 <_vfiprintf_r+0x18>
 80046d0:	6a03      	ldr	r3, [r0, #32]
 80046d2:	b90b      	cbnz	r3, 80046d8 <_vfiprintf_r+0x18>
 80046d4:	f7ff fccc 	bl	8004070 <__sinit>
 80046d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046da:	07d9      	lsls	r1, r3, #31
 80046dc:	d405      	bmi.n	80046ea <_vfiprintf_r+0x2a>
 80046de:	89ab      	ldrh	r3, [r5, #12]
 80046e0:	059a      	lsls	r2, r3, #22
 80046e2:	d402      	bmi.n	80046ea <_vfiprintf_r+0x2a>
 80046e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046e6:	f7ff feb8 	bl	800445a <__retarget_lock_acquire_recursive>
 80046ea:	89ab      	ldrh	r3, [r5, #12]
 80046ec:	071b      	lsls	r3, r3, #28
 80046ee:	d501      	bpl.n	80046f4 <_vfiprintf_r+0x34>
 80046f0:	692b      	ldr	r3, [r5, #16]
 80046f2:	b99b      	cbnz	r3, 800471c <_vfiprintf_r+0x5c>
 80046f4:	4629      	mov	r1, r5
 80046f6:	4630      	mov	r0, r6
 80046f8:	f7ff fdde 	bl	80042b8 <__swsetup_r>
 80046fc:	b170      	cbz	r0, 800471c <_vfiprintf_r+0x5c>
 80046fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004700:	07dc      	lsls	r4, r3, #31
 8004702:	d504      	bpl.n	800470e <_vfiprintf_r+0x4e>
 8004704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004708:	b01d      	add	sp, #116	; 0x74
 800470a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800470e:	89ab      	ldrh	r3, [r5, #12]
 8004710:	0598      	lsls	r0, r3, #22
 8004712:	d4f7      	bmi.n	8004704 <_vfiprintf_r+0x44>
 8004714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004716:	f7ff fea1 	bl	800445c <__retarget_lock_release_recursive>
 800471a:	e7f3      	b.n	8004704 <_vfiprintf_r+0x44>
 800471c:	2300      	movs	r3, #0
 800471e:	9309      	str	r3, [sp, #36]	; 0x24
 8004720:	2320      	movs	r3, #32
 8004722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004726:	f8cd 800c 	str.w	r8, [sp, #12]
 800472a:	2330      	movs	r3, #48	; 0x30
 800472c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80048e0 <_vfiprintf_r+0x220>
 8004730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004734:	f04f 0901 	mov.w	r9, #1
 8004738:	4623      	mov	r3, r4
 800473a:	469a      	mov	sl, r3
 800473c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004740:	b10a      	cbz	r2, 8004746 <_vfiprintf_r+0x86>
 8004742:	2a25      	cmp	r2, #37	; 0x25
 8004744:	d1f9      	bne.n	800473a <_vfiprintf_r+0x7a>
 8004746:	ebba 0b04 	subs.w	fp, sl, r4
 800474a:	d00b      	beq.n	8004764 <_vfiprintf_r+0xa4>
 800474c:	465b      	mov	r3, fp
 800474e:	4622      	mov	r2, r4
 8004750:	4629      	mov	r1, r5
 8004752:	4630      	mov	r0, r6
 8004754:	f7ff ffa1 	bl	800469a <__sfputs_r>
 8004758:	3001      	adds	r0, #1
 800475a:	f000 80a9 	beq.w	80048b0 <_vfiprintf_r+0x1f0>
 800475e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004760:	445a      	add	r2, fp
 8004762:	9209      	str	r2, [sp, #36]	; 0x24
 8004764:	f89a 3000 	ldrb.w	r3, [sl]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80a1 	beq.w	80048b0 <_vfiprintf_r+0x1f0>
 800476e:	2300      	movs	r3, #0
 8004770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004778:	f10a 0a01 	add.w	sl, sl, #1
 800477c:	9304      	str	r3, [sp, #16]
 800477e:	9307      	str	r3, [sp, #28]
 8004780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004784:	931a      	str	r3, [sp, #104]	; 0x68
 8004786:	4654      	mov	r4, sl
 8004788:	2205      	movs	r2, #5
 800478a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800478e:	4854      	ldr	r0, [pc, #336]	; (80048e0 <_vfiprintf_r+0x220>)
 8004790:	f7fb fd26 	bl	80001e0 <memchr>
 8004794:	9a04      	ldr	r2, [sp, #16]
 8004796:	b9d8      	cbnz	r0, 80047d0 <_vfiprintf_r+0x110>
 8004798:	06d1      	lsls	r1, r2, #27
 800479a:	bf44      	itt	mi
 800479c:	2320      	movmi	r3, #32
 800479e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047a2:	0713      	lsls	r3, r2, #28
 80047a4:	bf44      	itt	mi
 80047a6:	232b      	movmi	r3, #43	; 0x2b
 80047a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ac:	f89a 3000 	ldrb.w	r3, [sl]
 80047b0:	2b2a      	cmp	r3, #42	; 0x2a
 80047b2:	d015      	beq.n	80047e0 <_vfiprintf_r+0x120>
 80047b4:	9a07      	ldr	r2, [sp, #28]
 80047b6:	4654      	mov	r4, sl
 80047b8:	2000      	movs	r0, #0
 80047ba:	f04f 0c0a 	mov.w	ip, #10
 80047be:	4621      	mov	r1, r4
 80047c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047c4:	3b30      	subs	r3, #48	; 0x30
 80047c6:	2b09      	cmp	r3, #9
 80047c8:	d94d      	bls.n	8004866 <_vfiprintf_r+0x1a6>
 80047ca:	b1b0      	cbz	r0, 80047fa <_vfiprintf_r+0x13a>
 80047cc:	9207      	str	r2, [sp, #28]
 80047ce:	e014      	b.n	80047fa <_vfiprintf_r+0x13a>
 80047d0:	eba0 0308 	sub.w	r3, r0, r8
 80047d4:	fa09 f303 	lsl.w	r3, r9, r3
 80047d8:	4313      	orrs	r3, r2
 80047da:	9304      	str	r3, [sp, #16]
 80047dc:	46a2      	mov	sl, r4
 80047de:	e7d2      	b.n	8004786 <_vfiprintf_r+0xc6>
 80047e0:	9b03      	ldr	r3, [sp, #12]
 80047e2:	1d19      	adds	r1, r3, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	9103      	str	r1, [sp, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bfbb      	ittet	lt
 80047ec:	425b      	neglt	r3, r3
 80047ee:	f042 0202 	orrlt.w	r2, r2, #2
 80047f2:	9307      	strge	r3, [sp, #28]
 80047f4:	9307      	strlt	r3, [sp, #28]
 80047f6:	bfb8      	it	lt
 80047f8:	9204      	strlt	r2, [sp, #16]
 80047fa:	7823      	ldrb	r3, [r4, #0]
 80047fc:	2b2e      	cmp	r3, #46	; 0x2e
 80047fe:	d10c      	bne.n	800481a <_vfiprintf_r+0x15a>
 8004800:	7863      	ldrb	r3, [r4, #1]
 8004802:	2b2a      	cmp	r3, #42	; 0x2a
 8004804:	d134      	bne.n	8004870 <_vfiprintf_r+0x1b0>
 8004806:	9b03      	ldr	r3, [sp, #12]
 8004808:	1d1a      	adds	r2, r3, #4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	9203      	str	r2, [sp, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	bfb8      	it	lt
 8004812:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004816:	3402      	adds	r4, #2
 8004818:	9305      	str	r3, [sp, #20]
 800481a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80048f0 <_vfiprintf_r+0x230>
 800481e:	7821      	ldrb	r1, [r4, #0]
 8004820:	2203      	movs	r2, #3
 8004822:	4650      	mov	r0, sl
 8004824:	f7fb fcdc 	bl	80001e0 <memchr>
 8004828:	b138      	cbz	r0, 800483a <_vfiprintf_r+0x17a>
 800482a:	9b04      	ldr	r3, [sp, #16]
 800482c:	eba0 000a 	sub.w	r0, r0, sl
 8004830:	2240      	movs	r2, #64	; 0x40
 8004832:	4082      	lsls	r2, r0
 8004834:	4313      	orrs	r3, r2
 8004836:	3401      	adds	r4, #1
 8004838:	9304      	str	r3, [sp, #16]
 800483a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800483e:	4829      	ldr	r0, [pc, #164]	; (80048e4 <_vfiprintf_r+0x224>)
 8004840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004844:	2206      	movs	r2, #6
 8004846:	f7fb fccb 	bl	80001e0 <memchr>
 800484a:	2800      	cmp	r0, #0
 800484c:	d03f      	beq.n	80048ce <_vfiprintf_r+0x20e>
 800484e:	4b26      	ldr	r3, [pc, #152]	; (80048e8 <_vfiprintf_r+0x228>)
 8004850:	bb1b      	cbnz	r3, 800489a <_vfiprintf_r+0x1da>
 8004852:	9b03      	ldr	r3, [sp, #12]
 8004854:	3307      	adds	r3, #7
 8004856:	f023 0307 	bic.w	r3, r3, #7
 800485a:	3308      	adds	r3, #8
 800485c:	9303      	str	r3, [sp, #12]
 800485e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004860:	443b      	add	r3, r7
 8004862:	9309      	str	r3, [sp, #36]	; 0x24
 8004864:	e768      	b.n	8004738 <_vfiprintf_r+0x78>
 8004866:	fb0c 3202 	mla	r2, ip, r2, r3
 800486a:	460c      	mov	r4, r1
 800486c:	2001      	movs	r0, #1
 800486e:	e7a6      	b.n	80047be <_vfiprintf_r+0xfe>
 8004870:	2300      	movs	r3, #0
 8004872:	3401      	adds	r4, #1
 8004874:	9305      	str	r3, [sp, #20]
 8004876:	4619      	mov	r1, r3
 8004878:	f04f 0c0a 	mov.w	ip, #10
 800487c:	4620      	mov	r0, r4
 800487e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004882:	3a30      	subs	r2, #48	; 0x30
 8004884:	2a09      	cmp	r2, #9
 8004886:	d903      	bls.n	8004890 <_vfiprintf_r+0x1d0>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0c6      	beq.n	800481a <_vfiprintf_r+0x15a>
 800488c:	9105      	str	r1, [sp, #20]
 800488e:	e7c4      	b.n	800481a <_vfiprintf_r+0x15a>
 8004890:	fb0c 2101 	mla	r1, ip, r1, r2
 8004894:	4604      	mov	r4, r0
 8004896:	2301      	movs	r3, #1
 8004898:	e7f0      	b.n	800487c <_vfiprintf_r+0x1bc>
 800489a:	ab03      	add	r3, sp, #12
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	462a      	mov	r2, r5
 80048a0:	4b12      	ldr	r3, [pc, #72]	; (80048ec <_vfiprintf_r+0x22c>)
 80048a2:	a904      	add	r1, sp, #16
 80048a4:	4630      	mov	r0, r6
 80048a6:	f3af 8000 	nop.w
 80048aa:	4607      	mov	r7, r0
 80048ac:	1c78      	adds	r0, r7, #1
 80048ae:	d1d6      	bne.n	800485e <_vfiprintf_r+0x19e>
 80048b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048b2:	07d9      	lsls	r1, r3, #31
 80048b4:	d405      	bmi.n	80048c2 <_vfiprintf_r+0x202>
 80048b6:	89ab      	ldrh	r3, [r5, #12]
 80048b8:	059a      	lsls	r2, r3, #22
 80048ba:	d402      	bmi.n	80048c2 <_vfiprintf_r+0x202>
 80048bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048be:	f7ff fdcd 	bl	800445c <__retarget_lock_release_recursive>
 80048c2:	89ab      	ldrh	r3, [r5, #12]
 80048c4:	065b      	lsls	r3, r3, #25
 80048c6:	f53f af1d 	bmi.w	8004704 <_vfiprintf_r+0x44>
 80048ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048cc:	e71c      	b.n	8004708 <_vfiprintf_r+0x48>
 80048ce:	ab03      	add	r3, sp, #12
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	462a      	mov	r2, r5
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <_vfiprintf_r+0x22c>)
 80048d6:	a904      	add	r1, sp, #16
 80048d8:	4630      	mov	r0, r6
 80048da:	f000 f879 	bl	80049d0 <_printf_i>
 80048de:	e7e4      	b.n	80048aa <_vfiprintf_r+0x1ea>
 80048e0:	08004f62 	.word	0x08004f62
 80048e4:	08004f6c 	.word	0x08004f6c
 80048e8:	00000000 	.word	0x00000000
 80048ec:	0800469b 	.word	0x0800469b
 80048f0:	08004f68 	.word	0x08004f68

080048f4 <_printf_common>:
 80048f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f8:	4616      	mov	r6, r2
 80048fa:	4699      	mov	r9, r3
 80048fc:	688a      	ldr	r2, [r1, #8]
 80048fe:	690b      	ldr	r3, [r1, #16]
 8004900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004904:	4293      	cmp	r3, r2
 8004906:	bfb8      	it	lt
 8004908:	4613      	movlt	r3, r2
 800490a:	6033      	str	r3, [r6, #0]
 800490c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004910:	4607      	mov	r7, r0
 8004912:	460c      	mov	r4, r1
 8004914:	b10a      	cbz	r2, 800491a <_printf_common+0x26>
 8004916:	3301      	adds	r3, #1
 8004918:	6033      	str	r3, [r6, #0]
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	0699      	lsls	r1, r3, #26
 800491e:	bf42      	ittt	mi
 8004920:	6833      	ldrmi	r3, [r6, #0]
 8004922:	3302      	addmi	r3, #2
 8004924:	6033      	strmi	r3, [r6, #0]
 8004926:	6825      	ldr	r5, [r4, #0]
 8004928:	f015 0506 	ands.w	r5, r5, #6
 800492c:	d106      	bne.n	800493c <_printf_common+0x48>
 800492e:	f104 0a19 	add.w	sl, r4, #25
 8004932:	68e3      	ldr	r3, [r4, #12]
 8004934:	6832      	ldr	r2, [r6, #0]
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	42ab      	cmp	r3, r5
 800493a:	dc26      	bgt.n	800498a <_printf_common+0x96>
 800493c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004940:	1e13      	subs	r3, r2, #0
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	bf18      	it	ne
 8004946:	2301      	movne	r3, #1
 8004948:	0692      	lsls	r2, r2, #26
 800494a:	d42b      	bmi.n	80049a4 <_printf_common+0xb0>
 800494c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004950:	4649      	mov	r1, r9
 8004952:	4638      	mov	r0, r7
 8004954:	47c0      	blx	r8
 8004956:	3001      	adds	r0, #1
 8004958:	d01e      	beq.n	8004998 <_printf_common+0xa4>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	6922      	ldr	r2, [r4, #16]
 800495e:	f003 0306 	and.w	r3, r3, #6
 8004962:	2b04      	cmp	r3, #4
 8004964:	bf02      	ittt	eq
 8004966:	68e5      	ldreq	r5, [r4, #12]
 8004968:	6833      	ldreq	r3, [r6, #0]
 800496a:	1aed      	subeq	r5, r5, r3
 800496c:	68a3      	ldr	r3, [r4, #8]
 800496e:	bf0c      	ite	eq
 8004970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004974:	2500      	movne	r5, #0
 8004976:	4293      	cmp	r3, r2
 8004978:	bfc4      	itt	gt
 800497a:	1a9b      	subgt	r3, r3, r2
 800497c:	18ed      	addgt	r5, r5, r3
 800497e:	2600      	movs	r6, #0
 8004980:	341a      	adds	r4, #26
 8004982:	42b5      	cmp	r5, r6
 8004984:	d11a      	bne.n	80049bc <_printf_common+0xc8>
 8004986:	2000      	movs	r0, #0
 8004988:	e008      	b.n	800499c <_printf_common+0xa8>
 800498a:	2301      	movs	r3, #1
 800498c:	4652      	mov	r2, sl
 800498e:	4649      	mov	r1, r9
 8004990:	4638      	mov	r0, r7
 8004992:	47c0      	blx	r8
 8004994:	3001      	adds	r0, #1
 8004996:	d103      	bne.n	80049a0 <_printf_common+0xac>
 8004998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800499c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a0:	3501      	adds	r5, #1
 80049a2:	e7c6      	b.n	8004932 <_printf_common+0x3e>
 80049a4:	18e1      	adds	r1, r4, r3
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	2030      	movs	r0, #48	; 0x30
 80049aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049ae:	4422      	add	r2, r4
 80049b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049b8:	3302      	adds	r3, #2
 80049ba:	e7c7      	b.n	800494c <_printf_common+0x58>
 80049bc:	2301      	movs	r3, #1
 80049be:	4622      	mov	r2, r4
 80049c0:	4649      	mov	r1, r9
 80049c2:	4638      	mov	r0, r7
 80049c4:	47c0      	blx	r8
 80049c6:	3001      	adds	r0, #1
 80049c8:	d0e6      	beq.n	8004998 <_printf_common+0xa4>
 80049ca:	3601      	adds	r6, #1
 80049cc:	e7d9      	b.n	8004982 <_printf_common+0x8e>
	...

080049d0 <_printf_i>:
 80049d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049d4:	7e0f      	ldrb	r7, [r1, #24]
 80049d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049d8:	2f78      	cmp	r7, #120	; 0x78
 80049da:	4691      	mov	r9, r2
 80049dc:	4680      	mov	r8, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	469a      	mov	sl, r3
 80049e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049e6:	d807      	bhi.n	80049f8 <_printf_i+0x28>
 80049e8:	2f62      	cmp	r7, #98	; 0x62
 80049ea:	d80a      	bhi.n	8004a02 <_printf_i+0x32>
 80049ec:	2f00      	cmp	r7, #0
 80049ee:	f000 80d4 	beq.w	8004b9a <_printf_i+0x1ca>
 80049f2:	2f58      	cmp	r7, #88	; 0x58
 80049f4:	f000 80c0 	beq.w	8004b78 <_printf_i+0x1a8>
 80049f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a00:	e03a      	b.n	8004a78 <_printf_i+0xa8>
 8004a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a06:	2b15      	cmp	r3, #21
 8004a08:	d8f6      	bhi.n	80049f8 <_printf_i+0x28>
 8004a0a:	a101      	add	r1, pc, #4	; (adr r1, 8004a10 <_printf_i+0x40>)
 8004a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a10:	08004a69 	.word	0x08004a69
 8004a14:	08004a7d 	.word	0x08004a7d
 8004a18:	080049f9 	.word	0x080049f9
 8004a1c:	080049f9 	.word	0x080049f9
 8004a20:	080049f9 	.word	0x080049f9
 8004a24:	080049f9 	.word	0x080049f9
 8004a28:	08004a7d 	.word	0x08004a7d
 8004a2c:	080049f9 	.word	0x080049f9
 8004a30:	080049f9 	.word	0x080049f9
 8004a34:	080049f9 	.word	0x080049f9
 8004a38:	080049f9 	.word	0x080049f9
 8004a3c:	08004b81 	.word	0x08004b81
 8004a40:	08004aa9 	.word	0x08004aa9
 8004a44:	08004b3b 	.word	0x08004b3b
 8004a48:	080049f9 	.word	0x080049f9
 8004a4c:	080049f9 	.word	0x080049f9
 8004a50:	08004ba3 	.word	0x08004ba3
 8004a54:	080049f9 	.word	0x080049f9
 8004a58:	08004aa9 	.word	0x08004aa9
 8004a5c:	080049f9 	.word	0x080049f9
 8004a60:	080049f9 	.word	0x080049f9
 8004a64:	08004b43 	.word	0x08004b43
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	1d1a      	adds	r2, r3, #4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	602a      	str	r2, [r5, #0]
 8004a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e09f      	b.n	8004bbc <_printf_i+0x1ec>
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	682b      	ldr	r3, [r5, #0]
 8004a80:	0607      	lsls	r7, r0, #24
 8004a82:	f103 0104 	add.w	r1, r3, #4
 8004a86:	6029      	str	r1, [r5, #0]
 8004a88:	d501      	bpl.n	8004a8e <_printf_i+0xbe>
 8004a8a:	681e      	ldr	r6, [r3, #0]
 8004a8c:	e003      	b.n	8004a96 <_printf_i+0xc6>
 8004a8e:	0646      	lsls	r6, r0, #25
 8004a90:	d5fb      	bpl.n	8004a8a <_printf_i+0xba>
 8004a92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a96:	2e00      	cmp	r6, #0
 8004a98:	da03      	bge.n	8004aa2 <_printf_i+0xd2>
 8004a9a:	232d      	movs	r3, #45	; 0x2d
 8004a9c:	4276      	negs	r6, r6
 8004a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa2:	485a      	ldr	r0, [pc, #360]	; (8004c0c <_printf_i+0x23c>)
 8004aa4:	230a      	movs	r3, #10
 8004aa6:	e012      	b.n	8004ace <_printf_i+0xfe>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	6820      	ldr	r0, [r4, #0]
 8004aac:	1d19      	adds	r1, r3, #4
 8004aae:	6029      	str	r1, [r5, #0]
 8004ab0:	0605      	lsls	r5, r0, #24
 8004ab2:	d501      	bpl.n	8004ab8 <_printf_i+0xe8>
 8004ab4:	681e      	ldr	r6, [r3, #0]
 8004ab6:	e002      	b.n	8004abe <_printf_i+0xee>
 8004ab8:	0641      	lsls	r1, r0, #25
 8004aba:	d5fb      	bpl.n	8004ab4 <_printf_i+0xe4>
 8004abc:	881e      	ldrh	r6, [r3, #0]
 8004abe:	4853      	ldr	r0, [pc, #332]	; (8004c0c <_printf_i+0x23c>)
 8004ac0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ac2:	bf0c      	ite	eq
 8004ac4:	2308      	moveq	r3, #8
 8004ac6:	230a      	movne	r3, #10
 8004ac8:	2100      	movs	r1, #0
 8004aca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ace:	6865      	ldr	r5, [r4, #4]
 8004ad0:	60a5      	str	r5, [r4, #8]
 8004ad2:	2d00      	cmp	r5, #0
 8004ad4:	bfa2      	ittt	ge
 8004ad6:	6821      	ldrge	r1, [r4, #0]
 8004ad8:	f021 0104 	bicge.w	r1, r1, #4
 8004adc:	6021      	strge	r1, [r4, #0]
 8004ade:	b90e      	cbnz	r6, 8004ae4 <_printf_i+0x114>
 8004ae0:	2d00      	cmp	r5, #0
 8004ae2:	d04b      	beq.n	8004b7c <_printf_i+0x1ac>
 8004ae4:	4615      	mov	r5, r2
 8004ae6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004aea:	fb03 6711 	mls	r7, r3, r1, r6
 8004aee:	5dc7      	ldrb	r7, [r0, r7]
 8004af0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004af4:	4637      	mov	r7, r6
 8004af6:	42bb      	cmp	r3, r7
 8004af8:	460e      	mov	r6, r1
 8004afa:	d9f4      	bls.n	8004ae6 <_printf_i+0x116>
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d10b      	bne.n	8004b18 <_printf_i+0x148>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	07de      	lsls	r6, r3, #31
 8004b04:	d508      	bpl.n	8004b18 <_printf_i+0x148>
 8004b06:	6923      	ldr	r3, [r4, #16]
 8004b08:	6861      	ldr	r1, [r4, #4]
 8004b0a:	4299      	cmp	r1, r3
 8004b0c:	bfde      	ittt	le
 8004b0e:	2330      	movle	r3, #48	; 0x30
 8004b10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b18:	1b52      	subs	r2, r2, r5
 8004b1a:	6122      	str	r2, [r4, #16]
 8004b1c:	f8cd a000 	str.w	sl, [sp]
 8004b20:	464b      	mov	r3, r9
 8004b22:	aa03      	add	r2, sp, #12
 8004b24:	4621      	mov	r1, r4
 8004b26:	4640      	mov	r0, r8
 8004b28:	f7ff fee4 	bl	80048f4 <_printf_common>
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d14a      	bne.n	8004bc6 <_printf_i+0x1f6>
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b34:	b004      	add	sp, #16
 8004b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	f043 0320 	orr.w	r3, r3, #32
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	4833      	ldr	r0, [pc, #204]	; (8004c10 <_printf_i+0x240>)
 8004b44:	2778      	movs	r7, #120	; 0x78
 8004b46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	6829      	ldr	r1, [r5, #0]
 8004b4e:	061f      	lsls	r7, r3, #24
 8004b50:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b54:	d402      	bmi.n	8004b5c <_printf_i+0x18c>
 8004b56:	065f      	lsls	r7, r3, #25
 8004b58:	bf48      	it	mi
 8004b5a:	b2b6      	uxthmi	r6, r6
 8004b5c:	07df      	lsls	r7, r3, #31
 8004b5e:	bf48      	it	mi
 8004b60:	f043 0320 	orrmi.w	r3, r3, #32
 8004b64:	6029      	str	r1, [r5, #0]
 8004b66:	bf48      	it	mi
 8004b68:	6023      	strmi	r3, [r4, #0]
 8004b6a:	b91e      	cbnz	r6, 8004b74 <_printf_i+0x1a4>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	f023 0320 	bic.w	r3, r3, #32
 8004b72:	6023      	str	r3, [r4, #0]
 8004b74:	2310      	movs	r3, #16
 8004b76:	e7a7      	b.n	8004ac8 <_printf_i+0xf8>
 8004b78:	4824      	ldr	r0, [pc, #144]	; (8004c0c <_printf_i+0x23c>)
 8004b7a:	e7e4      	b.n	8004b46 <_printf_i+0x176>
 8004b7c:	4615      	mov	r5, r2
 8004b7e:	e7bd      	b.n	8004afc <_printf_i+0x12c>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	6826      	ldr	r6, [r4, #0]
 8004b84:	6961      	ldr	r1, [r4, #20]
 8004b86:	1d18      	adds	r0, r3, #4
 8004b88:	6028      	str	r0, [r5, #0]
 8004b8a:	0635      	lsls	r5, r6, #24
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	d501      	bpl.n	8004b94 <_printf_i+0x1c4>
 8004b90:	6019      	str	r1, [r3, #0]
 8004b92:	e002      	b.n	8004b9a <_printf_i+0x1ca>
 8004b94:	0670      	lsls	r0, r6, #25
 8004b96:	d5fb      	bpl.n	8004b90 <_printf_i+0x1c0>
 8004b98:	8019      	strh	r1, [r3, #0]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6123      	str	r3, [r4, #16]
 8004b9e:	4615      	mov	r5, r2
 8004ba0:	e7bc      	b.n	8004b1c <_printf_i+0x14c>
 8004ba2:	682b      	ldr	r3, [r5, #0]
 8004ba4:	1d1a      	adds	r2, r3, #4
 8004ba6:	602a      	str	r2, [r5, #0]
 8004ba8:	681d      	ldr	r5, [r3, #0]
 8004baa:	6862      	ldr	r2, [r4, #4]
 8004bac:	2100      	movs	r1, #0
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f7fb fb16 	bl	80001e0 <memchr>
 8004bb4:	b108      	cbz	r0, 8004bba <_printf_i+0x1ea>
 8004bb6:	1b40      	subs	r0, r0, r5
 8004bb8:	6060      	str	r0, [r4, #4]
 8004bba:	6863      	ldr	r3, [r4, #4]
 8004bbc:	6123      	str	r3, [r4, #16]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bc4:	e7aa      	b.n	8004b1c <_printf_i+0x14c>
 8004bc6:	6923      	ldr	r3, [r4, #16]
 8004bc8:	462a      	mov	r2, r5
 8004bca:	4649      	mov	r1, r9
 8004bcc:	4640      	mov	r0, r8
 8004bce:	47d0      	blx	sl
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d0ad      	beq.n	8004b30 <_printf_i+0x160>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	079b      	lsls	r3, r3, #30
 8004bd8:	d413      	bmi.n	8004c02 <_printf_i+0x232>
 8004bda:	68e0      	ldr	r0, [r4, #12]
 8004bdc:	9b03      	ldr	r3, [sp, #12]
 8004bde:	4298      	cmp	r0, r3
 8004be0:	bfb8      	it	lt
 8004be2:	4618      	movlt	r0, r3
 8004be4:	e7a6      	b.n	8004b34 <_printf_i+0x164>
 8004be6:	2301      	movs	r3, #1
 8004be8:	4632      	mov	r2, r6
 8004bea:	4649      	mov	r1, r9
 8004bec:	4640      	mov	r0, r8
 8004bee:	47d0      	blx	sl
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d09d      	beq.n	8004b30 <_printf_i+0x160>
 8004bf4:	3501      	adds	r5, #1
 8004bf6:	68e3      	ldr	r3, [r4, #12]
 8004bf8:	9903      	ldr	r1, [sp, #12]
 8004bfa:	1a5b      	subs	r3, r3, r1
 8004bfc:	42ab      	cmp	r3, r5
 8004bfe:	dcf2      	bgt.n	8004be6 <_printf_i+0x216>
 8004c00:	e7eb      	b.n	8004bda <_printf_i+0x20a>
 8004c02:	2500      	movs	r5, #0
 8004c04:	f104 0619 	add.w	r6, r4, #25
 8004c08:	e7f5      	b.n	8004bf6 <_printf_i+0x226>
 8004c0a:	bf00      	nop
 8004c0c:	08004f73 	.word	0x08004f73
 8004c10:	08004f84 	.word	0x08004f84

08004c14 <__sflush_r>:
 8004c14:	898a      	ldrh	r2, [r1, #12]
 8004c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	0710      	lsls	r0, r2, #28
 8004c1e:	460c      	mov	r4, r1
 8004c20:	d458      	bmi.n	8004cd4 <__sflush_r+0xc0>
 8004c22:	684b      	ldr	r3, [r1, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	dc05      	bgt.n	8004c34 <__sflush_r+0x20>
 8004c28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	dc02      	bgt.n	8004c34 <__sflush_r+0x20>
 8004c2e:	2000      	movs	r0, #0
 8004c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c36:	2e00      	cmp	r6, #0
 8004c38:	d0f9      	beq.n	8004c2e <__sflush_r+0x1a>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c40:	682f      	ldr	r7, [r5, #0]
 8004c42:	6a21      	ldr	r1, [r4, #32]
 8004c44:	602b      	str	r3, [r5, #0]
 8004c46:	d032      	beq.n	8004cae <__sflush_r+0x9a>
 8004c48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	075a      	lsls	r2, r3, #29
 8004c4e:	d505      	bpl.n	8004c5c <__sflush_r+0x48>
 8004c50:	6863      	ldr	r3, [r4, #4]
 8004c52:	1ac0      	subs	r0, r0, r3
 8004c54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c56:	b10b      	cbz	r3, 8004c5c <__sflush_r+0x48>
 8004c58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c5a:	1ac0      	subs	r0, r0, r3
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4602      	mov	r2, r0
 8004c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c62:	6a21      	ldr	r1, [r4, #32]
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b0      	blx	r6
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	d106      	bne.n	8004c7c <__sflush_r+0x68>
 8004c6e:	6829      	ldr	r1, [r5, #0]
 8004c70:	291d      	cmp	r1, #29
 8004c72:	d82b      	bhi.n	8004ccc <__sflush_r+0xb8>
 8004c74:	4a29      	ldr	r2, [pc, #164]	; (8004d1c <__sflush_r+0x108>)
 8004c76:	410a      	asrs	r2, r1
 8004c78:	07d6      	lsls	r6, r2, #31
 8004c7a:	d427      	bmi.n	8004ccc <__sflush_r+0xb8>
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	6062      	str	r2, [r4, #4]
 8004c80:	04d9      	lsls	r1, r3, #19
 8004c82:	6922      	ldr	r2, [r4, #16]
 8004c84:	6022      	str	r2, [r4, #0]
 8004c86:	d504      	bpl.n	8004c92 <__sflush_r+0x7e>
 8004c88:	1c42      	adds	r2, r0, #1
 8004c8a:	d101      	bne.n	8004c90 <__sflush_r+0x7c>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	b903      	cbnz	r3, 8004c92 <__sflush_r+0x7e>
 8004c90:	6560      	str	r0, [r4, #84]	; 0x54
 8004c92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c94:	602f      	str	r7, [r5, #0]
 8004c96:	2900      	cmp	r1, #0
 8004c98:	d0c9      	beq.n	8004c2e <__sflush_r+0x1a>
 8004c9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c9e:	4299      	cmp	r1, r3
 8004ca0:	d002      	beq.n	8004ca8 <__sflush_r+0x94>
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f7ff fbea 	bl	800447c <_free_r>
 8004ca8:	2000      	movs	r0, #0
 8004caa:	6360      	str	r0, [r4, #52]	; 0x34
 8004cac:	e7c0      	b.n	8004c30 <__sflush_r+0x1c>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	47b0      	blx	r6
 8004cb4:	1c41      	adds	r1, r0, #1
 8004cb6:	d1c8      	bne.n	8004c4a <__sflush_r+0x36>
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0c5      	beq.n	8004c4a <__sflush_r+0x36>
 8004cbe:	2b1d      	cmp	r3, #29
 8004cc0:	d001      	beq.n	8004cc6 <__sflush_r+0xb2>
 8004cc2:	2b16      	cmp	r3, #22
 8004cc4:	d101      	bne.n	8004cca <__sflush_r+0xb6>
 8004cc6:	602f      	str	r7, [r5, #0]
 8004cc8:	e7b1      	b.n	8004c2e <__sflush_r+0x1a>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	e7ad      	b.n	8004c30 <__sflush_r+0x1c>
 8004cd4:	690f      	ldr	r7, [r1, #16]
 8004cd6:	2f00      	cmp	r7, #0
 8004cd8:	d0a9      	beq.n	8004c2e <__sflush_r+0x1a>
 8004cda:	0793      	lsls	r3, r2, #30
 8004cdc:	680e      	ldr	r6, [r1, #0]
 8004cde:	bf08      	it	eq
 8004ce0:	694b      	ldreq	r3, [r1, #20]
 8004ce2:	600f      	str	r7, [r1, #0]
 8004ce4:	bf18      	it	ne
 8004ce6:	2300      	movne	r3, #0
 8004ce8:	eba6 0807 	sub.w	r8, r6, r7
 8004cec:	608b      	str	r3, [r1, #8]
 8004cee:	f1b8 0f00 	cmp.w	r8, #0
 8004cf2:	dd9c      	ble.n	8004c2e <__sflush_r+0x1a>
 8004cf4:	6a21      	ldr	r1, [r4, #32]
 8004cf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004cf8:	4643      	mov	r3, r8
 8004cfa:	463a      	mov	r2, r7
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	47b0      	blx	r6
 8004d00:	2800      	cmp	r0, #0
 8004d02:	dc06      	bgt.n	8004d12 <__sflush_r+0xfe>
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d10:	e78e      	b.n	8004c30 <__sflush_r+0x1c>
 8004d12:	4407      	add	r7, r0
 8004d14:	eba8 0800 	sub.w	r8, r8, r0
 8004d18:	e7e9      	b.n	8004cee <__sflush_r+0xda>
 8004d1a:	bf00      	nop
 8004d1c:	dfbffffe 	.word	0xdfbffffe

08004d20 <_fflush_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	690b      	ldr	r3, [r1, #16]
 8004d24:	4605      	mov	r5, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	b913      	cbnz	r3, 8004d30 <_fflush_r+0x10>
 8004d2a:	2500      	movs	r5, #0
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	b118      	cbz	r0, 8004d3a <_fflush_r+0x1a>
 8004d32:	6a03      	ldr	r3, [r0, #32]
 8004d34:	b90b      	cbnz	r3, 8004d3a <_fflush_r+0x1a>
 8004d36:	f7ff f99b 	bl	8004070 <__sinit>
 8004d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f3      	beq.n	8004d2a <_fflush_r+0xa>
 8004d42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d44:	07d0      	lsls	r0, r2, #31
 8004d46:	d404      	bmi.n	8004d52 <_fflush_r+0x32>
 8004d48:	0599      	lsls	r1, r3, #22
 8004d4a:	d402      	bmi.n	8004d52 <_fflush_r+0x32>
 8004d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d4e:	f7ff fb84 	bl	800445a <__retarget_lock_acquire_recursive>
 8004d52:	4628      	mov	r0, r5
 8004d54:	4621      	mov	r1, r4
 8004d56:	f7ff ff5d 	bl	8004c14 <__sflush_r>
 8004d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d5c:	07da      	lsls	r2, r3, #31
 8004d5e:	4605      	mov	r5, r0
 8004d60:	d4e4      	bmi.n	8004d2c <_fflush_r+0xc>
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	059b      	lsls	r3, r3, #22
 8004d66:	d4e1      	bmi.n	8004d2c <_fflush_r+0xc>
 8004d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d6a:	f7ff fb77 	bl	800445c <__retarget_lock_release_recursive>
 8004d6e:	e7dd      	b.n	8004d2c <_fflush_r+0xc>

08004d70 <__swhatbuf_r>:
 8004d70:	b570      	push	{r4, r5, r6, lr}
 8004d72:	460c      	mov	r4, r1
 8004d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d78:	2900      	cmp	r1, #0
 8004d7a:	b096      	sub	sp, #88	; 0x58
 8004d7c:	4615      	mov	r5, r2
 8004d7e:	461e      	mov	r6, r3
 8004d80:	da0d      	bge.n	8004d9e <__swhatbuf_r+0x2e>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d88:	f04f 0100 	mov.w	r1, #0
 8004d8c:	bf0c      	ite	eq
 8004d8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004d92:	2340      	movne	r3, #64	; 0x40
 8004d94:	2000      	movs	r0, #0
 8004d96:	6031      	str	r1, [r6, #0]
 8004d98:	602b      	str	r3, [r5, #0]
 8004d9a:	b016      	add	sp, #88	; 0x58
 8004d9c:	bd70      	pop	{r4, r5, r6, pc}
 8004d9e:	466a      	mov	r2, sp
 8004da0:	f000 f848 	bl	8004e34 <_fstat_r>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	dbec      	blt.n	8004d82 <__swhatbuf_r+0x12>
 8004da8:	9901      	ldr	r1, [sp, #4]
 8004daa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004dae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004db2:	4259      	negs	r1, r3
 8004db4:	4159      	adcs	r1, r3
 8004db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dba:	e7eb      	b.n	8004d94 <__swhatbuf_r+0x24>

08004dbc <__smakebuf_r>:
 8004dbc:	898b      	ldrh	r3, [r1, #12]
 8004dbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004dc0:	079d      	lsls	r5, r3, #30
 8004dc2:	4606      	mov	r6, r0
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	d507      	bpl.n	8004dd8 <__smakebuf_r+0x1c>
 8004dc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	6123      	str	r3, [r4, #16]
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	6163      	str	r3, [r4, #20]
 8004dd4:	b002      	add	sp, #8
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}
 8004dd8:	ab01      	add	r3, sp, #4
 8004dda:	466a      	mov	r2, sp
 8004ddc:	f7ff ffc8 	bl	8004d70 <__swhatbuf_r>
 8004de0:	9900      	ldr	r1, [sp, #0]
 8004de2:	4605      	mov	r5, r0
 8004de4:	4630      	mov	r0, r6
 8004de6:	f7ff fbb5 	bl	8004554 <_malloc_r>
 8004dea:	b948      	cbnz	r0, 8004e00 <__smakebuf_r+0x44>
 8004dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004df0:	059a      	lsls	r2, r3, #22
 8004df2:	d4ef      	bmi.n	8004dd4 <__smakebuf_r+0x18>
 8004df4:	f023 0303 	bic.w	r3, r3, #3
 8004df8:	f043 0302 	orr.w	r3, r3, #2
 8004dfc:	81a3      	strh	r3, [r4, #12]
 8004dfe:	e7e3      	b.n	8004dc8 <__smakebuf_r+0xc>
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	6020      	str	r0, [r4, #0]
 8004e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e08:	81a3      	strh	r3, [r4, #12]
 8004e0a:	9b00      	ldr	r3, [sp, #0]
 8004e0c:	6163      	str	r3, [r4, #20]
 8004e0e:	9b01      	ldr	r3, [sp, #4]
 8004e10:	6120      	str	r0, [r4, #16]
 8004e12:	b15b      	cbz	r3, 8004e2c <__smakebuf_r+0x70>
 8004e14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f000 f81d 	bl	8004e58 <_isatty_r>
 8004e1e:	b128      	cbz	r0, 8004e2c <__smakebuf_r+0x70>
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	81a3      	strh	r3, [r4, #12]
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	431d      	orrs	r5, r3
 8004e30:	81a5      	strh	r5, [r4, #12]
 8004e32:	e7cf      	b.n	8004dd4 <__smakebuf_r+0x18>

08004e34 <_fstat_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4d07      	ldr	r5, [pc, #28]	; (8004e54 <_fstat_r+0x20>)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	4611      	mov	r1, r2
 8004e40:	602b      	str	r3, [r5, #0]
 8004e42:	f7fd fbac 	bl	800259e <_fstat>
 8004e46:	1c43      	adds	r3, r0, #1
 8004e48:	d102      	bne.n	8004e50 <_fstat_r+0x1c>
 8004e4a:	682b      	ldr	r3, [r5, #0]
 8004e4c:	b103      	cbz	r3, 8004e50 <_fstat_r+0x1c>
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	bd38      	pop	{r3, r4, r5, pc}
 8004e52:	bf00      	nop
 8004e54:	20012ff8 	.word	0x20012ff8

08004e58 <_isatty_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4d06      	ldr	r5, [pc, #24]	; (8004e74 <_isatty_r+0x1c>)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	4604      	mov	r4, r0
 8004e60:	4608      	mov	r0, r1
 8004e62:	602b      	str	r3, [r5, #0]
 8004e64:	f7fd fbab 	bl	80025be <_isatty>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d102      	bne.n	8004e72 <_isatty_r+0x1a>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	b103      	cbz	r3, 8004e72 <_isatty_r+0x1a>
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	20012ff8 	.word	0x20012ff8

08004e78 <_sbrk_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d06      	ldr	r5, [pc, #24]	; (8004e94 <_sbrk_r+0x1c>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fd fbb4 	bl	80025f0 <_sbrk>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_sbrk_r+0x1a>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_sbrk_r+0x1a>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	20012ff8 	.word	0x20012ff8

08004e98 <_init>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr

08004ea4 <_fini>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	bf00      	nop
 8004ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eaa:	bc08      	pop	{r3}
 8004eac:	469e      	mov	lr, r3
 8004eae:	4770      	bx	lr
