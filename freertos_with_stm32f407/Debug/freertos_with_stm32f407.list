
freertos_with_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eac  08003eac  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003eac  08003eac  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eac  08003eac  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020030  2**0
                  CONTENTS
 10 .bss          00012e4c  20000030  20000030  00020030  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e7c  20012e7c  00020030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009787  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bb9  00000000  00000000  0002982a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a38  00000000  00000000  0002b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000798  00000000  00000000  0002be20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001e44  00000000  00000000  0002c5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009159  00000000  00000000  0002e3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000146a3  00000000  00000000  00037555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000028c4  00000000  00000000  0004bbf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  0004e4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000030 	.word	0x20000030
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e48 	.word	0x08003e48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000034 	.word	0x20000034
 80001cc:	08003e48 	.word	0x08003e48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f103 0208 	add.w	r2, r3, #8
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80001f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f103 0208 	add.w	r2, r3, #8
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f103 0208 	add.w	r2, r3, #8
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800023a:	b480      	push	{r7}
 800023c:	b085      	sub	sp, #20
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000250:	d103      	bne.n	800025a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	691b      	ldr	r3, [r3, #16]
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	e00c      	b.n	8000274 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	3308      	adds	r3, #8
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	e002      	b.n	8000268 <vListInsert+0x2e>
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	68ba      	ldr	r2, [r7, #8]
 8000270:	429a      	cmp	r2, r3
 8000272:	d2f6      	bcs.n	8000262 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	685a      	ldr	r2, [r3, #4]
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	683a      	ldr	r2, [r7, #0]
 8000282:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	1c5a      	adds	r2, r3, #1
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	601a      	str	r2, [r3, #0]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	6892      	ldr	r2, [r2, #8]
 80002c2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	6852      	ldr	r2, [r2, #4]
 80002cc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d103      	bne.n	80002e0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	689a      	ldr	r2, [r3, #8]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	1e5a      	subs	r2, r3, #1
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	681b      	ldr	r3, [r3, #0]
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800030a:	2301      	movs	r3, #1
 800030c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d10a      	bne.n	800032e <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800031c:	f383 8811 	msr	BASEPRI, r3
 8000320:	f3bf 8f6f 	isb	sy
 8000324:	f3bf 8f4f 	dsb	sy
 8000328:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800032a:	bf00      	nop
 800032c:	e7fe      	b.n	800032c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800032e:	693b      	ldr	r3, [r7, #16]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d05d      	beq.n	80003f0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000334:	693b      	ldr	r3, [r7, #16]
 8000336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000338:	2b00      	cmp	r3, #0
 800033a:	d059      	beq.n	80003f0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800033c:	693b      	ldr	r3, [r7, #16]
 800033e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000344:	2100      	movs	r1, #0
 8000346:	fba3 2302 	umull	r2, r3, r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	d000      	beq.n	8000350 <xQueueGenericReset+0x50>
 800034e:	2101      	movs	r1, #1
 8000350:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000352:	2b00      	cmp	r3, #0
 8000354:	d14c      	bne.n	80003f0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000356:	f001 fe3f 	bl	8001fd8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000362:	6939      	ldr	r1, [r7, #16]
 8000364:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000366:	fb01 f303 	mul.w	r3, r1, r3
 800036a:	441a      	add	r2, r3
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	2200      	movs	r2, #0
 8000374:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000376:	693b      	ldr	r3, [r7, #16]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	693b      	ldr	r3, [r7, #16]
 8000384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000386:	3b01      	subs	r3, #1
 8000388:	6939      	ldr	r1, [r7, #16]
 800038a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800038c:	fb01 f303 	mul.w	r3, r1, r3
 8000390:	441a      	add	r2, r3
 8000392:	693b      	ldr	r3, [r7, #16]
 8000394:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000396:	693b      	ldr	r3, [r7, #16]
 8000398:	22ff      	movs	r2, #255	; 0xff
 800039a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	22ff      	movs	r2, #255	; 0xff
 80003a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d114      	bne.n	80003d6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	691b      	ldr	r3, [r3, #16]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d01a      	beq.n	80003ea <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003b4:	693b      	ldr	r3, [r7, #16]
 80003b6:	3310      	adds	r3, #16
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 ffaf 	bl	800131c <xTaskRemoveFromEventList>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d012      	beq.n	80003ea <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80003c4:	4b15      	ldr	r3, [pc, #84]	; (800041c <xQueueGenericReset+0x11c>)
 80003c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	f3bf 8f4f 	dsb	sy
 80003d0:	f3bf 8f6f 	isb	sy
 80003d4:	e009      	b.n	80003ea <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	3310      	adds	r3, #16
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ff00 	bl	80001e0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	3324      	adds	r3, #36	; 0x24
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff fefb 	bl	80001e0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80003ea:	f001 fe25 	bl	8002038 <vPortExitCritical>
 80003ee:	e001      	b.n	80003f4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d10a      	bne.n	8000410 <xQueueGenericReset+0x110>
        __asm volatile
 80003fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003fe:	f383 8811 	msr	BASEPRI, r3
 8000402:	f3bf 8f6f 	isb	sy
 8000406:	f3bf 8f4f 	dsb	sy
 800040a:	60bb      	str	r3, [r7, #8]
    }
 800040c:	bf00      	nop
 800040e:	e7fe      	b.n	800040e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000410:	697b      	ldr	r3, [r7, #20]
}
 8000412:	4618      	mov	r0, r3
 8000414:	3718      	adds	r7, #24
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	e000ed04 	.word	0xe000ed04

08000420 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	; 0x28
 8000424:	af02      	add	r7, sp, #8
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	4613      	mov	r3, r2
 800042c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d02e      	beq.n	8000496 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000438:	2100      	movs	r1, #0
 800043a:	68ba      	ldr	r2, [r7, #8]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	fba3 2302 	umull	r2, r3, r3, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	d000      	beq.n	8000448 <xQueueGenericCreate+0x28>
 8000446:	2101      	movs	r1, #1
 8000448:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800044a:	2b00      	cmp	r3, #0
 800044c:	d123      	bne.n	8000496 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	68ba      	ldr	r2, [r7, #8]
 8000452:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000456:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800045a:	d81c      	bhi.n	8000496 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	68ba      	ldr	r2, [r7, #8]
 8000460:	fb02 f303 	mul.w	r3, r2, r3
 8000464:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	3350      	adds	r3, #80	; 0x50
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fe8c 	bl	8002188 <pvPortMalloc>
 8000470:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d01c      	beq.n	80004b2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	3350      	adds	r3, #80	; 0x50
 8000480:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000482:	79fa      	ldrb	r2, [r7, #7]
 8000484:	69fb      	ldr	r3, [r7, #28]
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	4613      	mov	r3, r2
 800048a:	697a      	ldr	r2, [r7, #20]
 800048c:	68b9      	ldr	r1, [r7, #8]
 800048e:	68f8      	ldr	r0, [r7, #12]
 8000490:	f000 f814 	bl	80004bc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000494:	e00d      	b.n	80004b2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d10a      	bne.n	80004b2 <xQueueGenericCreate+0x92>
        __asm volatile
 800049c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004a0:	f383 8811 	msr	BASEPRI, r3
 80004a4:	f3bf 8f6f 	isb	sy
 80004a8:	f3bf 8f4f 	dsb	sy
 80004ac:	613b      	str	r3, [r7, #16]
    }
 80004ae:	bf00      	nop
 80004b0:	e7fe      	b.n	80004b0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80004b2:	69fb      	ldr	r3, [r7, #28]
    }
 80004b4:	4618      	mov	r0, r3
 80004b6:	3720      	adds	r7, #32
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
 80004c8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d103      	bne.n	80004d8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80004d0:	69bb      	ldr	r3, [r7, #24]
 80004d2:	69ba      	ldr	r2, [r7, #24]
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	e002      	b.n	80004de <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80004d8:	69bb      	ldr	r3, [r7, #24]
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80004de:	69bb      	ldr	r3, [r7, #24]
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80004e4:	69bb      	ldr	r3, [r7, #24]
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80004ea:	2101      	movs	r1, #1
 80004ec:	69b8      	ldr	r0, [r7, #24]
 80004ee:	f7ff ff07 	bl	8000300 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80004f2:	69bb      	ldr	r3, [r7, #24]
 80004f4:	78fa      	ldrb	r2, [r7, #3]
 80004f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80004fa:	bf00      	nop
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08c      	sub	sp, #48	; 0x30
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000510:	2300      	movs	r3, #0
 8000512:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800051a:	2b00      	cmp	r3, #0
 800051c:	d10a      	bne.n	8000534 <xQueueReceive+0x30>
        __asm volatile
 800051e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000522:	f383 8811 	msr	BASEPRI, r3
 8000526:	f3bf 8f6f 	isb	sy
 800052a:	f3bf 8f4f 	dsb	sy
 800052e:	623b      	str	r3, [r7, #32]
    }
 8000530:	bf00      	nop
 8000532:	e7fe      	b.n	8000532 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d103      	bne.n	8000542 <xQueueReceive+0x3e>
 800053a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800053c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053e:	2b00      	cmp	r3, #0
 8000540:	d101      	bne.n	8000546 <xQueueReceive+0x42>
 8000542:	2301      	movs	r3, #1
 8000544:	e000      	b.n	8000548 <xQueueReceive+0x44>
 8000546:	2300      	movs	r3, #0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d10a      	bne.n	8000562 <xQueueReceive+0x5e>
        __asm volatile
 800054c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000550:	f383 8811 	msr	BASEPRI, r3
 8000554:	f3bf 8f6f 	isb	sy
 8000558:	f3bf 8f4f 	dsb	sy
 800055c:	61fb      	str	r3, [r7, #28]
    }
 800055e:	bf00      	nop
 8000560:	e7fe      	b.n	8000560 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000562:	f001 f8eb 	bl	800173c <xTaskGetSchedulerState>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d102      	bne.n	8000572 <xQueueReceive+0x6e>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d101      	bne.n	8000576 <xQueueReceive+0x72>
 8000572:	2301      	movs	r3, #1
 8000574:	e000      	b.n	8000578 <xQueueReceive+0x74>
 8000576:	2300      	movs	r3, #0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d10a      	bne.n	8000592 <xQueueReceive+0x8e>
        __asm volatile
 800057c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000580:	f383 8811 	msr	BASEPRI, r3
 8000584:	f3bf 8f6f 	isb	sy
 8000588:	f3bf 8f4f 	dsb	sy
 800058c:	61bb      	str	r3, [r7, #24]
    }
 800058e:	bf00      	nop
 8000590:	e7fe      	b.n	8000590 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000592:	f001 fd21 	bl	8001fd8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800059a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d01f      	beq.n	80005e2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80005a2:	68b9      	ldr	r1, [r7, #8]
 80005a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80005a6:	f000 f88d 	bl	80006c4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	1e5a      	subs	r2, r3, #1
 80005ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005b0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d00f      	beq.n	80005da <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005bc:	3310      	adds	r3, #16
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 feac 	bl	800131c <xTaskRemoveFromEventList>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d007      	beq.n	80005da <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80005ca:	4b3d      	ldr	r3, [pc, #244]	; (80006c0 <xQueueReceive+0x1bc>)
 80005cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	f3bf 8f4f 	dsb	sy
 80005d6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80005da:	f001 fd2d 	bl	8002038 <vPortExitCritical>
                return pdPASS;
 80005de:	2301      	movs	r3, #1
 80005e0:	e069      	b.n	80006b6 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d103      	bne.n	80005f0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80005e8:	f001 fd26 	bl	8002038 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80005ec:	2300      	movs	r3, #0
 80005ee:	e062      	b.n	80006b6 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80005f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d106      	bne.n	8000604 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 ff64 	bl	80014c8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000604:	f001 fd18 	bl	8002038 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000608:	f000 fb6e 	bl	8000ce8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800060c:	f001 fce4 	bl	8001fd8 <vPortEnterCritical>
 8000610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000616:	b25b      	sxtb	r3, r3
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800061c:	d103      	bne.n	8000626 <xQueueReceive+0x122>
 800061e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800062c:	b25b      	sxtb	r3, r3
 800062e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000632:	d103      	bne.n	800063c <xQueueReceive+0x138>
 8000634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800063c:	f001 fcfc 	bl	8002038 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000640:	1d3a      	adds	r2, r7, #4
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f000 ff53 	bl	80014f4 <xTaskCheckForTimeOut>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d123      	bne.n	800069c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000656:	f000 f8ad 	bl	80007b4 <prvIsQueueEmpty>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d017      	beq.n	8000690 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000662:	3324      	adds	r3, #36	; 0x24
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	4611      	mov	r1, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fded 	bl	8001248 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800066e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000670:	f000 f84e 	bl	8000710 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000674:	f000 fb46 	bl	8000d04 <xTaskResumeAll>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d189      	bne.n	8000592 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <xQueueReceive+0x1bc>)
 8000680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	f3bf 8f6f 	isb	sy
 800068e:	e780      	b.n	8000592 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000692:	f000 f83d 	bl	8000710 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000696:	f000 fb35 	bl	8000d04 <xTaskResumeAll>
 800069a:	e77a      	b.n	8000592 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800069c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800069e:	f000 f837 	bl	8000710 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006a2:	f000 fb2f 	bl	8000d04 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80006a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006a8:	f000 f884 	bl	80007b4 <prvIsQueueEmpty>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	f43f af6f 	beq.w	8000592 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80006b4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3730      	adds	r7, #48	; 0x30
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	e000ed04 	.word	0xe000ed04

080006c4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d018      	beq.n	8000708 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68da      	ldr	r2, [r3, #12]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	441a      	add	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	68da      	ldr	r2, [r3, #12]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d303      	bcc.n	80006f8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	68d9      	ldr	r1, [r3, #12]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	461a      	mov	r2, r3
 8000702:	6838      	ldr	r0, [r7, #0]
 8000704:	f003 fb92 	bl	8003e2c <memcpy>
    }
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000718:	f001 fc5e 	bl	8001fd8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000722:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000724:	e011      	b.n	800074a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072a:	2b00      	cmp	r3, #0
 800072c:	d012      	beq.n	8000754 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3324      	adds	r3, #36	; 0x24
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fdf2 	bl	800131c <xTaskRemoveFromEventList>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800073e:	f000 ff3f 	bl	80015c0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	3b01      	subs	r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800074a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074e:	2b00      	cmp	r3, #0
 8000750:	dce9      	bgt.n	8000726 <prvUnlockQueue+0x16>
 8000752:	e000      	b.n	8000756 <prvUnlockQueue+0x46>
                        break;
 8000754:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800075e:	f001 fc6b 	bl	8002038 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000762:	f001 fc39 	bl	8001fd8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800076c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800076e:	e011      	b.n	8000794 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d012      	beq.n	800079e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3310      	adds	r3, #16
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fdcd 	bl	800131c <xTaskRemoveFromEventList>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000788:	f000 ff1a 	bl	80015c0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	3b01      	subs	r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000798:	2b00      	cmp	r3, #0
 800079a:	dce9      	bgt.n	8000770 <prvUnlockQueue+0x60>
 800079c:	e000      	b.n	80007a0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800079e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	22ff      	movs	r2, #255	; 0xff
 80007a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80007a8:	f001 fc46 	bl	8002038 <vPortExitCritical>
}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80007bc:	f001 fc0c 	bl	8001fd8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80007c8:	2301      	movs	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e001      	b.n	80007d2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80007d2:	f001 fc31 	bl	8002038 <vPortExitCritical>

    return xReturn;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80007e0:	b480      	push	{r7}
 80007e2:	b087      	sub	sp, #28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d10a      	bne.n	8000806 <vQueueAddToRegistry+0x26>
        __asm volatile
 80007f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f4:	f383 8811 	msr	BASEPRI, r3
 80007f8:	f3bf 8f6f 	isb	sy
 80007fc:	f3bf 8f4f 	dsb	sy
 8000800:	60fb      	str	r3, [r7, #12]
    }
 8000802:	bf00      	nop
 8000804:	e7fe      	b.n	8000804 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d024      	beq.n	800085a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	e01e      	b.n	8000854 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <vQueueAddToRegistry+0x98>)
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	4413      	add	r3, r2
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	429a      	cmp	r2, r3
 8000824:	d105      	bne.n	8000832 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	4a13      	ldr	r2, [pc, #76]	; (8000878 <vQueueAddToRegistry+0x98>)
 800082c:	4413      	add	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
                    break;
 8000830:	e013      	b.n	800085a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d10a      	bne.n	800084e <vQueueAddToRegistry+0x6e>
 8000838:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <vQueueAddToRegistry+0x98>)
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d104      	bne.n	800084e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <vQueueAddToRegistry+0x98>)
 800084a:	4413      	add	r3, r2
 800084c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	3301      	adds	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b07      	cmp	r3, #7
 8000858:	d9dd      	bls.n	8000816 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d005      	beq.n	800086c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800086c:	bf00      	nop
 800086e:	371c      	adds	r7, #28
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	2000004c 	.word	0x2000004c

0800087c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800088c:	f001 fba4 	bl	8001fd8 <vPortEnterCritical>
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000896:	b25b      	sxtb	r3, r3
 8000898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800089c:	d103      	bne.n	80008a6 <vQueueWaitForMessageRestricted+0x2a>
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008b2:	d103      	bne.n	80008bc <vQueueWaitForMessageRestricted+0x40>
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80008bc:	f001 fbbc 	bl	8002038 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d106      	bne.n	80008d6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3324      	adds	r3, #36	; 0x24
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fcdd 	bl	8001290 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80008d6:	6978      	ldr	r0, [r7, #20]
 80008d8:	f7ff ff1a 	bl	8000710 <prvUnlockQueue>
    }
 80008dc:	bf00      	nop
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af04      	add	r7, sp, #16
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4613      	mov	r3, r2
 80008f2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80008f4:	88fb      	ldrh	r3, [r7, #6]
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 fc45 	bl	8002188 <pvPortMalloc>
 80008fe:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d00e      	beq.n	8000924 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000906:	2058      	movs	r0, #88	; 0x58
 8000908:	f001 fc3e 	bl	8002188 <pvPortMalloc>
 800090c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d003      	beq.n	800091c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
 800091a:	e005      	b.n	8000928 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800091c:	6978      	ldr	r0, [r7, #20]
 800091e:	f001 fc87 	bl	8002230 <vPortFree>
 8000922:	e001      	b.n	8000928 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d013      	beq.n	8000956 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800092e:	88fa      	ldrh	r2, [r7, #6]
 8000930:	2300      	movs	r3, #0
 8000932:	9303      	str	r3, [sp, #12]
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	9302      	str	r3, [sp, #8]
 8000938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68b9      	ldr	r1, [r7, #8]
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f000 f80e 	bl	8000966 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800094a:	69f8      	ldr	r0, [r7, #28]
 800094c:	f000 f8b0 	bl	8000ab0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000950:	2301      	movs	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	e002      	b.n	800095c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800095a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800095c:	69bb      	ldr	r3, [r7, #24]
    }
 800095e:	4618      	mov	r0, r3
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b088      	sub	sp, #32
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000976:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	461a      	mov	r2, r3
 800097e:	21a5      	movs	r1, #165	; 0xa5
 8000980:	f003 fa28 	bl	8003dd4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800098e:	3b01      	subs	r3, #1
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4413      	add	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	f023 0307 	bic.w	r3, r3, #7
 800099c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	f003 0307 	and.w	r3, r3, #7
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d00a      	beq.n	80009be <prvInitialiseNewTask+0x58>
        __asm volatile
 80009a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ac:	f383 8811 	msr	BASEPRI, r3
 80009b0:	f3bf 8f6f 	isb	sy
 80009b4:	f3bf 8f4f 	dsb	sy
 80009b8:	617b      	str	r3, [r7, #20]
    }
 80009ba:	bf00      	nop
 80009bc:	e7fe      	b.n	80009bc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d01f      	beq.n	8000a04 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
 80009c8:	e012      	b.n	80009f0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	4413      	add	r3, r2
 80009d0:	7819      	ldrb	r1, [r3, #0]
 80009d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	4413      	add	r3, r2
 80009d8:	3334      	adds	r3, #52	; 0x34
 80009da:	460a      	mov	r2, r1
 80009dc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	4413      	add	r3, r2
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d006      	beq.n	80009f8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3301      	adds	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	2b09      	cmp	r3, #9
 80009f4:	d9e9      	bls.n	80009ca <prvInitialiseNewTask+0x64>
 80009f6:	e000      	b.n	80009fa <prvInitialiseNewTask+0x94>
            {
                break;
 80009f8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80009fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000a02:	e003      	b.n	8000a0c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d90a      	bls.n	8000a28 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8000a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a16:	f383 8811 	msr	BASEPRI, r3
 8000a1a:	f3bf 8f6f 	isb	sy
 8000a1e:	f3bf 8f4f 	dsb	sy
 8000a22:	613b      	str	r3, [r7, #16]
    }
 8000a24:	bf00      	nop
 8000a26:	e7fe      	b.n	8000a26 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	d901      	bls.n	8000a32 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a3c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a40:	2200      	movs	r2, #0
 8000a42:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a46:	3304      	adds	r3, #4
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbe9 	bl	8000220 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3318      	adds	r3, #24
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fbe4 	bl	8000220 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a5c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a60:	f1c3 0205 	rsb	r2, r3, #5
 8000a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a66:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a70:	3350      	adds	r3, #80	; 0x50
 8000a72:	2204      	movs	r2, #4
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 f9ac 	bl	8003dd4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a7e:	3354      	adds	r3, #84	; 0x54
 8000a80:	2201      	movs	r2, #1
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f003 f9a5 	bl	8003dd4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	68f9      	ldr	r1, [r7, #12]
 8000a8e:	69b8      	ldr	r0, [r7, #24]
 8000a90:	f001 f976 	bl	8001d80 <pxPortInitialiseStack>
 8000a94:	4602      	mov	r2, r0
 8000a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a98:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000aa4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000ab8:	f001 fa8e 	bl	8001fd8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000abc:	4b40      	ldr	r3, [pc, #256]	; (8000bc0 <prvAddNewTaskToReadyList+0x110>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	4a3f      	ldr	r2, [pc, #252]	; (8000bc0 <prvAddNewTaskToReadyList+0x110>)
 8000ac4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000ac6:	4b3f      	ldr	r3, [pc, #252]	; (8000bc4 <prvAddNewTaskToReadyList+0x114>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d109      	bne.n	8000ae2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000ace:	4a3d      	ldr	r2, [pc, #244]	; (8000bc4 <prvAddNewTaskToReadyList+0x114>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ad4:	4b3a      	ldr	r3, [pc, #232]	; (8000bc0 <prvAddNewTaskToReadyList+0x110>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d110      	bne.n	8000afe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000adc:	f000 fd94 	bl	8001608 <prvInitialiseTaskLists>
 8000ae0:	e00d      	b.n	8000afe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000ae2:	4b39      	ldr	r3, [pc, #228]	; (8000bc8 <prvAddNewTaskToReadyList+0x118>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d109      	bne.n	8000afe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000aea:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <prvAddNewTaskToReadyList+0x114>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d802      	bhi.n	8000afe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000af8:	4a32      	ldr	r2, [pc, #200]	; (8000bc4 <prvAddNewTaskToReadyList+0x114>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000afe:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <prvAddNewTaskToReadyList+0x11c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	4a31      	ldr	r2, [pc, #196]	; (8000bcc <prvAddNewTaskToReadyList+0x11c>)
 8000b06:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <prvAddNewTaskToReadyList+0x11c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b14:	2201      	movs	r2, #1
 8000b16:	409a      	lsls	r2, r3
 8000b18:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <prvAddNewTaskToReadyList+0x120>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	4a2c      	ldr	r2, [pc, #176]	; (8000bd0 <prvAddNewTaskToReadyList+0x120>)
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b26:	492b      	ldr	r1, [pc, #172]	; (8000bd4 <prvAddNewTaskToReadyList+0x124>)
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	440b      	add	r3, r1
 8000b32:	3304      	adds	r3, #4
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	3204      	adds	r2, #4
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	1d1a      	adds	r2, r3, #4
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <prvAddNewTaskToReadyList+0x124>)
 8000b66:	441a      	add	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	615a      	str	r2, [r3, #20]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b70:	4918      	ldr	r1, [pc, #96]	; (8000bd4 <prvAddNewTaskToReadyList+0x124>)
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	1c59      	adds	r1, r3, #1
 8000b80:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <prvAddNewTaskToReadyList+0x124>)
 8000b82:	4613      	mov	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4403      	add	r3, r0
 8000b8c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000b8e:	f001 fa53 	bl	8002038 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <prvAddNewTaskToReadyList+0x118>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00e      	beq.n	8000bb8 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <prvAddNewTaskToReadyList+0x114>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <prvAddNewTaskToReadyList+0x128>)
 8000baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	f3bf 8f4f 	dsb	sy
 8000bb4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000164 	.word	0x20000164
 8000bc4:	2000008c 	.word	0x2000008c
 8000bc8:	20000170 	.word	0x20000170
 8000bcc:	20000180 	.word	0x20000180
 8000bd0:	2000016c 	.word	0x2000016c
 8000bd4:	20000090 	.word	0x20000090
 8000bd8:	e000ed04 	.word	0xe000ed04

08000bdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d017      	beq.n	8000c1e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <vTaskDelay+0x60>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00a      	beq.n	8000c0c <vTaskDelay+0x30>
        __asm volatile
 8000bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfa:	f383 8811 	msr	BASEPRI, r3
 8000bfe:	f3bf 8f6f 	isb	sy
 8000c02:	f3bf 8f4f 	dsb	sy
 8000c06:	60bb      	str	r3, [r7, #8]
    }
 8000c08:	bf00      	nop
 8000c0a:	e7fe      	b.n	8000c0a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000c0c:	f000 f86c 	bl	8000ce8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000c10:	2100      	movs	r1, #0
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f000 fdb0 	bl	8001778 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000c18:	f000 f874 	bl	8000d04 <xTaskResumeAll>
 8000c1c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d107      	bne.n	8000c34 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <vTaskDelay+0x64>)
 8000c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	f3bf 8f4f 	dsb	sy
 8000c30:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2000018c 	.word	0x2000018c
 8000c40:	e000ed04 	.word	0xe000ed04

08000c44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <vTaskStartScheduler+0x88>)
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	2300      	movs	r3, #0
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2300      	movs	r3, #0
 8000c54:	2282      	movs	r2, #130	; 0x82
 8000c56:	491e      	ldr	r1, [pc, #120]	; (8000cd0 <vTaskStartScheduler+0x8c>)
 8000c58:	481e      	ldr	r0, [pc, #120]	; (8000cd4 <vTaskStartScheduler+0x90>)
 8000c5a:	f7ff fe43 	bl	80008e4 <xTaskCreate>
 8000c5e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d102      	bne.n	8000c6c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8000c66:	f000 fe07 	bl	8001878 <xTimerCreateTimerTask>
 8000c6a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d116      	bne.n	8000ca0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8000c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c76:	f383 8811 	msr	BASEPRI, r3
 8000c7a:	f3bf 8f6f 	isb	sy
 8000c7e:	f3bf 8f4f 	dsb	sy
 8000c82:	60bb      	str	r3, [r7, #8]
    }
 8000c84:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <vTaskStartScheduler+0x94>)
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c8c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <vTaskStartScheduler+0x98>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <vTaskStartScheduler+0x9c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000c9a:	f001 f8fb 	bl	8001e94 <xPortStartScheduler>
 8000c9e:	e00e      	b.n	8000cbe <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ca6:	d10a      	bne.n	8000cbe <vTaskStartScheduler+0x7a>
        __asm volatile
 8000ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cac:	f383 8811 	msr	BASEPRI, r3
 8000cb0:	f3bf 8f6f 	isb	sy
 8000cb4:	f3bf 8f4f 	dsb	sy
 8000cb8:	607b      	str	r3, [r7, #4]
    }
 8000cba:	bf00      	nop
 8000cbc:	e7fe      	b.n	8000cbc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <vTaskStartScheduler+0xa0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000188 	.word	0x20000188
 8000cd0:	08003e60 	.word	0x08003e60
 8000cd4:	080015d9 	.word	0x080015d9
 8000cd8:	20000184 	.word	0x20000184
 8000cdc:	20000170 	.word	0x20000170
 8000ce0:	20000168 	.word	0x20000168
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <vTaskSuspendAll+0x18>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <vTaskSuspendAll+0x18>)
 8000cf4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	2000018c 	.word	0x2000018c

08000d04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000d12:	4b71      	ldr	r3, [pc, #452]	; (8000ed8 <xTaskResumeAll+0x1d4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10a      	bne.n	8000d30 <xTaskResumeAll+0x2c>
        __asm volatile
 8000d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d1e:	f383 8811 	msr	BASEPRI, r3
 8000d22:	f3bf 8f6f 	isb	sy
 8000d26:	f3bf 8f4f 	dsb	sy
 8000d2a:	607b      	str	r3, [r7, #4]
    }
 8000d2c:	bf00      	nop
 8000d2e:	e7fe      	b.n	8000d2e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000d30:	f001 f952 	bl	8001fd8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000d34:	4b68      	ldr	r3, [pc, #416]	; (8000ed8 <xTaskResumeAll+0x1d4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	4a67      	ldr	r2, [pc, #412]	; (8000ed8 <xTaskResumeAll+0x1d4>)
 8000d3c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d3e:	4b66      	ldr	r3, [pc, #408]	; (8000ed8 <xTaskResumeAll+0x1d4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 80c0 	bne.w	8000ec8 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000d48:	4b64      	ldr	r3, [pc, #400]	; (8000edc <xTaskResumeAll+0x1d8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 80bb 	beq.w	8000ec8 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d52:	e08a      	b.n	8000e6a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d54:	4b62      	ldr	r3, [pc, #392]	; (8000ee0 <xTaskResumeAll+0x1dc>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	6a12      	ldr	r2, [r2, #32]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	6a1b      	ldr	r3, [r3, #32]
 8000d70:	69fa      	ldr	r2, [r7, #28]
 8000d72:	69d2      	ldr	r2, [r2, #28]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d103      	bne.n	8000d8a <xTaskResumeAll+0x86>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	6a1a      	ldr	r2, [r3, #32]
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	1e5a      	subs	r2, r3, #1
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	68d2      	ldr	r2, [r2, #12]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	69fa      	ldr	r2, [r7, #28]
 8000db0:	6892      	ldr	r2, [r2, #8]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	3304      	adds	r3, #4
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d103      	bne.n	8000dc8 <xTaskResumeAll+0xc4>
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	1e5a      	subs	r2, r3, #1
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	2201      	movs	r2, #1
 8000dde:	409a      	lsls	r2, r3
 8000de0:	4b40      	ldr	r3, [pc, #256]	; (8000ee4 <xTaskResumeAll+0x1e0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	4a3f      	ldr	r2, [pc, #252]	; (8000ee4 <xTaskResumeAll+0x1e0>)
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dee:	493e      	ldr	r1, [pc, #248]	; (8000ee8 <xTaskResumeAll+0x1e4>)
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	440b      	add	r3, r1
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	3204      	adds	r2, #4
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	1d1a      	adds	r2, r3, #4
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4a2e      	ldr	r2, [pc, #184]	; (8000ee8 <xTaskResumeAll+0x1e4>)
 8000e2e:	441a      	add	r2, r3
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e38:	492b      	ldr	r1, [pc, #172]	; (8000ee8 <xTaskResumeAll+0x1e4>)
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	1c59      	adds	r1, r3, #1
 8000e48:	4827      	ldr	r0, [pc, #156]	; (8000ee8 <xTaskResumeAll+0x1e4>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4403      	add	r3, r0
 8000e54:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e5a:	4b24      	ldr	r3, [pc, #144]	; (8000eec <xTaskResumeAll+0x1e8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d302      	bcc.n	8000e6a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <xTaskResumeAll+0x1ec>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <xTaskResumeAll+0x1dc>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f47f af70 	bne.w	8000d54 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000e7a:	f000 fc43 	bl	8001704 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <xTaskResumeAll+0x1f0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d010      	beq.n	8000eac <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000e8a:	f000 f847 	bl	8000f1c <xTaskIncrementTick>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <xTaskResumeAll+0x1ec>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f1      	bne.n	8000e8a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <xTaskResumeAll+0x1f0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <xTaskResumeAll+0x1ec>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d009      	beq.n	8000ec8 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <xTaskResumeAll+0x1f4>)
 8000eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	f3bf 8f4f 	dsb	sy
 8000ec4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000ec8:	f001 f8b6 	bl	8002038 <vPortExitCritical>

    return xAlreadyYielded;
 8000ecc:	69bb      	ldr	r3, [r7, #24]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3720      	adds	r7, #32
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000018c 	.word	0x2000018c
 8000edc:	20000164 	.word	0x20000164
 8000ee0:	20000124 	.word	0x20000124
 8000ee4:	2000016c 	.word	0x2000016c
 8000ee8:	20000090 	.word	0x20000090
 8000eec:	2000008c 	.word	0x2000008c
 8000ef0:	20000178 	.word	0x20000178
 8000ef4:	20000174 	.word	0x20000174
 8000ef8:	e000ed04 	.word	0xe000ed04

08000efc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <xTaskGetTickCount+0x1c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000168 	.word	0x20000168

08000f1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f26:	4b7d      	ldr	r3, [pc, #500]	; (800111c <xTaskIncrementTick+0x200>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f040 80ec 	bne.w	8001108 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000f30:	4b7b      	ldr	r3, [pc, #492]	; (8001120 <xTaskIncrementTick+0x204>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000f38:	4a79      	ldr	r2, [pc, #484]	; (8001120 <xTaskIncrementTick+0x204>)
 8000f3a:	6a3b      	ldr	r3, [r7, #32]
 8000f3c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d120      	bne.n	8000f86 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000f44:	4b77      	ldr	r3, [pc, #476]	; (8001124 <xTaskIncrementTick+0x208>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00a      	beq.n	8000f64 <xTaskIncrementTick+0x48>
        __asm volatile
 8000f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f52:	f383 8811 	msr	BASEPRI, r3
 8000f56:	f3bf 8f6f 	isb	sy
 8000f5a:	f3bf 8f4f 	dsb	sy
 8000f5e:	607b      	str	r3, [r7, #4]
    }
 8000f60:	bf00      	nop
 8000f62:	e7fe      	b.n	8000f62 <xTaskIncrementTick+0x46>
 8000f64:	4b6f      	ldr	r3, [pc, #444]	; (8001124 <xTaskIncrementTick+0x208>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	4b6f      	ldr	r3, [pc, #444]	; (8001128 <xTaskIncrementTick+0x20c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a6d      	ldr	r2, [pc, #436]	; (8001124 <xTaskIncrementTick+0x208>)
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	4a6d      	ldr	r2, [pc, #436]	; (8001128 <xTaskIncrementTick+0x20c>)
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b6c      	ldr	r3, [pc, #432]	; (800112c <xTaskIncrementTick+0x210>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4a6b      	ldr	r2, [pc, #428]	; (800112c <xTaskIncrementTick+0x210>)
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	f000 fbbf 	bl	8001704 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000f86:	4b6a      	ldr	r3, [pc, #424]	; (8001130 <xTaskIncrementTick+0x214>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6a3a      	ldr	r2, [r7, #32]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f0c0 80a6 	bcc.w	80010de <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f92:	4b64      	ldr	r3, [pc, #400]	; (8001124 <xTaskIncrementTick+0x208>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d104      	bne.n	8000fa6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f9c:	4b64      	ldr	r3, [pc, #400]	; (8001130 <xTaskIncrementTick+0x214>)
 8000f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fa2:	601a      	str	r2, [r3, #0]
                    break;
 8000fa4:	e09b      	b.n	80010de <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000fa6:	4b5f      	ldr	r3, [pc, #380]	; (8001124 <xTaskIncrementTick+0x208>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000fb6:	6a3a      	ldr	r2, [r7, #32]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d203      	bcs.n	8000fc6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000fbe:	4a5c      	ldr	r2, [pc, #368]	; (8001130 <xTaskIncrementTick+0x214>)
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000fc4:	e08b      	b.n	80010de <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	68d2      	ldr	r2, [r2, #12]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	6892      	ldr	r2, [r2, #8]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d103      	bne.n	8000ff4 <xTaskIncrementTick+0xd8>
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1e5a      	subs	r2, r3, #1
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01e      	beq.n	800104a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	6a12      	ldr	r2, [r2, #32]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	69d2      	ldr	r2, [r2, #28]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	3318      	adds	r3, #24
 800102e:	429a      	cmp	r2, r3
 8001030:	d103      	bne.n	800103a <xTaskIncrementTick+0x11e>
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	6a1a      	ldr	r2, [r3, #32]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	2200      	movs	r2, #0
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	1e5a      	subs	r2, r3, #1
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104e:	2201      	movs	r2, #1
 8001050:	409a      	lsls	r2, r3
 8001052:	4b38      	ldr	r3, [pc, #224]	; (8001134 <xTaskIncrementTick+0x218>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4313      	orrs	r3, r2
 8001058:	4a36      	ldr	r2, [pc, #216]	; (8001134 <xTaskIncrementTick+0x218>)
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001060:	4935      	ldr	r1, [pc, #212]	; (8001138 <xTaskIncrementTick+0x21c>)
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	3304      	adds	r3, #4
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	3204      	adds	r2, #4
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	1d1a      	adds	r2, r3, #4
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4a26      	ldr	r2, [pc, #152]	; (8001138 <xTaskIncrementTick+0x21c>)
 80010a0:	441a      	add	r2, r3
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	615a      	str	r2, [r3, #20]
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010aa:	4923      	ldr	r1, [pc, #140]	; (8001138 <xTaskIncrementTick+0x21c>)
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	1c59      	adds	r1, r3, #1
 80010ba:	481f      	ldr	r0, [pc, #124]	; (8001138 <xTaskIncrementTick+0x21c>)
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4403      	add	r3, r0
 80010c6:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <xTaskIncrementTick+0x220>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	429a      	cmp	r2, r3
 80010d4:	f4ff af5d 	bcc.w	8000f92 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80010d8:	2301      	movs	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010dc:	e759      	b.n	8000f92 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <xTaskIncrementTick+0x220>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e4:	4914      	ldr	r1, [pc, #80]	; (8001138 <xTaskIncrementTick+0x21c>)
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d901      	bls.n	80010fa <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <xTaskIncrementTick+0x224>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d007      	beq.n	8001112 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8001102:	2301      	movs	r3, #1
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
 8001106:	e004      	b.n	8001112 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <xTaskIncrementTick+0x228>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <xTaskIncrementTick+0x228>)
 8001110:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001114:	4618      	mov	r0, r3
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000018c 	.word	0x2000018c
 8001120:	20000168 	.word	0x20000168
 8001124:	2000011c 	.word	0x2000011c
 8001128:	20000120 	.word	0x20000120
 800112c:	2000017c 	.word	0x2000017c
 8001130:	20000184 	.word	0x20000184
 8001134:	2000016c 	.word	0x2000016c
 8001138:	20000090 	.word	0x20000090
 800113c:	2000008c 	.word	0x2000008c
 8001140:	20000178 	.word	0x20000178
 8001144:	20000174 	.word	0x20000174

08001148 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800114e:	4b39      	ldr	r3, [pc, #228]	; (8001234 <vTaskSwitchContext+0xec>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001156:	4b38      	ldr	r3, [pc, #224]	; (8001238 <vTaskSwitchContext+0xf0>)
 8001158:	2201      	movs	r2, #1
 800115a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800115c:	e066      	b.n	800122c <vTaskSwitchContext+0xe4>
        xYieldPending = pdFALSE;
 800115e:	4b36      	ldr	r3, [pc, #216]	; (8001238 <vTaskSwitchContext+0xf0>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8001164:	4b35      	ldr	r3, [pc, #212]	; (800123c <vTaskSwitchContext+0xf4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	429a      	cmp	r2, r3
 800117a:	d111      	bne.n	80011a0 <vTaskSwitchContext+0x58>
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	3304      	adds	r3, #4
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	429a      	cmp	r2, r3
 8001186:	d10b      	bne.n	80011a0 <vTaskSwitchContext+0x58>
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	3308      	adds	r3, #8
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	429a      	cmp	r2, r3
 8001192:	d105      	bne.n	80011a0 <vTaskSwitchContext+0x58>
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	330c      	adds	r3, #12
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	429a      	cmp	r2, r3
 800119e:	d008      	beq.n	80011b2 <vTaskSwitchContext+0x6a>
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <vTaskSwitchContext+0xf4>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <vTaskSwitchContext+0xf4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3334      	adds	r3, #52	; 0x34
 80011aa:	4619      	mov	r1, r3
 80011ac:	4610      	mov	r0, r2
 80011ae:	f001 f9cb 	bl	8002548 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <vTaskSwitchContext+0xf8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	f1c3 031f 	rsb	r3, r3, #31
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	491e      	ldr	r1, [pc, #120]	; (8001244 <vTaskSwitchContext+0xfc>)
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10a      	bne.n	80011f2 <vTaskSwitchContext+0xaa>
        __asm volatile
 80011dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011e0:	f383 8811 	msr	BASEPRI, r3
 80011e4:	f3bf 8f6f 	isb	sy
 80011e8:	f3bf 8f4f 	dsb	sy
 80011ec:	607b      	str	r3, [r7, #4]
    }
 80011ee:	bf00      	nop
 80011f0:	e7fe      	b.n	80011f0 <vTaskSwitchContext+0xa8>
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4a11      	ldr	r2, [pc, #68]	; (8001244 <vTaskSwitchContext+0xfc>)
 80011fe:	4413      	add	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	3308      	adds	r3, #8
 8001214:	429a      	cmp	r2, r3
 8001216:	d104      	bne.n	8001222 <vTaskSwitchContext+0xda>
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <vTaskSwitchContext+0xf4>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000018c 	.word	0x2000018c
 8001238:	20000178 	.word	0x20000178
 800123c:	2000008c 	.word	0x2000008c
 8001240:	2000016c 	.word	0x2000016c
 8001244:	20000090 	.word	0x20000090

08001248 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10a      	bne.n	800126e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800125c:	f383 8811 	msr	BASEPRI, r3
 8001260:	f3bf 8f6f 	isb	sy
 8001264:	f3bf 8f4f 	dsb	sy
 8001268:	60fb      	str	r3, [r7, #12]
    }
 800126a:	bf00      	nop
 800126c:	e7fe      	b.n	800126c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <vTaskPlaceOnEventList+0x44>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3318      	adds	r3, #24
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7fe ffdf 	bl	800023a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800127c:	2101      	movs	r1, #1
 800127e:	6838      	ldr	r0, [r7, #0]
 8001280:	f000 fa7a 	bl	8001778 <prvAddCurrentTaskToDelayedList>
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000008c 	.word	0x2000008c

08001290 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10a      	bne.n	80012b8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80012a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012a6:	f383 8811 	msr	BASEPRI, r3
 80012aa:	f3bf 8f6f 	isb	sy
 80012ae:	f3bf 8f4f 	dsb	sy
 80012b2:	613b      	str	r3, [r7, #16]
    }
 80012b4:	bf00      	nop
 80012b6:	e7fe      	b.n	80012b6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <vTaskPlaceOnEventListRestricted+0x88>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	61da      	str	r2, [r3, #28]
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <vTaskPlaceOnEventListRestricted+0x88>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	6892      	ldr	r2, [r2, #8]
 80012ce:	621a      	str	r2, [r3, #32]
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <vTaskPlaceOnEventListRestricted+0x88>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	3218      	adds	r2, #24
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <vTaskPlaceOnEventListRestricted+0x88>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f103 0218 	add.w	r2, r3, #24
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <vTaskPlaceOnEventListRestricted+0x88>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001304:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f000 fa35 	bl	8001778 <prvAddCurrentTaskToDelayedList>
    }
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000008c 	.word	0x2000008c

0800131c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800131c:	b480      	push	{r7}
 800131e:	b08b      	sub	sp, #44	; 0x2c
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10a      	bne.n	8001348 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001336:	f383 8811 	msr	BASEPRI, r3
 800133a:	f3bf 8f6f 	isb	sy
 800133e:	f3bf 8f4f 	dsb	sy
 8001342:	60fb      	str	r3, [r7, #12]
    }
 8001344:	bf00      	nop
 8001346:	e7fe      	b.n	8001346 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	6a3a      	ldr	r2, [r7, #32]
 8001354:	6a12      	ldr	r2, [r2, #32]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	6a3a      	ldr	r2, [r7, #32]
 800135e:	69d2      	ldr	r2, [r2, #28]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	3318      	adds	r3, #24
 800136a:	429a      	cmp	r2, r3
 800136c:	d103      	bne.n	8001376 <xTaskRemoveFromEventList+0x5a>
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	6a1a      	ldr	r2, [r3, #32]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	2200      	movs	r2, #0
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1e5a      	subs	r2, r3, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001386:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <xTaskRemoveFromEventList+0x194>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d15e      	bne.n	800144c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	6a3a      	ldr	r2, [r7, #32]
 800139a:	68d2      	ldr	r2, [r2, #12]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	6a3a      	ldr	r2, [r7, #32]
 80013a4:	6892      	ldr	r2, [r2, #8]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	3304      	adds	r3, #4
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d103      	bne.n	80013bc <xTaskRemoveFromEventList+0xa0>
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	1e5a      	subs	r2, r3, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	2201      	movs	r2, #1
 80013d2:	409a      	lsls	r2, r3
 80013d4:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <xTaskRemoveFromEventList+0x198>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4313      	orrs	r3, r2
 80013da:	4a36      	ldr	r2, [pc, #216]	; (80014b4 <xTaskRemoveFromEventList+0x198>)
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e2:	4935      	ldr	r1, [pc, #212]	; (80014b8 <xTaskRemoveFromEventList+0x19c>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	3304      	adds	r3, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	6a3a      	ldr	r2, [r7, #32]
 8001408:	3204      	adds	r2, #4
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	6a3b      	ldr	r3, [r7, #32]
 800140e:	1d1a      	adds	r2, r3, #4
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4a25      	ldr	r2, [pc, #148]	; (80014b8 <xTaskRemoveFromEventList+0x19c>)
 8001422:	441a      	add	r2, r3
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	615a      	str	r2, [r3, #20]
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800142c:	4922      	ldr	r1, [pc, #136]	; (80014b8 <xTaskRemoveFromEventList+0x19c>)
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	1c59      	adds	r1, r3, #1
 800143c:	481e      	ldr	r0, [pc, #120]	; (80014b8 <xTaskRemoveFromEventList+0x19c>)
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4403      	add	r3, r0
 8001448:	6019      	str	r1, [r3, #0]
 800144a:	e01b      	b.n	8001484 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <xTaskRemoveFromEventList+0x1a0>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	61da      	str	r2, [r3, #28]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	621a      	str	r2, [r3, #32]
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	6a3a      	ldr	r2, [r7, #32]
 8001466:	3218      	adds	r2, #24
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	f103 0218 	add.w	r2, r3, #24
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	4a11      	ldr	r2, [pc, #68]	; (80014bc <xTaskRemoveFromEventList+0x1a0>)
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <xTaskRemoveFromEventList+0x1a0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <xTaskRemoveFromEventList+0x1a0>)
 8001482:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <xTaskRemoveFromEventList+0x1a4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	429a      	cmp	r2, r3
 8001490:	d905      	bls.n	800149e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001492:	2301      	movs	r3, #1
 8001494:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <xTaskRemoveFromEventList+0x1a8>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e001      	b.n	80014a2 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	372c      	adds	r7, #44	; 0x2c
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	2000018c 	.word	0x2000018c
 80014b4:	2000016c 	.word	0x2000016c
 80014b8:	20000090 	.word	0x20000090
 80014bc:	20000124 	.word	0x20000124
 80014c0:	2000008c 	.word	0x2000008c
 80014c4:	20000178 	.word	0x20000178

080014c8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <vTaskInternalSetTimeOutState+0x24>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <vTaskInternalSetTimeOutState+0x28>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	605a      	str	r2, [r3, #4]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	2000017c 	.word	0x2000017c
 80014f0:	20000168 	.word	0x20000168

080014f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10a      	bne.n	800151a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001508:	f383 8811 	msr	BASEPRI, r3
 800150c:	f3bf 8f6f 	isb	sy
 8001510:	f3bf 8f4f 	dsb	sy
 8001514:	613b      	str	r3, [r7, #16]
    }
 8001516:	bf00      	nop
 8001518:	e7fe      	b.n	8001518 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10a      	bne.n	8001536 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001524:	f383 8811 	msr	BASEPRI, r3
 8001528:	f3bf 8f6f 	isb	sy
 800152c:	f3bf 8f4f 	dsb	sy
 8001530:	60fb      	str	r3, [r7, #12]
    }
 8001532:	bf00      	nop
 8001534:	e7fe      	b.n	8001534 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001536:	f000 fd4f 	bl	8001fd8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <xTaskCheckForTimeOut+0xc4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001552:	d102      	bne.n	800155a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	e026      	b.n	80015a8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <xTaskCheckForTimeOut+0xc8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d00a      	beq.n	800157c <xTaskCheckForTimeOut+0x88>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	429a      	cmp	r2, r3
 800156e:	d305      	bcc.n	800157c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001570:	2301      	movs	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e015      	b.n	80015a8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	429a      	cmp	r2, r3
 8001584:	d20b      	bcs.n	800159e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	1ad2      	subs	r2, r2, r3
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff98 	bl	80014c8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	e004      	b.n	80015a8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80015a8:	f000 fd46 	bl	8002038 <vPortExitCritical>

    return xReturn;
 80015ac:	69fb      	ldr	r3, [r7, #28]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000168 	.word	0x20000168
 80015bc:	2000017c 	.word	0x2000017c

080015c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <vTaskMissedYield+0x14>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	20000178 	.word	0x20000178

080015d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80015e0:	f000 f852 	bl	8001688 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <prvIdleTask+0x28>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d9f9      	bls.n	80015e0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <prvIdleTask+0x2c>)
 80015ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	f3bf 8f4f 	dsb	sy
 80015f8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80015fc:	e7f0      	b.n	80015e0 <prvIdleTask+0x8>
 80015fe:	bf00      	nop
 8001600:	20000090 	.word	0x20000090
 8001604:	e000ed04 	.word	0xe000ed04

08001608 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	e00c      	b.n	800162e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <prvInitialiseTaskLists+0x60>)
 8001620:	4413      	add	r3, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe fddc 	bl	80001e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3301      	adds	r3, #1
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d9ef      	bls.n	8001614 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <prvInitialiseTaskLists+0x64>)
 8001636:	f7fe fdd3 	bl	80001e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <prvInitialiseTaskLists+0x68>)
 800163c:	f7fe fdd0 	bl	80001e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <prvInitialiseTaskLists+0x6c>)
 8001642:	f7fe fdcd 	bl	80001e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001646:	480c      	ldr	r0, [pc, #48]	; (8001678 <prvInitialiseTaskLists+0x70>)
 8001648:	f7fe fdca 	bl	80001e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <prvInitialiseTaskLists+0x74>)
 800164e:	f7fe fdc7 	bl	80001e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <prvInitialiseTaskLists+0x78>)
 8001654:	4a05      	ldr	r2, [pc, #20]	; (800166c <prvInitialiseTaskLists+0x64>)
 8001656:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <prvInitialiseTaskLists+0x7c>)
 800165a:	4a05      	ldr	r2, [pc, #20]	; (8001670 <prvInitialiseTaskLists+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000090 	.word	0x20000090
 800166c:	200000f4 	.word	0x200000f4
 8001670:	20000108 	.word	0x20000108
 8001674:	20000124 	.word	0x20000124
 8001678:	20000138 	.word	0x20000138
 800167c:	20000150 	.word	0x20000150
 8001680:	2000011c 	.word	0x2000011c
 8001684:	20000120 	.word	0x20000120

08001688 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800168e:	e019      	b.n	80016c4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001690:	f000 fca2 	bl	8001fd8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <prvCheckTasksWaitingTermination+0x50>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3304      	adds	r3, #4
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fe03 	bl	80002ac <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <prvCheckTasksWaitingTermination+0x54>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <prvCheckTasksWaitingTermination+0x54>)
 80016ae:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <prvCheckTasksWaitingTermination+0x58>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <prvCheckTasksWaitingTermination+0x58>)
 80016b8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80016ba:	f000 fcbd 	bl	8002038 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f810 	bl	80016e4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <prvCheckTasksWaitingTermination+0x58>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1e1      	bne.n	8001690 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000138 	.word	0x20000138
 80016dc:	20000164 	.word	0x20000164
 80016e0:	2000014c 	.word	0x2000014c

080016e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fd9d 	bl	8002230 <vPortFree>
                vPortFree( pxTCB );
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fd9a 	bl	8002230 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <prvResetNextTaskUnblockTime+0x30>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d104      	bne.n	800171c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <prvResetNextTaskUnblockTime+0x34>)
 8001714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001718:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800171a:	e005      	b.n	8001728 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <prvResetNextTaskUnblockTime+0x30>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <prvResetNextTaskUnblockTime+0x34>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000011c 	.word	0x2000011c
 8001738:	20000184 	.word	0x20000184

0800173c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <xTaskGetSchedulerState+0x34>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800174a:	2301      	movs	r3, #1
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	e008      	b.n	8001762 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <xTaskGetSchedulerState+0x38>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001758:	2302      	movs	r3, #2
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	e001      	b.n	8001762 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001762:	687b      	ldr	r3, [r7, #4]
    }
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	20000170 	.word	0x20000170
 8001774:	2000018c 	.word	0x2000018c

08001778 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001782:	4b36      	ldr	r3, [pc, #216]	; (800185c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001788:	4b35      	ldr	r3, [pc, #212]	; (8001860 <prvAddCurrentTaskToDelayedList+0xe8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3304      	adds	r3, #4
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fd8c 	bl	80002ac <uxListRemove>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10b      	bne.n	80017b2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800179a:	4b31      	ldr	r3, [pc, #196]	; (8001860 <prvAddCurrentTaskToDelayedList+0xe8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	2201      	movs	r2, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <prvAddCurrentTaskToDelayedList+0xec>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4013      	ands	r3, r2
 80017ae:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <prvAddCurrentTaskToDelayedList+0xec>)
 80017b0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017b8:	d124      	bne.n	8001804 <prvAddCurrentTaskToDelayedList+0x8c>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d021      	beq.n	8001804 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <prvAddCurrentTaskToDelayedList+0xf0>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <prvAddCurrentTaskToDelayedList+0xe8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <prvAddCurrentTaskToDelayedList+0xe8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	6892      	ldr	r2, [r2, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	4b21      	ldr	r3, [pc, #132]	; (8001860 <prvAddCurrentTaskToDelayedList+0xe8>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	3204      	adds	r2, #4
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <prvAddCurrentTaskToDelayedList+0xe8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	1d1a      	adds	r2, r3, #4
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <prvAddCurrentTaskToDelayedList+0xe8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <prvAddCurrentTaskToDelayedList+0xf0>)
 80017f4:	615a      	str	r2, [r3, #20]
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <prvAddCurrentTaskToDelayedList+0xf0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	4a1a      	ldr	r2, [pc, #104]	; (8001868 <prvAddCurrentTaskToDelayedList+0xf0>)
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001802:	e026      	b.n	8001852 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <prvAddCurrentTaskToDelayedList+0xe8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	429a      	cmp	r2, r3
 800181a:	d209      	bcs.n	8001830 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <prvAddCurrentTaskToDelayedList+0xf4>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3304      	adds	r3, #4
 8001826:	4619      	mov	r1, r3
 8001828:	4610      	mov	r0, r2
 800182a:	f7fe fd06 	bl	800023a <vListInsert>
}
 800182e:	e010      	b.n	8001852 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3304      	adds	r3, #4
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f7fe fcfc 	bl	800023a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d202      	bcs.n	8001852 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 800184c:	4a09      	ldr	r2, [pc, #36]	; (8001874 <prvAddCurrentTaskToDelayedList+0xfc>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6013      	str	r3, [r2, #0]
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000168 	.word	0x20000168
 8001860:	2000008c 	.word	0x2000008c
 8001864:	2000016c 	.word	0x2000016c
 8001868:	20000150 	.word	0x20000150
 800186c:	20000120 	.word	0x20000120
 8001870:	2000011c 	.word	0x2000011c
 8001874:	20000184 	.word	0x20000184

08001878 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001882:	f000 fa47 	bl	8001d14 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <xTimerCreateTimerTask+0x54>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <xTimerCreateTimerTask+0x58>)
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	2302      	movs	r3, #2
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2300      	movs	r3, #0
 8001898:	f44f 7282 	mov.w	r2, #260	; 0x104
 800189c:	490d      	ldr	r1, [pc, #52]	; (80018d4 <xTimerCreateTimerTask+0x5c>)
 800189e:	480e      	ldr	r0, [pc, #56]	; (80018d8 <xTimerCreateTimerTask+0x60>)
 80018a0:	f7ff f820 	bl	80008e4 <xTaskCreate>
 80018a4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10a      	bne.n	80018c2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80018ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b0:	f383 8811 	msr	BASEPRI, r3
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	f3bf 8f4f 	dsb	sy
 80018bc:	603b      	str	r3, [r7, #0]
    }
 80018be:	bf00      	nop
 80018c0:	e7fe      	b.n	80018c0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80018c2:	687b      	ldr	r3, [r7, #4]
    }
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200001c0 	.word	0x200001c0
 80018d0:	200001c4 	.word	0x200001c4
 80018d4:	08003e68 	.word	0x08003e68
 80018d8:	08001981 	.word	0x08001981

080018dc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80018e8:	e008      	b.n	80018fc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	4413      	add	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	699a      	ldr	r2, [r3, #24]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	18d1      	adds	r1, r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 f8dd 	bl	8001ac8 <prvInsertTimerInActiveList>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1ea      	bne.n	80018ea <prvReloadTimer+0xe>
        }
    }
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <prvProcessExpiredTimer+0x5c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3304      	adds	r3, #4
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fcb7 	bl	80002ac <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f7ff ffc3 	bl	80018dc <prvReloadTimer>
 8001956:	e008      	b.n	800196a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800195e:	f023 0301 	bic.w	r3, r3, #1
 8001962:	b2da      	uxtb	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	4798      	blx	r3
    }
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200001b8 	.word	0x200001b8

08001980 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001988:	f107 0308 	add.w	r3, r7, #8
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f857 	bl	8001a40 <prvGetNextExpireTime>
 8001992:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4619      	mov	r1, r3
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f803 	bl	80019a4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800199e:	f000 f8d5 	bl	8001b4c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80019a2:	e7f1      	b.n	8001988 <prvTimerTask+0x8>

080019a4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80019ae:	f7ff f99b 	bl	8000ce8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f866 	bl	8001a88 <prvSampleTimeNow>
 80019bc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d130      	bne.n	8001a26 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10a      	bne.n	80019e0 <prvProcessTimerOrBlockTask+0x3c>
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d806      	bhi.n	80019e0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80019d2:	f7ff f997 	bl	8000d04 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80019d6:	68f9      	ldr	r1, [r7, #12]
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ffa1 	bl	8001920 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80019de:	e024      	b.n	8001a2a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d008      	beq.n	80019f8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <prvProcessTimerOrBlockTask+0x90>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <prvProcessTimerOrBlockTask+0x50>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <prvProcessTimerOrBlockTask+0x52>
 80019f4:	2300      	movs	r3, #0
 80019f6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <prvProcessTimerOrBlockTask+0x94>)
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7fe ff39 	bl	800087c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001a0a:	f7ff f97b 	bl	8000d04 <xTaskResumeAll>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <prvProcessTimerOrBlockTask+0x98>)
 8001a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	f3bf 8f6f 	isb	sy
    }
 8001a24:	e001      	b.n	8001a2a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001a26:	f7ff f96d 	bl	8000d04 <xTaskResumeAll>
    }
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200001bc 	.word	0x200001bc
 8001a38:	200001c0 	.word	0x200001c0
 8001a3c:	e000ed04 	.word	0xe000ed04

08001a40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <prvGetNextExpireTime+0x44>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <prvGetNextExpireTime+0x16>
 8001a52:	2201      	movs	r2, #1
 8001a54:	e000      	b.n	8001a58 <prvGetNextExpireTime+0x18>
 8001a56:	2200      	movs	r2, #0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <prvGetNextExpireTime+0x44>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	e001      	b.n	8001a74 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001a74:	68fb      	ldr	r3, [r7, #12]
    }
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	200001b8 	.word	0x200001b8

08001a88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001a90:	f7ff fa34 	bl	8000efc <xTaskGetTickCount>
 8001a94:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <prvSampleTimeNow+0x3c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d205      	bcs.n	8001aac <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001aa0:	f000 f912 	bl	8001cc8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	e002      	b.n	8001ab2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <prvSampleTimeNow+0x3c>)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    }
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200001c8 	.word	0x200001c8

08001ac8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d812      	bhi.n	8001b14 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	1ad2      	subs	r2, r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d302      	bcc.n	8001b02 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e01b      	b.n	8001b3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <prvInsertTimerInActiveList+0x7c>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	f7fe fb94 	bl	800023a <vListInsert>
 8001b12:	e012      	b.n	8001b3a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d206      	bcs.n	8001b2a <prvInsertTimerInActiveList+0x62>
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d302      	bcc.n	8001b2a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001b24:	2301      	movs	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e007      	b.n	8001b3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <prvInsertTimerInActiveList+0x80>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3304      	adds	r3, #4
 8001b32:	4619      	mov	r1, r3
 8001b34:	4610      	mov	r0, r2
 8001b36:	f7fe fb80 	bl	800023a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001b3a:	697b      	ldr	r3, [r7, #20]
    }
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200001bc 	.word	0x200001bc
 8001b48:	200001b8 	.word	0x200001b8

08001b4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001b52:	e0a6      	b.n	8001ca2 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f2c0 80a3 	blt.w	8001ca2 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d004      	beq.n	8001b72 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fb9d 	bl	80002ac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff87 	bl	8001a88 <prvSampleTimeNow>
 8001b7a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	f200 808d 	bhi.w	8001ca0 <prvProcessReceivedCommands+0x154>
 8001b86:	a201      	add	r2, pc, #4	; (adr r2, 8001b8c <prvProcessReceivedCommands+0x40>)
 8001b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8c:	08001bb1 	.word	0x08001bb1
 8001b90:	08001bb1 	.word	0x08001bb1
 8001b94:	08001c19 	.word	0x08001c19
 8001b98:	08001c2d 	.word	0x08001c2d
 8001b9c:	08001c77 	.word	0x08001c77
 8001ba0:	08001bb1 	.word	0x08001bb1
 8001ba4:	08001bb1 	.word	0x08001bb1
 8001ba8:	08001c19 	.word	0x08001c19
 8001bac:	08001c2d 	.word	0x08001c2d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	18d1      	adds	r1, r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	69f8      	ldr	r0, [r7, #28]
 8001bd0:	f7ff ff7a 	bl	8001ac8 <prvInsertTimerInActiveList>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d063      	beq.n	8001ca2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d009      	beq.n	8001bfc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	4413      	add	r3, r2
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	69f8      	ldr	r0, [r7, #28]
 8001bf6:	f7ff fe71 	bl	80018dc <prvReloadTimer>
 8001bfa:	e008      	b.n	8001c0e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	69f8      	ldr	r0, [r7, #28]
 8001c14:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001c16:	e044      	b.n	8001ca2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8001c2a:	e03a      	b.n	8001ca2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10a      	bne.n	8001c62 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8001c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c50:	f383 8811 	msr	BASEPRI, r3
 8001c54:	f3bf 8f6f 	isb	sy
 8001c58:	f3bf 8f4f 	dsb	sy
 8001c5c:	617b      	str	r3, [r7, #20]
    }
 8001c5e:	bf00      	nop
 8001c60:	e7fe      	b.n	8001c60 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	18d1      	adds	r1, r2, r3
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	69f8      	ldr	r0, [r7, #28]
 8001c70:	f7ff ff2a 	bl	8001ac8 <prvInsertTimerInActiveList>
                        break;
 8001c74:	e015      	b.n	8001ca2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d103      	bne.n	8001c8c <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8001c84:	69f8      	ldr	r0, [r7, #28]
 8001c86:	f000 fad3 	bl	8002230 <vPortFree>
 8001c8a:	e00a      	b.n	8001ca2 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001c9e:	e000      	b.n	8001ca2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8001ca0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <prvProcessReceivedCommands+0x178>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f107 0108 	add.w	r1, r7, #8
 8001caa:	2200      	movs	r2, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc29 	bl	8000504 <xQueueReceive>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f47f af4d 	bne.w	8001b54 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8001cba:	bf00      	nop
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200001c0 	.word	0x200001c0

08001cc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001cce:	e009      	b.n	8001ce4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <prvSwitchTimerLists+0x44>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001cda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cde:	6838      	ldr	r0, [r7, #0]
 8001ce0:	f7ff fe1e 	bl	8001920 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <prvSwitchTimerLists+0x44>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <prvSwitchTimerLists+0x44>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <prvSwitchTimerLists+0x48>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <prvSwitchTimerLists+0x44>)
 8001cfa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <prvSwitchTimerLists+0x48>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
    }
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200001b8 	.word	0x200001b8
 8001d10:	200001bc 	.word	0x200001bc

08001d14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001d18:	f000 f95e 	bl	8001fd8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <prvCheckForValidListAndQueue+0x54>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d11d      	bne.n	8001d60 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001d24:	4811      	ldr	r0, [pc, #68]	; (8001d6c <prvCheckForValidListAndQueue+0x58>)
 8001d26:	f7fe fa5b 	bl	80001e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001d2a:	4811      	ldr	r0, [pc, #68]	; (8001d70 <prvCheckForValidListAndQueue+0x5c>)
 8001d2c:	f7fe fa58 	bl	80001e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <prvCheckForValidListAndQueue+0x60>)
 8001d32:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <prvCheckForValidListAndQueue+0x58>)
 8001d34:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <prvCheckForValidListAndQueue+0x64>)
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <prvCheckForValidListAndQueue+0x5c>)
 8001d3a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	210c      	movs	r1, #12
 8001d40:	200a      	movs	r0, #10
 8001d42:	f7fe fb6d 	bl	8000420 <xQueueGenericCreate>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <prvCheckForValidListAndQueue+0x54>)
 8001d4a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <prvCheckForValidListAndQueue+0x54>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <prvCheckForValidListAndQueue+0x54>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4908      	ldr	r1, [pc, #32]	; (8001d7c <prvCheckForValidListAndQueue+0x68>)
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fd40 	bl	80007e0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001d60:	f000 f96a 	bl	8002038 <vPortExitCritical>
    }
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200001c0 	.word	0x200001c0
 8001d6c:	20000190 	.word	0x20000190
 8001d70:	200001a4 	.word	0x200001a4
 8001d74:	200001b8 	.word	0x200001b8
 8001d78:	200001bc 	.word	0x200001bc
 8001d7c:	08003e70 	.word	0x08003e70

08001d80 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d98:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3b04      	subs	r3, #4
 8001d9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f023 0201 	bic.w	r2, r3, #1
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3b04      	subs	r3, #4
 8001dae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001db0:	4a0c      	ldr	r2, [pc, #48]	; (8001de4 <pxPortInitialiseStack+0x64>)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3b14      	subs	r3, #20
 8001dba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3b04      	subs	r3, #4
 8001dc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f06f 0202 	mvn.w	r2, #2
 8001dce:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3b20      	subs	r3, #32
 8001dd4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	08001de9 	.word	0x08001de9

08001de8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <prvTaskExitError+0x54>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dfa:	d00a      	beq.n	8001e12 <prvTaskExitError+0x2a>
        __asm volatile
 8001dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e00:	f383 8811 	msr	BASEPRI, r3
 8001e04:	f3bf 8f6f 	isb	sy
 8001e08:	f3bf 8f4f 	dsb	sy
 8001e0c:	60fb      	str	r3, [r7, #12]
    }
 8001e0e:	bf00      	nop
 8001e10:	e7fe      	b.n	8001e10 <prvTaskExitError+0x28>
        __asm volatile
 8001e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e16:	f383 8811 	msr	BASEPRI, r3
 8001e1a:	f3bf 8f6f 	isb	sy
 8001e1e:	f3bf 8f4f 	dsb	sy
 8001e22:	60bb      	str	r3, [r7, #8]
    }
 8001e24:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001e26:	bf00      	nop
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0fc      	beq.n	8001e28 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001e2e:	bf00      	nop
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	20000004 	.word	0x20000004

08001e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <pxCurrentTCBConst2>)
 8001e42:	6819      	ldr	r1, [r3, #0]
 8001e44:	6808      	ldr	r0, [r1, #0]
 8001e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e4a:	f380 8809 	msr	PSP, r0
 8001e4e:	f3bf 8f6f 	isb	sy
 8001e52:	f04f 0000 	mov.w	r0, #0
 8001e56:	f380 8811 	msr	BASEPRI, r0
 8001e5a:	4770      	bx	lr
 8001e5c:	f3af 8000 	nop.w

08001e60 <pxCurrentTCBConst2>:
 8001e60:	2000008c 	.word	0x2000008c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop

08001e68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001e68:	4808      	ldr	r0, [pc, #32]	; (8001e8c <prvPortStartFirstTask+0x24>)
 8001e6a:	6800      	ldr	r0, [r0, #0]
 8001e6c:	6800      	ldr	r0, [r0, #0]
 8001e6e:	f380 8808 	msr	MSP, r0
 8001e72:	f04f 0000 	mov.w	r0, #0
 8001e76:	f380 8814 	msr	CONTROL, r0
 8001e7a:	b662      	cpsie	i
 8001e7c:	b661      	cpsie	f
 8001e7e:	f3bf 8f4f 	dsb	sy
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	df00      	svc	0
 8001e88:	bf00      	nop
 8001e8a:	0000      	.short	0x0000
 8001e8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop

08001e94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001e9a:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <xPortStartScheduler+0x120>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a46      	ldr	r2, [pc, #280]	; (8001fb8 <xPortStartScheduler+0x124>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d10a      	bne.n	8001eba <xPortStartScheduler+0x26>
        __asm volatile
 8001ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea8:	f383 8811 	msr	BASEPRI, r3
 8001eac:	f3bf 8f6f 	isb	sy
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	613b      	str	r3, [r7, #16]
    }
 8001eb6:	bf00      	nop
 8001eb8:	e7fe      	b.n	8001eb8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001eba:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <xPortStartScheduler+0x120>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a3f      	ldr	r2, [pc, #252]	; (8001fbc <xPortStartScheduler+0x128>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d10a      	bne.n	8001eda <xPortStartScheduler+0x46>
        __asm volatile
 8001ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec8:	f383 8811 	msr	BASEPRI, r3
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	60fb      	str	r3, [r7, #12]
    }
 8001ed6:	bf00      	nop
 8001ed8:	e7fe      	b.n	8001ed8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001eda:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <xPortStartScheduler+0x12c>)
 8001edc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	22ff      	movs	r2, #255	; 0xff
 8001eea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <xPortStartScheduler+0x130>)
 8001f00:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001f02:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <xPortStartScheduler+0x134>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f08:	e009      	b.n	8001f1e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8001f0a:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <xPortStartScheduler+0x134>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	4a2d      	ldr	r2, [pc, #180]	; (8001fc8 <xPortStartScheduler+0x134>)
 8001f12:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	2b80      	cmp	r3, #128	; 0x80
 8001f28:	d0ef      	beq.n	8001f0a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001f2a:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <xPortStartScheduler+0x134>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d00a      	beq.n	8001f4c <xPortStartScheduler+0xb8>
        __asm volatile
 8001f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3a:	f383 8811 	msr	BASEPRI, r3
 8001f3e:	f3bf 8f6f 	isb	sy
 8001f42:	f3bf 8f4f 	dsb	sy
 8001f46:	60bb      	str	r3, [r7, #8]
    }
 8001f48:	bf00      	nop
 8001f4a:	e7fe      	b.n	8001f4a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <xPortStartScheduler+0x134>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <xPortStartScheduler+0x134>)
 8001f54:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001f56:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <xPortStartScheduler+0x134>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f5e:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <xPortStartScheduler+0x134>)
 8001f60:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <xPortStartScheduler+0x138>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <xPortStartScheduler+0x138>)
 8001f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <xPortStartScheduler+0x138>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <xPortStartScheduler+0x138>)
 8001f7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001f80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001f82:	f000 f8db 	bl	800213c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <xPortStartScheduler+0x13c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001f8c:	f000 f8f0 	bl	8002170 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <xPortStartScheduler+0x140>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <xPortStartScheduler+0x140>)
 8001f96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001f9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001f9c:	f7ff ff64 	bl	8001e68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001fa0:	f7ff f8d2 	bl	8001148 <vTaskSwitchContext>
    prvTaskExitError();
 8001fa4:	f7ff ff20 	bl	8001de8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00
 8001fb8:	410fc271 	.word	0x410fc271
 8001fbc:	410fc270 	.word	0x410fc270
 8001fc0:	e000e400 	.word	0xe000e400
 8001fc4:	200001cc 	.word	0x200001cc
 8001fc8:	200001d0 	.word	0x200001d0
 8001fcc:	e000ed20 	.word	0xe000ed20
 8001fd0:	20000004 	.word	0x20000004
 8001fd4:	e000ef34 	.word	0xe000ef34

08001fd8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
        __asm volatile
 8001fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe2:	f383 8811 	msr	BASEPRI, r3
 8001fe6:	f3bf 8f6f 	isb	sy
 8001fea:	f3bf 8f4f 	dsb	sy
 8001fee:	607b      	str	r3, [r7, #4]
    }
 8001ff0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <vPortEnterCritical+0x58>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <vPortEnterCritical+0x58>)
 8001ffa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <vPortEnterCritical+0x58>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d10f      	bne.n	8002024 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <vPortEnterCritical+0x5c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <vPortEnterCritical+0x4c>
        __asm volatile
 800200e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002012:	f383 8811 	msr	BASEPRI, r3
 8002016:	f3bf 8f6f 	isb	sy
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	603b      	str	r3, [r7, #0]
    }
 8002020:	bf00      	nop
 8002022:	e7fe      	b.n	8002022 <vPortEnterCritical+0x4a>
    }
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	20000004 	.word	0x20000004
 8002034:	e000ed04 	.word	0xe000ed04

08002038 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <vPortExitCritical+0x50>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10a      	bne.n	800205c <vPortExitCritical+0x24>
        __asm volatile
 8002046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204a:	f383 8811 	msr	BASEPRI, r3
 800204e:	f3bf 8f6f 	isb	sy
 8002052:	f3bf 8f4f 	dsb	sy
 8002056:	607b      	str	r3, [r7, #4]
    }
 8002058:	bf00      	nop
 800205a:	e7fe      	b.n	800205a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <vPortExitCritical+0x50>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3b01      	subs	r3, #1
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <vPortExitCritical+0x50>)
 8002064:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <vPortExitCritical+0x50>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <vPortExitCritical+0x42>
 800206e:	2300      	movs	r3, #0
 8002070:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002078:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000004 	.word	0x20000004
 800208c:	00000000 	.word	0x00000000

08002090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002090:	f3ef 8009 	mrs	r0, PSP
 8002094:	f3bf 8f6f 	isb	sy
 8002098:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <pxCurrentTCBConst>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	f01e 0f10 	tst.w	lr, #16
 80020a0:	bf08      	it	eq
 80020a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80020a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020aa:	6010      	str	r0, [r2, #0]
 80020ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80020b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80020b4:	f380 8811 	msr	BASEPRI, r0
 80020b8:	f3bf 8f4f 	dsb	sy
 80020bc:	f3bf 8f6f 	isb	sy
 80020c0:	f7ff f842 	bl	8001148 <vTaskSwitchContext>
 80020c4:	f04f 0000 	mov.w	r0, #0
 80020c8:	f380 8811 	msr	BASEPRI, r0
 80020cc:	bc09      	pop	{r0, r3}
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	6808      	ldr	r0, [r1, #0]
 80020d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020d6:	f01e 0f10 	tst.w	lr, #16
 80020da:	bf08      	it	eq
 80020dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80020e0:	f380 8809 	msr	PSP, r0
 80020e4:	f3bf 8f6f 	isb	sy
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	f3af 8000 	nop.w

080020f0 <pxCurrentTCBConst>:
 80020f0:	2000008c 	.word	0x2000008c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop

080020f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
        __asm volatile
 80020fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002102:	f383 8811 	msr	BASEPRI, r3
 8002106:	f3bf 8f6f 	isb	sy
 800210a:	f3bf 8f4f 	dsb	sy
 800210e:	607b      	str	r3, [r7, #4]
    }
 8002110:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002112:	f7fe ff03 	bl	8000f1c <xTaskIncrementTick>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <SysTick_Handler+0x40>)
 800211e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	2300      	movs	r3, #0
 8002126:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f383 8811 	msr	BASEPRI, r3
    }
 800212e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	e000ed04 	.word	0xe000ed04

0800213c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <vPortSetupTimerInterrupt+0x28>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <vPortSetupTimerInterrupt+0x2c>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <vPortSetupTimerInterrupt+0x30>)
 800214e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002152:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <vPortSetupTimerInterrupt+0x28>)
 8002156:	2207      	movs	r2, #7
 8002158:	601a      	str	r2, [r3, #0]
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000e010 	.word	0xe000e010
 8002168:	e000e018 	.word	0xe000e018
 800216c:	e000e014 	.word	0xe000e014

08002170 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002170:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002180 <vPortEnableVFP+0x10>
 8002174:	6801      	ldr	r1, [r0, #0]
 8002176:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800217a:	6001      	str	r1, [r0, #0]
 800217c:	4770      	bx	lr
 800217e:	0000      	.short	0x0000
 8002180:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop

08002188 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00e      	beq.n	80021bc <pvPortMalloc+0x34>
            {
                /* Byte alignment required. Check for overflow. */
                if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )) > xWantedSize )
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f023 0307 	bic.w	r3, r3, #7
 80021a4:	3308      	adds	r3, #8
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d205      	bcs.n	80021b8 <pvPortMalloc+0x30>
                {
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f023 0307 	bic.w	r3, r3, #7
 80021b2:	3308      	adds	r3, #8
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	e001      	b.n	80021bc <pvPortMalloc+0x34>
                }
                else
                {
                    xWantedSize = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    vTaskSuspendAll();
 80021bc:	f7fe fd94 	bl	8000ce8 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <pvPortMalloc+0x98>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <pvPortMalloc+0x9c>)
 80021ca:	f023 0307 	bic.w	r3, r3, #7
 80021ce:	461a      	mov	r2, r3
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <pvPortMalloc+0x98>)
 80021d2:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01a      	beq.n	8002210 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <pvPortMalloc+0xa0>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && /* valid size */
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <pvPortMalloc+0xa4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d813      	bhi.n	8002210 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <pvPortMalloc+0xa0>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	441a      	add	r2, r3
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <pvPortMalloc+0xa0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d90b      	bls.n	8002210 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <pvPortMalloc+0x98>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <pvPortMalloc+0xa0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4413      	add	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <pvPortMalloc+0xa0>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4413      	add	r3, r2
 800220c:	4a06      	ldr	r2, [pc, #24]	; (8002228 <pvPortMalloc+0xa0>)
 800220e:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002210:	f7fe fd78 	bl	8000d04 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8002214:	68fb      	ldr	r3, [r7, #12]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20012dd8 	.word	0x20012dd8
 8002224:	200001db 	.word	0x200001db
 8002228:	20012dd4 	.word	0x20012dd4
 800222c:	00012bf7 	.word	0x00012bf7

08002230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <vPortFree+0x24>
        __asm volatile
 800223e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002242:	f383 8811 	msr	BASEPRI, r3
 8002246:	f3bf 8f6f 	isb	sy
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	60fb      	str	r3, [r7, #12]
    }
 8002250:	bf00      	nop
 8002252:	e7fe      	b.n	8002252 <vPortFree+0x22>
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <USART2_IRQHandler>:


extern USART_Handle_t aUSART2_hn;

void USART2_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	USART_IRQHandling(&aUSART2_hn);
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <USART2_IRQHandler+0x10>)
 8002266:	f001 fc77 	bl	8003b58 <USART_IRQHandling>
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20012e04 	.word	0x20012e04

08002274 <Task_A>:
GPIO_Handle_t aLED4pin, aBUTpin;
NVIC_Handle_t aEXTI0;


void Task_A(void *p)
{
 8002274:	b5b0      	push	{r4, r5, r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

	u8 taskMess[] = "I am in task A\r\n";
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <Task_A+0x40>)
 800227e:	f107 040c 	add.w	r4, r7, #12
 8002282:	461d      	mov	r5, r3
 8002284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	7023      	strb	r3, [r4, #0]
	u8 len = strlen((char*)taskMess);
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	4618      	mov	r0, r3
 8002292:	f7fd ff9d 	bl	80001d0 <strlen>
 8002296:	4603      	mov	r3, r0
 8002298:	77fb      	strb	r3, [r7, #31]

	while(1)
	{
		USART_enuSendDataSyn(&aUSART2_hn,taskMess,len);
 800229a:	7ffa      	ldrb	r2, [r7, #31]
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	4619      	mov	r1, r3
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <Task_A+0x44>)
 80022a4:	f001 fbca 	bl	8003a3c <USART_enuSendDataSyn>
		vTaskDelay(1000);
 80022a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022ac:	f7fe fc96 	bl	8000bdc <vTaskDelay>
		USART_enuSendDataSyn(&aUSART2_hn,taskMess,len);
 80022b0:	e7f3      	b.n	800229a <Task_A+0x26>
 80022b2:	bf00      	nop
 80022b4:	08003e78 	.word	0x08003e78
 80022b8:	20012e04 	.word	0x20012e04

080022bc <main>:




int main(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af02      	add	r7, sp, #8

	/* application initializations */
	PreOS_Init();
 80022c2:	f000 f811 	bl	80022e8 <PreOS_Init>


	/********  Tasks Creation     ***********/
	xTaskCreate(Task_A, "task A", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 80022c6:	2300      	movs	r3, #0
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	2302      	movs	r3, #2
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	2282      	movs	r2, #130	; 0x82
 80022d2:	4903      	ldr	r1, [pc, #12]	; (80022e0 <main+0x24>)
 80022d4:	4803      	ldr	r0, [pc, #12]	; (80022e4 <main+0x28>)
 80022d6:	f7fe fb05 	bl	80008e4 <xTaskCreate>

	/*******   Start the FreeRTOS **********/
	vTaskStartScheduler();
 80022da:	f7fe fcb3 	bl	8000c44 <vTaskStartScheduler>

	while(1);
 80022de:	e7fe      	b.n	80022de <main+0x22>
 80022e0:	08003e8c 	.word	0x08003e8c
 80022e4:	08002275 	.word	0x08002275

080022e8 <PreOS_Init>:
} // end of main //



void PreOS_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
	/**********  Variable  ****************/

	u8 len = strlen((char*)aStringData);
 80022ee:	4813      	ldr	r0, [pc, #76]	; (800233c <PreOS_Init+0x54>)
 80022f0:	f7fd ff6e 	bl	80001d0 <strlen>
 80022f4:	4603      	mov	r3, r0
 80022f6:	71fb      	strb	r3, [r7, #7]

	/**********   RCC   *******************/

	aRCC_Init();
 80022f8:	f000 f824 	bl	8002344 <aRCC_Init>
	RCC_enuAHB1PeriphClkCtrl(AHB1_GPIOA, ENABLE);
 80022fc:	2101      	movs	r1, #1
 80022fe:	2000      	movs	r0, #0
 8002300:	f001 fa8b 	bl	800381a <RCC_enuAHB1PeriphClkCtrl>
	RCC_enuAHB1PeriphClkCtrl(AHB1_GPIOD, ENABLE);
 8002304:	2101      	movs	r1, #1
 8002306:	2003      	movs	r0, #3
 8002308:	f001 fa87 	bl	800381a <RCC_enuAHB1PeriphClkCtrl>
	RCC_enuAPB1PeriphClkCtrl(17, ENABLE);//USART2
 800230c:	2101      	movs	r1, #1
 800230e:	2011      	movs	r0, #17
 8002310:	f001 faa5 	bl	800385e <RCC_enuAPB1PeriphClkCtrl>

	/*********   Cortex-m4   ***************/
	NVIC_Init();
 8002314:	f000 f8f0 	bl	80024f8 <NVIC_Init>
	/*********   GPIO   ********************/
	aGPIO_USART2_Init();
 8002318:	f000 f8ca 	bl	80024b0 <aGPIO_USART2_Init>
	aLED4_Init();
 800231c:	f000 f826 	bl	800236c <aLED4_Init>
	aButton_Init();
 8002320:	f000 f840 	bl	80023a4 <aButton_Init>
	/*********   USART  *******************/
	aUSART2_Init();
 8002324:	f000 f8a2 	bl	800246c <aUSART2_Init>
	/********    UART   *******************/
	USART_enuSendDataSyn(&aUSART2_hn,aStringData,len);
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	461a      	mov	r2, r3
 800232c:	4903      	ldr	r1, [pc, #12]	; (800233c <PreOS_Init+0x54>)
 800232e:	4804      	ldr	r0, [pc, #16]	; (8002340 <PreOS_Init+0x58>)
 8002330:	f001 fb84 	bl	8003a3c <USART_enuSendDataSyn>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000008 	.word	0x20000008
 8002340:	20012e04 	.word	0x20012e04

08002344 <aRCC_Init>:


void aRCC_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
	RCC_Handler_t rcc;
	rcc.RCC_SysClkSource = RCC_SYSCLK_HSI;
 800234a:	2302      	movs	r3, #2
 800234c:	713b      	strb	r3, [r7, #4]
	rcc.RCC_AHBPrescaler = RCC_AHB_not_divided;
 800234e:	2300      	movs	r3, #0
 8002350:	717b      	strb	r3, [r7, #5]
	rcc.RCC_APB1Prescaler= RCC_APB_not_divided;
 8002352:	2300      	movs	r3, #0
 8002354:	71bb      	strb	r3, [r7, #6]
	rcc.RCC_APB2Prescaler= RCC_APB_not_divided;
 8002356:	2300      	movs	r3, #0
 8002358:	71fb      	strb	r3, [r7, #7]

	// 1. RCC initialization

	RCC_enuInitSystemClk(&rcc);
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	4618      	mov	r0, r3
 800235e:	f001 fa3b 	bl	80037d8 <RCC_enuInitSystemClk>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <aLED4_Init>:

void aLED4_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0

	aLED4pin.GPIO_Port = GPIO_PORTD;
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <aLED4_Init+0x34>)
 8002372:	2203      	movs	r2, #3
 8002374:	701a      	strb	r2, [r3, #0]

	aLED4pin.GPIO_Config.GPIO_PinNumber      = GPIO_PIN12;
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <aLED4_Init+0x34>)
 8002378:	220c      	movs	r2, #12
 800237a:	711a      	strb	r2, [r3, #4]
	aLED4pin.GPIO_Config.GPIO_PinMode        = GPIO_Mode_output;
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <aLED4_Init+0x34>)
 800237e:	2201      	movs	r2, #1
 8002380:	715a      	strb	r2, [r3, #5]
	aLED4pin.GPIO_Config.GPIO_PinSpeed       = GPIO_Speed_Fast;
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <aLED4_Init+0x34>)
 8002384:	2202      	movs	r2, #2
 8002386:	719a      	strb	r2, [r3, #6]
	aLED4pin.GPIO_Config.GPIO_PinOPType      = GPIO_Output_PP;
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <aLED4_Init+0x34>)
 800238a:	2200      	movs	r2, #0
 800238c:	721a      	strb	r2, [r3, #8]
	aLED4pin.GPIO_Config.GPIO_PinPuPdControl = GPIO_Float;
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <aLED4_Init+0x34>)
 8002390:	2200      	movs	r2, #0
 8002392:	71da      	strb	r2, [r3, #7]

	GPIO_enuInit(&aLED4pin);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <aLED4_Init+0x34>)
 8002396:	f001 f986 	bl	80036a6 <GPIO_enuInit>
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20012de4 	.word	0x20012de4

080023a4 <aButton_Init>:


void aButton_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	aBUTpin.GPIO_Port = GPIO_PORTA;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <aButton_Init+0x38>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]

	aBUTpin.GPIO_Config.GPIO_PinNumber      = GPIO_PIN0;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <aButton_Init+0x38>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	711a      	strb	r2, [r3, #4]
	aBUTpin.GPIO_Config.GPIO_PinMode        = GPIO_Mode_EXTI_RT;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <aButton_Init+0x38>)
 80023b6:	2205      	movs	r2, #5
 80023b8:	715a      	strb	r2, [r3, #5]
	aBUTpin.GPIO_Config.GPIO_PinSpeed       = GPIO_Speed_Fast;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <aButton_Init+0x38>)
 80023bc:	2202      	movs	r2, #2
 80023be:	719a      	strb	r2, [r3, #6]
	aBUTpin.GPIO_Config.GPIO_PinOPType      = GPIO_Output_PP;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <aButton_Init+0x38>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	721a      	strb	r2, [r3, #8]
	aBUTpin.GPIO_Config.GPIO_PinPuPdControl = GPIO_PullDown;
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <aButton_Init+0x38>)
 80023c8:	2202      	movs	r2, #2
 80023ca:	71da      	strb	r2, [r3, #7]
	aBUTpin.GPIO_Config.EXTI_pfCallBackFunc = aLED4_Tog;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <aButton_Init+0x38>)
 80023ce:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <aButton_Init+0x3c>)
 80023d0:	60da      	str	r2, [r3, #12]

	GPIO_enuInit(&aBUTpin);
 80023d2:	4802      	ldr	r0, [pc, #8]	; (80023dc <aButton_Init+0x38>)
 80023d4:	f001 f967 	bl	80036a6 <GPIO_enuInit>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20012e28 	.word	0x20012e28
 80023e0:	080023e5 	.word	0x080023e5

080023e4 <aLED4_Tog>:


void aLED4_Tog(void)
{
 80023e4:	b5b0      	push	{r4, r5, r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
	u8 isrMess[] = "I am in EXTI0 ISR \r\n";
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <aLED4_Tog+0x50>)
 80023ec:	463c      	mov	r4, r7
 80023ee:	461d      	mov	r5, r3
 80023f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023f8:	6020      	str	r0, [r4, #0]
 80023fa:	3404      	adds	r4, #4
 80023fc:	7021      	strb	r1, [r4, #0]
	u8 len = strlen((char*)isrMess);
 80023fe:	463b      	mov	r3, r7
 8002400:	4618      	mov	r0, r3
 8002402:	f7fd fee5 	bl	80001d0 <strlen>
 8002406:	4603      	mov	r3, r0
 8002408:	75fb      	strb	r3, [r7, #23]
	USART_enuSendDataSyn(&aUSART2_hn,isrMess,len);
 800240a:	7dfa      	ldrb	r2, [r7, #23]
 800240c:	463b      	mov	r3, r7
 800240e:	4619      	mov	r1, r3
 8002410:	4809      	ldr	r0, [pc, #36]	; (8002438 <aLED4_Tog+0x54>)
 8002412:	f001 fb13 	bl	8003a3c <USART_enuSendDataSyn>

	GPIO_enuToggleOutputPin(aLED4pin.GPIO_Port, aLED4pin.GPIO_Config.GPIO_PinNumber );
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <aLED4_Tog+0x58>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <aLED4_Tog+0x58>)
 800241c:	7912      	ldrb	r2, [r2, #4]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f001 f9b5 	bl	8003790 <GPIO_enuToggleOutputPin>
	delay();
 8002426:	f000 f80b 	bl	8002440 <delay>
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bdb0      	pop	{r4, r5, r7, pc}
 8002432:	bf00      	nop
 8002434:	08003e94 	.word	0x08003e94
 8002438:	20012e04 	.word	0x20012e04
 800243c:	20012de4 	.word	0x20012de4

08002440 <delay>:

void delay(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
	for (u32 i=0; i< 1000000 ; i++)
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	e002      	b.n	8002452 <delay+0x12>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3301      	adds	r3, #1
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <delay+0x28>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d9f8      	bls.n	800244c <delay+0xc>
	{
		(void)i;
	}
}
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	000f423f 	.word	0x000f423f

0800246c <aUSART2_Init>:

void aUSART2_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0

	aUSART2_hn.USARTx = USART_2;
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <aUSART2_Init+0x40>)
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]

	aUSART2_hn.USART_Config.USART_Mode       = USART_Mode_RxTx;
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <aUSART2_Init+0x40>)
 8002478:	2202      	movs	r2, #2
 800247a:	711a      	strb	r2, [r3, #4]
	aUSART2_hn.USART_Config.USART_WordLen    = USART_WordLen_8Bits;
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <aUSART2_Init+0x40>)
 800247e:	2200      	movs	r2, #0
 8002480:	715a      	strb	r2, [r3, #5]
	aUSART2_hn.USART_Config.USART_Parity     = USART_Parity_Disable;
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <aUSART2_Init+0x40>)
 8002484:	2200      	movs	r2, #0
 8002486:	719a      	strb	r2, [r3, #6]
	aUSART2_hn.USART_Config.USART_HwFlowCtrl = USART_HwFlowCtrl_None;
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <aUSART2_Init+0x40>)
 800248a:	2200      	movs	r2, #0
 800248c:	721a      	strb	r2, [r3, #8]
	aUSART2_hn.USART_Config.USART_StopBits   = USART_StopBits_1;
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <aUSART2_Init+0x40>)
 8002490:	2200      	movs	r2, #0
 8002492:	71da      	strb	r2, [r3, #7]
	aUSART2_hn.USART_Config.USART_BaudRate   = USART_STD_BAUD_115200;
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <aUSART2_Init+0x40>)
 8002496:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800249a:	60da      	str	r2, [r3, #12]
	aUSART2_hn.RxBusyState = USART_Ready;
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <aUSART2_Init+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	76da      	strb	r2, [r3, #27]

	USART_enuInit(&aUSART2_hn);
 80024a2:	4802      	ldr	r0, [pc, #8]	; (80024ac <aUSART2_Init+0x40>)
 80024a4:	f001 fa0e 	bl	80038c4 <USART_enuInit>
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20012e04 	.word	0x20012e04

080024b0 <aGPIO_USART2_Init>:



void aGPIO_USART2_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	aUART2pin.GPIO_Port = GPIO_PORTA;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <aGPIO_USART2_Init+0x44>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]

	aUART2pin.GPIO_Config.GPIO_PinNumber      = GPIO_PIN2;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <aGPIO_USART2_Init+0x44>)
 80024bc:	2202      	movs	r2, #2
 80024be:	711a      	strb	r2, [r3, #4]
	aUART2pin.GPIO_Config.GPIO_PinMode        = GPIO_Mode_altFun;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <aGPIO_USART2_Init+0x44>)
 80024c2:	2202      	movs	r2, #2
 80024c4:	715a      	strb	r2, [r3, #5]
	aUART2pin.GPIO_Config.GPIO_PinSpeed       = GPIO_Speed_Low;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <aGPIO_USART2_Init+0x44>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	719a      	strb	r2, [r3, #6]
	aUART2pin.GPIO_Config.GPIO_PinOPType      = GPIO_Output_PP;
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <aGPIO_USART2_Init+0x44>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	721a      	strb	r2, [r3, #8]
	aUART2pin.GPIO_Config.GPIO_PinPuPdControl = GPIO_PullUp;
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <aGPIO_USART2_Init+0x44>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	71da      	strb	r2, [r3, #7]
	aUART2pin.GPIO_Config.GPIO_PinAltFunMode  =7;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <aGPIO_USART2_Init+0x44>)
 80024da:	2207      	movs	r2, #7
 80024dc:	725a      	strb	r2, [r3, #9]

	GPIO_enuInit(&aUART2pin);
 80024de:	4805      	ldr	r0, [pc, #20]	; (80024f4 <aGPIO_USART2_Init+0x44>)
 80024e0:	f001 f8e1 	bl	80036a6 <GPIO_enuInit>

	aUART2pin.GPIO_Config.GPIO_PinNumber      = GPIO_PIN3;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <aGPIO_USART2_Init+0x44>)
 80024e6:	2203      	movs	r2, #3
 80024e8:	711a      	strb	r2, [r3, #4]

	GPIO_enuInit(&aUART2pin);
 80024ea:	4802      	ldr	r0, [pc, #8]	; (80024f4 <aGPIO_USART2_Init+0x44>)
 80024ec:	f001 f8db 	bl	80036a6 <GPIO_enuInit>
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20012df4 	.word	0x20012df4

080024f8 <NVIC_Init>:


void NVIC_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
	SCB_enuInit(PriGrField_4_GoupPriBits_0_SubpriBits);
 80024fc:	2000      	movs	r0, #0
 80024fe:	f000 f929 	bl	8002754 <SCB_enuInit>
	aNvic_Hn.IRQn = USART2_IRQn;
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <NVIC_Init+0x4c>)
 8002504:	2226      	movs	r2, #38	; 0x26
 8002506:	701a      	strb	r2, [r3, #0]
	aNvic_Hn.NVIC_Confg.PendingFlag = NVIC_PendFlagIsLow;
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <NVIC_Init+0x4c>)
 800250a:	2200      	movs	r2, #0
 800250c:	70da      	strb	r2, [r3, #3]
	aNvic_Hn.NVIC_Confg.GroupPriority = 4;
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <NVIC_Init+0x4c>)
 8002510:	2204      	movs	r2, #4
 8002512:	705a      	strb	r2, [r3, #1]
	aNvic_Hn.NVIC_Confg.SubPriority   = 0;
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <NVIC_Init+0x4c>)
 8002516:	2200      	movs	r2, #0
 8002518:	709a      	strb	r2, [r3, #2]
	NVIC_enuInitIRQn(&aNvic_Hn);
 800251a:	480a      	ldr	r0, [pc, #40]	; (8002544 <NVIC_Init+0x4c>)
 800251c:	f000 f92c 	bl	8002778 <NVIC_enuInitIRQn>

	aNvic_Hn.IRQn = EXTI0_IRQn;
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <NVIC_Init+0x4c>)
 8002522:	2206      	movs	r2, #6
 8002524:	701a      	strb	r2, [r3, #0]
	aNvic_Hn.NVIC_Confg.PendingFlag = NVIC_PendFlagIsLow;
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <NVIC_Init+0x4c>)
 8002528:	2200      	movs	r2, #0
 800252a:	70da      	strb	r2, [r3, #3]
	aNvic_Hn.NVIC_Confg.GroupPriority = 2;
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <NVIC_Init+0x4c>)
 800252e:	2202      	movs	r2, #2
 8002530:	705a      	strb	r2, [r3, #1]
	aNvic_Hn.NVIC_Confg.SubPriority   = 0;
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <NVIC_Init+0x4c>)
 8002534:	2200      	movs	r2, #0
 8002536:	709a      	strb	r2, [r3, #2]
	NVIC_enuInitIRQn(&aNvic_Hn);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <NVIC_Init+0x4c>)
 800253a:	f000 f91d 	bl	8002778 <NVIC_enuInitIRQn>
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20012ddc 	.word	0x20012ddc

08002548 <vApplicationStackOverflowHook>:
void USART_CallBackFun(void)
{

}

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
	// Handle the stack overflow here
	(void)xTask; // To avoid compiler warnings
	(void)pcTaskName; // To avoid compiler warnings

	// Enter an infinite loop to halt the system
	while (1) {
 8002552:	e7fe      	b.n	8002552 <vApplicationStackOverflowHook+0xa>

08002554 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002554:	480d      	ldr	r0, [pc, #52]	; (800258c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002556:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002558:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800255c:	480c      	ldr	r0, [pc, #48]	; (8002590 <LoopForever+0x6>)
  ldr r1, =_edata
 800255e:	490d      	ldr	r1, [pc, #52]	; (8002594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002560:	4a0d      	ldr	r2, [pc, #52]	; (8002598 <LoopForever+0xe>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002564:	e002      	b.n	800256c <LoopCopyDataInit>

08002566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800256a:	3304      	adds	r3, #4

0800256c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800256c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800256e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002570:	d3f9      	bcc.n	8002566 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002572:	4a0a      	ldr	r2, [pc, #40]	; (800259c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002574:	4c0a      	ldr	r4, [pc, #40]	; (80025a0 <LoopForever+0x16>)
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002578:	e001      	b.n	800257e <LoopFillZerobss>

0800257a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800257a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800257c:	3204      	adds	r2, #4

0800257e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800257e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002580:	d3fb      	bcc.n	800257a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002582:	f001 fc2f 	bl	8003de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002586:	f7ff fe99 	bl	80022bc <main>

0800258a <LoopForever>:

LoopForever:
  b LoopForever
 800258a:	e7fe      	b.n	800258a <LoopForever>
  ldr   r0, =_estack
 800258c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002594:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8002598:	08003eb4 	.word	0x08003eb4
  ldr r2, =_sbss
 800259c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80025a0:	20012e7c 	.word	0x20012e7c

080025a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025a4:	e7fe      	b.n	80025a4 <ADC_IRQHandler>
	...

080025a8 <MCAL_SCB_ConfigPriorityGrouping>:
 */

u8 SCB_SubPriBits = 0;

ES_t MCAL_SCB_ConfigPriorityGrouping(u32 PriorityGroupingField)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	ES_t errorState = ES_NOT_OK;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]

	switch (PriorityGroupingField)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d839      	bhi.n	800262e <MCAL_SCB_ConfigPriorityGrouping+0x86>
 80025ba:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <MCAL_SCB_ConfigPriorityGrouping+0x18>)
 80025bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c0:	080025d5 	.word	0x080025d5
 80025c4:	080025e7 	.word	0x080025e7
 80025c8:	080025f9 	.word	0x080025f9
 80025cc:	0800260b 	.word	0x0800260b
 80025d0:	0800261d 	.word	0x0800261d
	{
	case MCAL_NVIC_4_BIT_GROUP_0_BIT_SUB:

		SCB_AIRCR = 0x05FA0300;
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <MCAL_SCB_ConfigPriorityGrouping+0x94>)
 80025d6:	4a1a      	ldr	r2, [pc, #104]	; (8002640 <MCAL_SCB_ConfigPriorityGrouping+0x98>)
 80025d8:	601a      	str	r2, [r3, #0]

		SCB_SubPriBits = 0;
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <MCAL_SCB_ConfigPriorityGrouping+0x9c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]

		errorState = ES_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
		break;
 80025e4:	e023      	b.n	800262e <MCAL_SCB_ConfigPriorityGrouping+0x86>

	case MCAL_NVIC_3_BIT_GROUP_1_BIT_SUB:

		SCB_AIRCR = 0x05FA0400;
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <MCAL_SCB_ConfigPriorityGrouping+0x94>)
 80025e8:	4a17      	ldr	r2, [pc, #92]	; (8002648 <MCAL_SCB_ConfigPriorityGrouping+0xa0>)
 80025ea:	601a      	str	r2, [r3, #0]

		SCB_SubPriBits = 1;
 80025ec:	4b15      	ldr	r3, [pc, #84]	; (8002644 <MCAL_SCB_ConfigPriorityGrouping+0x9c>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]

		errorState = ES_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
		break;
 80025f6:	e01a      	b.n	800262e <MCAL_SCB_ConfigPriorityGrouping+0x86>

	case MCAL_NVIC_2_BIT_GROUP_2_BIT_SUB:

		SCB_AIRCR = 0x05FA0500;
 80025f8:	4b10      	ldr	r3, [pc, #64]	; (800263c <MCAL_SCB_ConfigPriorityGrouping+0x94>)
 80025fa:	4a14      	ldr	r2, [pc, #80]	; (800264c <MCAL_SCB_ConfigPriorityGrouping+0xa4>)
 80025fc:	601a      	str	r2, [r3, #0]

		SCB_SubPriBits = 2;
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MCAL_SCB_ConfigPriorityGrouping+0x9c>)
 8002600:	2202      	movs	r2, #2
 8002602:	701a      	strb	r2, [r3, #0]

		errorState = ES_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]
		break;
 8002608:	e011      	b.n	800262e <MCAL_SCB_ConfigPriorityGrouping+0x86>

	case MCAL_NVIC_1_BIT_GROUP_3_BIT_SUB:

		SCB_AIRCR = 0x05FA0600;
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MCAL_SCB_ConfigPriorityGrouping+0x94>)
 800260c:	4a10      	ldr	r2, [pc, #64]	; (8002650 <MCAL_SCB_ConfigPriorityGrouping+0xa8>)
 800260e:	601a      	str	r2, [r3, #0]

		SCB_SubPriBits = 3;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MCAL_SCB_ConfigPriorityGrouping+0x9c>)
 8002612:	2203      	movs	r2, #3
 8002614:	701a      	strb	r2, [r3, #0]

		errorState = ES_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
		break;
 800261a:	e008      	b.n	800262e <MCAL_SCB_ConfigPriorityGrouping+0x86>

	case MCAL_NVIC_0_BIT_GROUP_4_BIT_SUB:

		SCB_AIRCR = 0x05FA0700;
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <MCAL_SCB_ConfigPriorityGrouping+0x94>)
 800261e:	4a0d      	ldr	r2, [pc, #52]	; (8002654 <MCAL_SCB_ConfigPriorityGrouping+0xac>)
 8002620:	601a      	str	r2, [r3, #0]

		SCB_SubPriBits = 4;
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MCAL_SCB_ConfigPriorityGrouping+0x9c>)
 8002624:	2204      	movs	r2, #4
 8002626:	701a      	strb	r2, [r3, #0]

		errorState = ES_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	73fb      	strb	r3, [r7, #15]
		break;
 800262c:	bf00      	nop
	}

	return errorState;
 800262e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000ed0c 	.word	0xe000ed0c
 8002640:	05fa0300 	.word	0x05fa0300
 8002644:	20012e38 	.word	0x20012e38
 8002648:	05fa0400 	.word	0x05fa0400
 800264c:	05fa0500 	.word	0x05fa0500
 8002650:	05fa0600 	.word	0x05fa0600
 8002654:	05fa0700 	.word	0x05fa0700

08002658 <MCAL_NVIC_EnableIRQn>:


ES_t MCAL_NVIC_EnableIRQn(u8 IRQn)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]

	ES_t errorState=ES_NOT_OK;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]

	if(IRQn <= 31 )
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	2b1f      	cmp	r3, #31
 800266a:	d807      	bhi.n	800267c <MCAL_NVIC_EnableIRQn+0x24>
	{
		NVIC_ISER0 = (1<<IRQn);
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	2201      	movs	r2, #1
 8002670:	409a      	lsls	r2, r3
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <MCAL_NVIC_EnableIRQn+0x4c>)
 8002674:	601a      	str	r2, [r3, #0]
		errorState = ES_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
 800267a:	e00c      	b.n	8002696 <MCAL_NVIC_EnableIRQn+0x3e>
	}
	else if(IRQn <= 59)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	2b3b      	cmp	r3, #59	; 0x3b
 8002680:	d809      	bhi.n	8002696 <MCAL_NVIC_EnableIRQn+0x3e>
	{
		IRQn-=32;
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	3b20      	subs	r3, #32
 8002686:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1<<IRQn);
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	2201      	movs	r2, #1
 800268c:	409a      	lsls	r2, r3
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <MCAL_NVIC_EnableIRQn+0x50>)
 8002690:	601a      	str	r2, [r3, #0]
		errorState = ES_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
	}

	return errorState;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000e100 	.word	0xe000e100
 80026a8:	e000e104 	.word	0xe000e104

080026ac <MCAL_NVIC_SetPendingIRQn>:
	}
	return errorState;
}

ES_t MCAL_NVIC_SetPendingIRQn(u8 IRQn)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
	ES_t errorState=ES_NOT_OK;
 80026b6:	2301      	movs	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]

	if(IRQn <= 31 )
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	2b1f      	cmp	r3, #31
 80026be:	d807      	bhi.n	80026d0 <MCAL_NVIC_SetPendingIRQn+0x24>
	{
		NVIC_ISPR0 = (1<<IRQn);
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	2201      	movs	r2, #1
 80026c4:	409a      	lsls	r2, r3
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MCAL_NVIC_SetPendingIRQn+0x4c>)
 80026c8:	601a      	str	r2, [r3, #0]
		errorState = ES_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e00c      	b.n	80026ea <MCAL_NVIC_SetPendingIRQn+0x3e>
	}
	else if(IRQn <= 59)
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	2b3b      	cmp	r3, #59	; 0x3b
 80026d4:	d809      	bhi.n	80026ea <MCAL_NVIC_SetPendingIRQn+0x3e>
	{
		IRQn-=32;
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	3b20      	subs	r3, #32
 80026da:	71fb      	strb	r3, [r7, #7]
		NVIC_ISPR1 = (1<<IRQn);
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	2201      	movs	r2, #1
 80026e0:	409a      	lsls	r2, r3
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <MCAL_NVIC_SetPendingIRQn+0x50>)
 80026e4:	601a      	str	r2, [r3, #0]
		errorState = ES_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
	}

	return errorState;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000e200 	.word	0xe000e200
 80026fc:	e000e204 	.word	0xe000e204

08002700 <MCAL_NVIC_SetPriorityIRQn>:

	return errorState;
}

ES_t MCAL_NVIC_SetPriorityIRQn(u8 IRQn,u8 GrPri,u8 SubPri)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
 800270a:	460b      	mov	r3, r1
 800270c:	71bb      	strb	r3, [r7, #6]
 800270e:	4613      	mov	r3, r2
 8002710:	717b      	strb	r3, [r7, #5]
	ES_t errorState=ES_NOT_OK;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]

	u8 Pri ;

	Pri = SubPri | (GrPri << SCB_SubPriBits);
 8002716:	79bb      	ldrb	r3, [r7, #6]
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <MCAL_NVIC_SetPriorityIRQn+0x50>)
 800271a:	7812      	ldrb	r2, [r2, #0]
 800271c:	4093      	lsls	r3, r2
 800271e:	b25a      	sxtb	r2, r3
 8002720:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002724:	4313      	orrs	r3, r2
 8002726:	b25b      	sxtb	r3, r3
 8002728:	73bb      	strb	r3, [r7, #14]

	if(IRQn >= 0)
	{
		/* External Interrupt*/
		NVIC_IPR[IRQn] = (Pri << (8 - NO_PR_BITS_IMPLEMENTED));
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002730:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002734:	7bba      	ldrb	r2, [r7, #14]
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]
		errorState = ES_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]
	}
	else
	{
		/* System Exceptions*/
	}
	return errorState;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20012e38 	.word	0x20012e38

08002754 <SCB_enuInit>:
#include "cortexm4_nvic.h"
#include "cortex_m4.h"


ES_t SCB_enuInit(SCB_PriGro_t Copy_enuPriorityGroupingField)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
	ES_t Local_enuErrorState = ES_NOT_OK;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]

	Local_enuErrorState = MCAL_SCB_ConfigPriorityGrouping(Copy_enuPriorityGroupingField);
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff1f 	bl	80025a8 <MCAL_SCB_ConfigPriorityGrouping>
 800276a:	4603      	mov	r3, r0
 800276c:	73fb      	strb	r3, [r7, #15]

	return Local_enuErrorState;
 800276e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <NVIC_enuInitIRQn>:



ES_t NVIC_enuInitIRQn(NVIC_Handle_t *Copy_pstrNVICHandle)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrorState = ES_NOT_OK;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]

	Local_enuErrorState = MCAL_NVIC_SetPriorityIRQn(Copy_pstrNVICHandle->IRQn,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f993 3000 	ldrsb.w	r3, [r3]
 800278a:	b2d8      	uxtb	r0, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7859      	ldrb	r1, [r3, #1]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	789b      	ldrb	r3, [r3, #2]
 8002794:	461a      	mov	r2, r3
 8002796:	f7ff ffb3 	bl	8002700 <MCAL_NVIC_SetPriorityIRQn>
 800279a:	4603      	mov	r3, r0
 800279c:	73fb      	strb	r3, [r7, #15]
			Copy_pstrNVICHandle->NVIC_Confg.GroupPriority,
			Copy_pstrNVICHandle->NVIC_Confg.SubPriority);

	Local_enuErrorState = MCAL_NVIC_EnableIRQn(Copy_pstrNVICHandle->IRQn);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f993 3000 	ldrsb.w	r3, [r3]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff56 	bl	8002658 <MCAL_NVIC_EnableIRQn>
 80027ac:	4603      	mov	r3, r0
 80027ae:	73fb      	strb	r3, [r7, #15]

	if(Copy_pstrNVICHandle->NVIC_Confg.PendingFlag == NVIC_PendFlagIsHigh)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	78db      	ldrb	r3, [r3, #3]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d108      	bne.n	80027ca <NVIC_enuInitIRQn+0x52>
	{
		Local_enuErrorState = MCAL_NVIC_SetPendingIRQn(Copy_pstrNVICHandle->IRQn);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f993 3000 	ldrsb.w	r3, [r3]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff73 	bl	80026ac <MCAL_NVIC_SetPendingIRQn>
 80027c6:	4603      	mov	r3, r0
 80027c8:	73fb      	strb	r3, [r7, #15]
	}

	return Local_enuErrorState;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <MCAL_GPIO_SelectPort>:
#include "stm32f407x_gpio_exti.h"

void (*EXTI_CallBack[16])(void) = {NULL};

ES_t MCAL_GPIO_SelectPort(u8 Copy_enuGPIOPort,GPIO_RegDef_t** GPIO_BaseAddr)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]

	switch(Copy_enuGPIOPort)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	2b07      	cmp	r3, #7
 80027e8:	d842      	bhi.n	8002870 <MCAL_GPIO_SelectPort+0x9c>
 80027ea:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <MCAL_GPIO_SelectPort+0x1c>)
 80027ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f0:	08002811 	.word	0x08002811
 80027f4:	0800281d 	.word	0x0800281d
 80027f8:	08002829 	.word	0x08002829
 80027fc:	08002835 	.word	0x08002835
 8002800:	08002841 	.word	0x08002841
 8002804:	0800284d 	.word	0x0800284d
 8002808:	08002859 	.word	0x08002859
 800280c:	08002865 	.word	0x08002865
	{
	case MCAL_GPIO_PORTA : *GPIO_BaseAddr = GPIOA; errorState = ES_OK; break;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <MCAL_GPIO_SelectPort+0xac>)
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
 800281a:	e029      	b.n	8002870 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTB : *GPIO_BaseAddr = GPIOB; errorState = ES_OK; break;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	4a19      	ldr	r2, [pc, #100]	; (8002884 <MCAL_GPIO_SelectPort+0xb0>)
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e023      	b.n	8002870 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTC : *GPIO_BaseAddr = GPIOC; errorState = ES_OK; break;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4a17      	ldr	r2, [pc, #92]	; (8002888 <MCAL_GPIO_SelectPort+0xb4>)
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	e01d      	b.n	8002870 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTD : *GPIO_BaseAddr = GPIOD; errorState = ES_OK; break;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4a15      	ldr	r2, [pc, #84]	; (800288c <MCAL_GPIO_SelectPort+0xb8>)
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	e017      	b.n	8002870 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTE : *GPIO_BaseAddr = GPIOE; errorState = ES_OK; break;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4a13      	ldr	r2, [pc, #76]	; (8002890 <MCAL_GPIO_SelectPort+0xbc>)
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	e011      	b.n	8002870 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTF : *GPIO_BaseAddr = GPIOF; errorState = ES_OK; break;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4a11      	ldr	r2, [pc, #68]	; (8002894 <MCAL_GPIO_SelectPort+0xc0>)
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	e00b      	b.n	8002870 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTG : *GPIO_BaseAddr = GPIOG; errorState = ES_OK; break;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <MCAL_GPIO_SelectPort+0xc4>)
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	e005      	b.n	8002870 <MCAL_GPIO_SelectPort+0x9c>
	case MCAL_GPIO_PORTH : *GPIO_BaseAddr = GPIOH; errorState = ES_OK; break;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4a0d      	ldr	r2, [pc, #52]	; (800289c <MCAL_GPIO_SelectPort+0xc8>)
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	bf00      	nop
	}
	return errorState;
 8002870:	7bfb      	ldrb	r3, [r7, #15]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40020000 	.word	0x40020000
 8002884:	40020400 	.word	0x40020400
 8002888:	40020800 	.word	0x40020800
 800288c:	40020c00 	.word	0x40020c00
 8002890:	40021000 	.word	0x40021000
 8002894:	40021400 	.word	0x40021400
 8002898:	40021800 	.word	0x40021800
 800289c:	40021c00 	.word	0x40021c00

080028a0 <MCAL_GPIO_SetPinMode>:


ES_t MCAL_GPIO_SetPinMode(GPIO_RegDef_t* GPIO_BaseAddr,u8 PinNum,u8 Mode)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
 80028ac:	4613      	mov	r3, r2
 80028ae:	70bb      	strb	r3, [r7, #2]
	ES_t errorState = ES_NOT_OK;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]

	if(Mode <= MCAL_GPIO_MODE_INPUT_ANALOG)
 80028b4:	78bb      	ldrb	r3, [r7, #2]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d816      	bhi.n	80028e8 <MCAL_GPIO_SetPinMode+0x48>
	{
		GPIO_BaseAddr->MODER &= ~(0x3 << 2 * PinNum);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	0052      	lsls	r2, r2, #1
 80028c2:	2103      	movs	r1, #3
 80028c4:	fa01 f202 	lsl.w	r2, r1, r2
 80028c8:	43d2      	mvns	r2, r2
 80028ca:	401a      	ands	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	601a      	str	r2, [r3, #0]
		GPIO_BaseAddr->MODER |= (Mode<< 2 * PinNum);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	78b9      	ldrb	r1, [r7, #2]
 80028d6:	78fa      	ldrb	r2, [r7, #3]
 80028d8:	0052      	lsls	r2, r2, #1
 80028da:	fa01 f202 	lsl.w	r2, r1, r2
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	601a      	str	r2, [r3, #0]
		errorState = ES_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]
	}
	return errorState;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <MCAL_GPIO_SelectSpeed>:


ES_t MCAL_GPIO_SelectSpeed(GPIO_RegDef_t* GPIO_BaseAddr,u8 PinNum,u8 Speed)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	70fb      	strb	r3, [r7, #3]
 8002902:	4613      	mov	r3, r2
 8002904:	70bb      	strb	r3, [r7, #2]
	ES_t errorState = ES_NOT_OK;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]

	GPIO_BaseAddr->OSPEEDR &= ~(0x3 << 2 *PinNum);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	0052      	lsls	r2, r2, #1
 8002912:	2103      	movs	r1, #3
 8002914:	fa01 f202 	lsl.w	r2, r1, r2
 8002918:	43d2      	mvns	r2, r2
 800291a:	401a      	ands	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	609a      	str	r2, [r3, #8]
	GPIO_BaseAddr->OSPEEDR |= (Speed << 2 * PinNum);;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	78b9      	ldrb	r1, [r7, #2]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	0052      	lsls	r2, r2, #1
 800292a:	fa01 f202 	lsl.w	r2, r1, r2
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]

	return errorState;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <MCAL_GPIO_SetPullUpPullDown>:



ES_t MCAL_GPIO_SetPullUpPullDown(GPIO_RegDef_t* GPIO_BaseAddr,u8 PinNum,u8 PuPd)
{
 8002942:	b480      	push	{r7}
 8002944:	b085      	sub	sp, #20
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	460b      	mov	r3, r1
 800294c:	70fb      	strb	r3, [r7, #3]
 800294e:	4613      	mov	r3, r2
 8002950:	70bb      	strb	r3, [r7, #2]
	ES_t errorState = ES_NOT_OK;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]


	GPIO_BaseAddr->PUPDR &= ~(0x3 << 2 * PinNum);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	0052      	lsls	r2, r2, #1
 800295e:	2103      	movs	r1, #3
 8002960:	fa01 f202 	lsl.w	r2, r1, r2
 8002964:	43d2      	mvns	r2, r2
 8002966:	401a      	ands	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]
	GPIO_BaseAddr->PUPDR |= (PuPd << 2 * PinNum);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	78b9      	ldrb	r1, [r7, #2]
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	0052      	lsls	r2, r2, #1
 8002976:	fa01 f202 	lsl.w	r2, r1, r2
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	60da      	str	r2, [r3, #12]

	errorState = ES_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]
	return errorState;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <MCAL_GPIO_SelectPinOutputType>:


ES_t MCAL_GPIO_SelectPinOutputType(GPIO_RegDef_t* GPIO_BaseAddr,u8 PinNum,u8 PinOPType)
{
 8002992:	b480      	push	{r7}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	460b      	mov	r3, r1
 800299c:	70fb      	strb	r3, [r7, #3]
 800299e:	4613      	mov	r3, r2
 80029a0:	70bb      	strb	r3, [r7, #2]
	ES_t errorState = ES_NOT_OK;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]

	GPIO_BaseAddr->OTYPER &= ~(1<< PinNum);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	2101      	movs	r1, #1
 80029ae:	fa01 f202 	lsl.w	r2, r1, r2
 80029b2:	43d2      	mvns	r2, r2
 80029b4:	401a      	ands	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	605a      	str	r2, [r3, #4]
	GPIO_BaseAddr->OTYPER |= (PinOPType<< PinNum);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	78b9      	ldrb	r1, [r7, #2]
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	fa01 f202 	lsl.w	r2, r1, r2
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	605a      	str	r2, [r3, #4]

	return errorState;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <MCAL_GPIO_SetAltFuncMode>:

ES_t MCAL_GPIO_SetAltFuncMode(GPIO_RegDef_t* GPIO_BaseAddr,u8 PinNum,u8 AltFunMode)
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	70fb      	strb	r3, [r7, #3]
 80029e6:	4613      	mov	r3, r2
 80029e8:	70bb      	strb	r3, [r7, #2]
	ES_t errorState = ES_NOT_OK;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]

	// configure the alt function registers.
	u8 Temp1,Temp2;

	Temp1 = PinNum / 8;
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	08db      	lsrs	r3, r3, #3
 80029f2:	73bb      	strb	r3, [r7, #14]
	Temp2 = PinNum % 8;
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	737b      	strb	r3, [r7, #13]

	GPIO_BaseAddr->AFR[Temp1] &= ~(0xF << (4 * Temp2));
 80029fc:	7bba      	ldrb	r2, [r7, #14]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3208      	adds	r2, #8
 8002a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a06:	7b7a      	ldrb	r2, [r7, #13]
 8002a08:	0092      	lsls	r2, r2, #2
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a10:	43d2      	mvns	r2, r2
 8002a12:	4611      	mov	r1, r2
 8002a14:	7bba      	ldrb	r2, [r7, #14]
 8002a16:	4019      	ands	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3208      	adds	r2, #8
 8002a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIO_BaseAddr->AFR[Temp1] |= (AltFunMode << (4 * Temp2));
 8002a20:	7bba      	ldrb	r2, [r7, #14]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3208      	adds	r2, #8
 8002a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2a:	78b9      	ldrb	r1, [r7, #2]
 8002a2c:	7b7a      	ldrb	r2, [r7, #13]
 8002a2e:	0092      	lsls	r2, r2, #2
 8002a30:	fa01 f202 	lsl.w	r2, r1, r2
 8002a34:	4611      	mov	r1, r2
 8002a36:	7bba      	ldrb	r2, [r7, #14]
 8002a38:	4319      	orrs	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	errorState = ES_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	73fb      	strb	r3, [r7, #15]

	return errorState;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <MCAL_GPIO_TogglePin>:
	return errorState;
}


ES_t MCAL_GPIO_TogglePin(GPIO_RegDef_t *GPIO_BaseAddr, u8 PinNum)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	70fb      	strb	r3, [r7, #3]
	ES_t errorState = ES_NOT_OK;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]

	TOG_BIT(GPIO_BaseAddr->ODR, PinNum);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a70:	405a      	eors	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	615a      	str	r2, [r3, #20]
	errorState = ES_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	73fb      	strb	r3, [r7, #15]

	return errorState;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <MCAL_EXTI_SetEdgeTrig>:


/*********************************************/

ES_t MCAL_EXTI_SetEdgeTrig(u8 PinNum,u8 Mode)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	460a      	mov	r2, r1
 8002a92:	71fb      	strb	r3, [r7, #7]
 8002a94:	4613      	mov	r3, r2
 8002a96:	71bb      	strb	r3, [r7, #6]
	ES_t errorState = ES_NOT_OK;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
	if (Mode == MCAL_GPIO_MODE_EXTI_FT)
 8002a9c:	79bb      	ldrb	r3, [r7, #6]
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d117      	bne.n	8002ad2 <MCAL_EXTI_SetEdgeTrig+0x4a>
	{
		// 1. configure the FTSR
		SET_BIT(EXTI->FTSR,PinNum);
 8002aa2:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	79fa      	ldrb	r2, [r7, #7]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	60d3      	str	r3, [r2, #12]
		// Clear the corresponding RTSR bit
		CLR_BIT(EXTI->RTSR,PinNum);
 8002ab6:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	79fa      	ldrb	r2, [r7, #7]
 8002abc:	2101      	movs	r1, #1
 8002abe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac2:	43d2      	mvns	r2, r2
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002ac8:	400b      	ands	r3, r1
 8002aca:	6093      	str	r3, [r2, #8]

		errorState = ES_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	e033      	b.n	8002b3a <MCAL_EXTI_SetEdgeTrig+0xb2>
	}
	else if (Mode == MCAL_GPIO_MODE_EXTI_RT)
 8002ad2:	79bb      	ldrb	r3, [r7, #6]
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d117      	bne.n	8002b08 <MCAL_EXTI_SetEdgeTrig+0x80>
	{
		// 1 . configure the RTSR
		SET_BIT(EXTI->RTSR,PinNum);
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	79fa      	ldrb	r2, [r7, #7]
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	6093      	str	r3, [r2, #8]
		// Clear the corresponding FTSR bit
		CLR_BIT(EXTI->FTSR,PinNum);
 8002aec:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	79fa      	ldrb	r2, [r7, #7]
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	43d2      	mvns	r2, r2
 8002afa:	4611      	mov	r1, r2
 8002afc:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002afe:	400b      	ands	r3, r1
 8002b00:	60d3      	str	r3, [r2, #12]

		errorState = ES_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	e018      	b.n	8002b3a <MCAL_EXTI_SetEdgeTrig+0xb2>
	}
	else if (Mode == MCAL_GPIO_MODE_EXTI_RFT)
 8002b08:	79bb      	ldrb	r3, [r7, #6]
 8002b0a:	2b06      	cmp	r3, #6
 8002b0c:	d115      	bne.n	8002b3a <MCAL_EXTI_SetEdgeTrig+0xb2>
	{
		// 1. configure both FTSR and RTSR
		SET_BIT(EXTI->RTSR,PinNum);
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	79fa      	ldrb	r2, [r7, #7]
 8002b14:	2101      	movs	r1, #1
 8002b16:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	6093      	str	r3, [r2, #8]
		SET_BIT(EXTI->FTSR,PinNum);
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	79fa      	ldrb	r2, [r7, #7]
 8002b28:	2101      	movs	r1, #1
 8002b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <MCAL_EXTI_SetEdgeTrig+0xc0>)
 8002b32:	430b      	orrs	r3, r1
 8002b34:	60d3      	str	r3, [r2, #12]

		errorState = ES_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
	}

	return errorState;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40013c00 	.word	0x40013c00

08002b4c <MCAL_SYSCFG_SellectEXTIChannel>:




ES_t MCAL_SYSCFG_SellectEXTIChannel(u8 GPIO_Port,u8 PinNum)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	460a      	mov	r2, r1
 8002b56:	71fb      	strb	r3, [r7, #7]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	71bb      	strb	r3, [r7, #6]
	ES_t errorState = ES_NOT_OK;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]

	u8 RNTemp   = PinNum / 4;
 8002b60:	79bb      	ldrb	r3, [r7, #6]
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	73bb      	strb	r3, [r7, #14]
	u8 IndxTemp = PinNum % 4;
 8002b66:	79bb      	ldrb	r3, [r7, #6]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	737b      	strb	r3, [r7, #13]

	SYSCFG->EXTICR[RNTemp] = GPIO_Port << (IndxTemp * 4);
 8002b6e:	79fa      	ldrb	r2, [r7, #7]
 8002b70:	7b7b      	ldrb	r3, [r7, #13]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	fa02 f103 	lsl.w	r1, r2, r3
 8002b78:	4a06      	ldr	r2, [pc, #24]	; (8002b94 <MCAL_SYSCFG_SellectEXTIChannel+0x48>)
 8002b7a:	7bbb      	ldrb	r3, [r7, #14]
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	errorState = ES_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]

	return errorState;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40013800 	.word	0x40013800

08002b98 <MCAL_EXTI_EnableLine>:


ES_t MCAL_EXTI_EnableLine(u8 PinNum)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]

	SET_BIT(EXTI->IMR,PinNum);
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <MCAL_EXTI_EnableLine+0x34>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	79fa      	ldrb	r2, [r7, #7]
 8002bac:	2101      	movs	r1, #1
 8002bae:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <MCAL_EXTI_EnableLine+0x34>)
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	6013      	str	r3, [r2, #0]

	errorState = ES_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]

	return errorState;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	40013c00 	.word	0x40013c00

08002bd0 <MCAL_EXTI_SetCallBack>:


ES_t MCAL_EXTI_SetCallBack(u8 Line, void (*callBackFun)(void))
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]

	if(Line <= 16)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d806      	bhi.n	8002bf4 <MCAL_EXTI_SetCallBack+0x24>
	{
		EXTI_CallBack[Line] = callBackFun;
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	4906      	ldr	r1, [pc, #24]	; (8002c04 <MCAL_EXTI_SetCallBack+0x34>)
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		errorState = ES_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
	}

	return errorState;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20012e3c 	.word	0x20012e3c

08002c08 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 0))
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <EXTI0_IRQHandler+0x30>)
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00c      	beq.n	8002c32 <EXTI0_IRQHandler+0x2a>
	{


		if (EXTI_CallBack[0] != NULL) // then call the callback function
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <EXTI0_IRQHandler+0x34>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <EXTI0_IRQHandler+0x1e>
		{
			EXTI_CallBack[0]();
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <EXTI0_IRQHandler+0x34>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4798      	blx	r3
		}

		EXTI->PR |= (1 << 0);
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <EXTI0_IRQHandler+0x30>)
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	4a03      	ldr	r2, [pc, #12]	; (8002c38 <EXTI0_IRQHandler+0x30>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6153      	str	r3, [r2, #20]
	}
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40013c00 	.word	0x40013c00
 8002c3c:	20012e3c 	.word	0x20012e3c

08002c40 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 1))
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <EXTI1_IRQHandler+0x30>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00c      	beq.n	8002c6a <EXTI1_IRQHandler+0x2a>
	{

		if (EXTI_CallBack[1] != NULL) // then call the callback function
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <EXTI1_IRQHandler+0x34>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <EXTI1_IRQHandler+0x1e>
		{
			EXTI_CallBack[1]();
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <EXTI1_IRQHandler+0x34>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4798      	blx	r3
		}

		EXTI->PR |= (1 << 1);
 8002c5e:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <EXTI1_IRQHandler+0x30>)
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	4a03      	ldr	r2, [pc, #12]	; (8002c70 <EXTI1_IRQHandler+0x30>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	6153      	str	r3, [r2, #20]
	}
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40013c00 	.word	0x40013c00
 8002c74:	20012e3c 	.word	0x20012e3c

08002c78 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 2))
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <EXTI2_IRQHandler+0x30>)
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <EXTI2_IRQHandler+0x2a>
	{

		if (EXTI_CallBack[2] != NULL) // then call the callback function
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <EXTI2_IRQHandler+0x34>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <EXTI2_IRQHandler+0x1e>
		{
			EXTI_CallBack[2]();
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <EXTI2_IRQHandler+0x34>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 2);
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <EXTI2_IRQHandler+0x30>)
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <EXTI2_IRQHandler+0x30>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	6153      	str	r3, [r2, #20]
	}
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40013c00 	.word	0x40013c00
 8002cac:	20012e3c 	.word	0x20012e3c

08002cb0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 3))
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <EXTI3_IRQHandler+0x30>)
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00c      	beq.n	8002cda <EXTI3_IRQHandler+0x2a>
	{

		if (EXTI_CallBack[3] != NULL) // then call the callback function
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <EXTI3_IRQHandler+0x34>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <EXTI3_IRQHandler+0x1e>
		{
			EXTI_CallBack[3]();
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <EXTI3_IRQHandler+0x34>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 3);
 8002cce:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <EXTI3_IRQHandler+0x30>)
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	4a03      	ldr	r2, [pc, #12]	; (8002ce0 <EXTI3_IRQHandler+0x30>)
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	6153      	str	r3, [r2, #20]
	}
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40013c00 	.word	0x40013c00
 8002ce4:	20012e3c 	.word	0x20012e3c

08002ce8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 4))
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <EXTI4_IRQHandler+0x30>)
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00c      	beq.n	8002d12 <EXTI4_IRQHandler+0x2a>
	{

		if (EXTI_CallBack[4] != NULL) // then call the callback function
 8002cf8:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <EXTI4_IRQHandler+0x34>)
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <EXTI4_IRQHandler+0x1e>
		{
			EXTI_CallBack[4]();
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <EXTI4_IRQHandler+0x34>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	4798      	blx	r3
		}

		EXTI->PR |= (1 << 4);
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <EXTI4_IRQHandler+0x30>)
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	4a03      	ldr	r2, [pc, #12]	; (8002d18 <EXTI4_IRQHandler+0x30>)
 8002d0c:	f043 0310 	orr.w	r3, r3, #16
 8002d10:	6153      	str	r3, [r2, #20]
	}
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40013c00 	.word	0x40013c00
 8002d1c:	20012e3c 	.word	0x20012e3c

08002d20 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0

	if (EXTI->PR & (1 << 5))
 8002d24:	4b30      	ldr	r3, [pc, #192]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00c      	beq.n	8002d4a <EXTI9_5_IRQHandler+0x2a>
	{

		if (EXTI_CallBack[5] != NULL) // then call the callback function
 8002d30:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <EXTI9_5_IRQHandler+0xcc>)
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <EXTI9_5_IRQHandler+0x1e>
		{
			EXTI_CallBack[5]();
 8002d38:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <EXTI9_5_IRQHandler+0xcc>)
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 5);
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002d44:	f043 0320 	orr.w	r3, r3, #32
 8002d48:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 6))
 8002d4a:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00c      	beq.n	8002d70 <EXTI9_5_IRQHandler+0x50>
	{

		if (EXTI_CallBack[6] != NULL) // then call the callback function
 8002d56:	4b25      	ldr	r3, [pc, #148]	; (8002dec <EXTI9_5_IRQHandler+0xcc>)
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <EXTI9_5_IRQHandler+0x44>
		{
			EXTI_CallBack[6]();
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <EXTI9_5_IRQHandler+0xcc>)
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 6);
 8002d64:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	4a1f      	ldr	r2, [pc, #124]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d6e:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 7))
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00c      	beq.n	8002d96 <EXTI9_5_IRQHandler+0x76>
	{
		if (EXTI_CallBack[7] != NULL) // then call the callback function
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <EXTI9_5_IRQHandler+0xcc>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <EXTI9_5_IRQHandler+0x6a>
		{
			EXTI_CallBack[7]();
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <EXTI9_5_IRQHandler+0xcc>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 7);
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4a16      	ldr	r2, [pc, #88]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d94:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 8))
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00c      	beq.n	8002dbc <EXTI9_5_IRQHandler+0x9c>
	{

		if (EXTI_CallBack[8] != NULL) // then call the callback function
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <EXTI9_5_IRQHandler+0xcc>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <EXTI9_5_IRQHandler+0x90>
		{
			EXTI_CallBack[8]();
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <EXTI9_5_IRQHandler+0xcc>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 8);
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dba:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 9))
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00c      	beq.n	8002de2 <EXTI9_5_IRQHandler+0xc2>
	{

		if (EXTI_CallBack[9] != NULL) // then call the callback function
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <EXTI9_5_IRQHandler+0xcc>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <EXTI9_5_IRQHandler+0xb6>
		{
			EXTI_CallBack[9]();
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <EXTI9_5_IRQHandler+0xcc>)
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 9);
 8002dd6:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	4a03      	ldr	r2, [pc, #12]	; (8002de8 <EXTI9_5_IRQHandler+0xc8>)
 8002ddc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de0:	6153      	str	r3, [r2, #20]
	}
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40013c00 	.word	0x40013c00
 8002dec:	20012e3c 	.word	0x20012e3c

08002df0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10))
 8002df4:	4b39      	ldr	r3, [pc, #228]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00c      	beq.n	8002e1a <EXTI15_10_IRQHandler+0x2a>
	{

		if (EXTI_CallBack[10] != NULL) // then call the callback function
 8002e00:	4b37      	ldr	r3, [pc, #220]	; (8002ee0 <EXTI15_10_IRQHandler+0xf0>)
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <EXTI15_10_IRQHandler+0x1e>
		{
			EXTI_CallBack[10]();
 8002e08:	4b35      	ldr	r3, [pc, #212]	; (8002ee0 <EXTI15_10_IRQHandler+0xf0>)
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 10);
 8002e0e:	4b33      	ldr	r3, [pc, #204]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	4a32      	ldr	r2, [pc, #200]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002e14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e18:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 11))
 8002e1a:	4b30      	ldr	r3, [pc, #192]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00c      	beq.n	8002e40 <EXTI15_10_IRQHandler+0x50>
	{

		if (EXTI_CallBack[11] != NULL) // then call the callback function
 8002e26:	4b2e      	ldr	r3, [pc, #184]	; (8002ee0 <EXTI15_10_IRQHandler+0xf0>)
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <EXTI15_10_IRQHandler+0x44>
		{
			EXTI_CallBack[11]();
 8002e2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <EXTI15_10_IRQHandler+0xf0>)
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 11);
 8002e34:	4b29      	ldr	r3, [pc, #164]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	4a28      	ldr	r2, [pc, #160]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002e3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e3e:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 12))
 8002e40:	4b26      	ldr	r3, [pc, #152]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00c      	beq.n	8002e66 <EXTI15_10_IRQHandler+0x76>
	{

		if (EXTI_CallBack[12] != NULL) // then call the callback function
 8002e4c:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <EXTI15_10_IRQHandler+0xf0>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <EXTI15_10_IRQHandler+0x6a>
		{
			EXTI_CallBack[12]();
 8002e54:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <EXTI15_10_IRQHandler+0xf0>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 12);
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e64:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 13))
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00c      	beq.n	8002e8c <EXTI15_10_IRQHandler+0x9c>
	{

		if (EXTI_CallBack[13] != NULL) // then call the callback function
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <EXTI15_10_IRQHandler+0xf0>)
 8002e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <EXTI15_10_IRQHandler+0x90>
		{
			EXTI_CallBack[13]();
 8002e7a:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <EXTI15_10_IRQHandler+0xf0>)
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 13);
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	4a15      	ldr	r2, [pc, #84]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002e86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e8a:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 14))
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00c      	beq.n	8002eb2 <EXTI15_10_IRQHandler+0xc2>
	{
		if (EXTI_CallBack[14] != NULL) // then call the callback function
 8002e98:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <EXTI15_10_IRQHandler+0xf0>)
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <EXTI15_10_IRQHandler+0xb6>
		{
			EXTI_CallBack[14]();
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <EXTI15_10_IRQHandler+0xf0>)
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 14);
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb0:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1 << 15))
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <EXTI15_10_IRQHandler+0xe8>
	{
		if (EXTI_CallBack[15] != NULL) // then call the callback function
 8002ebe:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <EXTI15_10_IRQHandler+0xf0>)
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <EXTI15_10_IRQHandler+0xdc>
		{
			EXTI_CallBack[15]();
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <EXTI15_10_IRQHandler+0xf0>)
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	4798      	blx	r3
		}
		EXTI->PR |= (1 << 15);
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	4a02      	ldr	r2, [pc, #8]	; (8002edc <EXTI15_10_IRQHandler+0xec>)
 8002ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed6:	6153      	str	r3, [r2, #20]
	}
}
 8002ed8:	bf00      	nop
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40013c00 	.word	0x40013c00
 8002ee0:	20012e3c 	.word	0x20012e3c

08002ee4 <MCAL_RCC_SetAHBPrescaller>:
u8 APB_PreScaler[4] = { 2, 4 , 8, 16};



void MCAL_RCC_SetAHBPrescaller(u8 AHBPrescaller)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0xF << 4);
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <MCAL_RCC_SetAHBPrescaller+0x34>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	4a09      	ldr	r2, [pc, #36]	; (8002f18 <MCAL_RCC_SetAHBPrescaller+0x34>)
 8002ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef8:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (AHBPrescaller << 4);         //AHB  pre-scaler
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <MCAL_RCC_SetAHBPrescaller+0x34>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	79fa      	ldrb	r2, [r7, #7]
 8002f00:	0112      	lsls	r2, r2, #4
 8002f02:	4611      	mov	r1, r2
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <MCAL_RCC_SetAHBPrescaller+0x34>)
 8002f06:	430b      	orrs	r3, r1
 8002f08:	6093      	str	r3, [r2, #8]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800

08002f1c <MCAL_RCC_SetAPB1Prescaller>:

void MCAL_RCC_SetAPB1Prescaller(u8 APB1Prescaller)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0x7 << 10);
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <MCAL_RCC_SetAPB1Prescaller+0x34>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	4a09      	ldr	r2, [pc, #36]	; (8002f50 <MCAL_RCC_SetAPB1Prescaller+0x34>)
 8002f2c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002f30:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (APB1Prescaller << 10);      //APB1 pre-scaler
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <MCAL_RCC_SetAPB1Prescaller+0x34>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	79fa      	ldrb	r2, [r7, #7]
 8002f38:	0292      	lsls	r2, r2, #10
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <MCAL_RCC_SetAPB1Prescaller+0x34>)
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	6093      	str	r3, [r2, #8]
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800

08002f54 <MCAL_RCC_SetAPB2Prescaller>:

void MCAL_RCC_SetAPB2Prescaller(u8 APB2Prescaller)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0x7 << 13);
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <MCAL_RCC_SetAPB2Prescaller+0x34>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <MCAL_RCC_SetAPB2Prescaller+0x34>)
 8002f64:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002f68:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (APB2Prescaller << 13);      //APB2 pre-scaler
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <MCAL_RCC_SetAPB2Prescaller+0x34>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	79fa      	ldrb	r2, [r7, #7]
 8002f70:	0352      	lsls	r2, r2, #13
 8002f72:	4611      	mov	r1, r2
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <MCAL_RCC_SetAPB2Prescaller+0x34>)
 8002f76:	430b      	orrs	r3, r1
 8002f78:	6093      	str	r3, [r2, #8]
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40023800 	.word	0x40023800

08002f8c <MCAL_RCC_SelectSystemClockSource>:



ES_t MCAL_RCC_SelectSystemClockSource(u8 SysClkSrc)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]

	ES_t errorState =ES_NOT_OK;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]

	if(SysClkSrc == MCAL_RCC_SYSCLK_HSE_CRYSTAL)
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d108      	bne.n	8002fb2 <MCAL_RCC_SelectSystemClockSource+0x26>
	{
		EnableHSE_crys(); // enable the HSE
 8002fa0:	f000 f8fa 	bl	8003198 <EnableHSE_crys>
		SelectHSE();      // select HSE
 8002fa4:	f000 f93a 	bl	800321c <SelectHSE>
		DisableHSI();     // disable HSI
 8002fa8:	f000 f964 	bl	8003274 <DisableHSI>
		errorState =ES_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e016      	b.n	8002fe0 <MCAL_RCC_SelectSystemClockSource+0x54>
	}
	else if(SysClkSrc == MCAL_RCC_SYSCLK_HSE_RC)
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d108      	bne.n	8002fca <MCAL_RCC_SelectSystemClockSource+0x3e>
	{
		EnableHSE_rc();    // enable the HSE
 8002fb8:	f000 f904 	bl	80031c4 <EnableHSE_rc>
		SelectHSE();       // select HSE
 8002fbc:	f000 f92e 	bl	800321c <SelectHSE>
		DisableHSI();      // disable HSI
 8002fc0:	f000 f958 	bl	8003274 <DisableHSI>
		errorState =ES_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e00a      	b.n	8002fe0 <MCAL_RCC_SelectSystemClockSource+0x54>
	}
	else if(SysClkSrc == MCAL_RCC_SYSCLK_HSI)
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d107      	bne.n	8002fe0 <MCAL_RCC_SelectSystemClockSource+0x54>
	{
		EnableHSI();      // enable the HSI
 8002fd0:	f000 f93a 	bl	8003248 <EnableHSI>
		SelectHSI();      // select HSI
 8002fd4:	f000 f95e 	bl	8003294 <SelectHSI>
		DisableHSE();     // disable HSE
 8002fd8:	f000 f90a 	bl	80031f0 <DisableHSE>
		errorState =ES_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
	else if(SysClkSrc == MCAL_RCC_SYSCLK_PLL)
	{

	}

	return errorState;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <MCAL_RCC_AHB1PeriphClockEnable>:


ES_t MCAL_RCC_AHB1PeriphClockEnable(u8 PerNum)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]

	SET_BIT(RCC->AHB1ENR,PerNum);
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <MCAL_RCC_AHB1PeriphClockEnable+0x34>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	79fa      	ldrb	r2, [r7, #7]
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f202 	lsl.w	r2, r1, r2
 8003006:	4611      	mov	r1, r2
 8003008:	4a05      	ldr	r2, [pc, #20]	; (8003020 <MCAL_RCC_AHB1PeriphClockEnable+0x34>)
 800300a:	430b      	orrs	r3, r1
 800300c:	6313      	str	r3, [r2, #48]	; 0x30

	errorState = ES_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]

	return errorState;
 8003012:	7bfb      	ldrb	r3, [r7, #15]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40023800 	.word	0x40023800

08003024 <MCAL_RCC_APB1PeriphClockEnable>:
	return errorState;
}


ES_t MCAL_RCC_APB1PeriphClockEnable(u8 PerNum)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]

	SET_BIT(RCC->APB1ENR,PerNum);
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <MCAL_RCC_APB1PeriphClockEnable+0x34>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	79fa      	ldrb	r2, [r7, #7]
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f202 	lsl.w	r2, r1, r2
 800303e:	4611      	mov	r1, r2
 8003040:	4a05      	ldr	r2, [pc, #20]	; (8003058 <MCAL_RCC_APB1PeriphClockEnable+0x34>)
 8003042:	430b      	orrs	r3, r1
 8003044:	6413      	str	r3, [r2, #64]	; 0x40

	errorState = ES_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]

	return errorState;
 800304a:	7bfb      	ldrb	r3, [r7, #15]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40023800 	.word	0x40023800

0800305c <MCAL_RCC_AHB1PeriphClockDisable>:
	return errorState;
}


ES_t MCAL_RCC_AHB1PeriphClockDisable(u8 PerNum)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]

	CLR_BIT(RCC->AHB1ENR,PerNum);
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <MCAL_RCC_AHB1PeriphClockDisable+0x38>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	79fa      	ldrb	r2, [r7, #7]
 8003070:	2101      	movs	r1, #1
 8003072:	fa01 f202 	lsl.w	r2, r1, r2
 8003076:	43d2      	mvns	r2, r2
 8003078:	4611      	mov	r1, r2
 800307a:	4a06      	ldr	r2, [pc, #24]	; (8003094 <MCAL_RCC_AHB1PeriphClockDisable+0x38>)
 800307c:	400b      	ands	r3, r1
 800307e:	6313      	str	r3, [r2, #48]	; 0x30

	errorState = ES_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]

	return errorState;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <MCAL_RCC_APB1PeriphClockDisable>:
	return errorState;
}


ES_t MCAL_RCC_APB1PeriphClockDisable(u8 PerNum)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
	ES_t errorState = ES_NOT_OK;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]

	CLR_BIT(RCC->APB1ENR,PerNum);
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <MCAL_RCC_APB1PeriphClockDisable+0x38>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	79fa      	ldrb	r2, [r7, #7]
 80030ac:	2101      	movs	r1, #1
 80030ae:	fa01 f202 	lsl.w	r2, r1, r2
 80030b2:	43d2      	mvns	r2, r2
 80030b4:	4611      	mov	r1, r2
 80030b6:	4a06      	ldr	r2, [pc, #24]	; (80030d0 <MCAL_RCC_APB1PeriphClockDisable+0x38>)
 80030b8:	400b      	ands	r3, r1
 80030ba:	6413      	str	r3, [r2, #64]	; 0x40

	errorState = ES_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	73fb      	strb	r3, [r7, #15]

	return errorState;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800

080030d4 <MCAL_RCC_GetAPB1Value>:
	return errorState;
}


ES_t MCAL_RCC_GetAPB1Value(u32 *APB2Value)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	ES_t errorState = ES_NOT_OK;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
	u32 PCLK1,SystemClk;
	u8 ClockSource, Temp,APB1Prescaler;
	u16 AHBPrescaler;


	ClockSource = ((RCC->CFGR >> RCC_CFGR_SWS0) & 0x3);
 80030e0:	4b28      	ldr	r3, [pc, #160]	; (8003184 <MCAL_RCC_GetAPB1Value+0xb0>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	73bb      	strb	r3, [r7, #14]

	if(ClockSource == 0 )
 80030ee:	7bbb      	ldrb	r3, [r7, #14]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <MCAL_RCC_GetAPB1Value+0x26>
	{
		SystemClk = 16000000; //HSI
 80030f4:	4b24      	ldr	r3, [pc, #144]	; (8003188 <MCAL_RCC_GetAPB1Value+0xb4>)
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	e00a      	b.n	8003110 <MCAL_RCC_GetAPB1Value+0x3c>
	}
	else if(ClockSource == 1)
 80030fa:	7bbb      	ldrb	r3, [r7, #14]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d102      	bne.n	8003106 <MCAL_RCC_GetAPB1Value+0x32>
	{
		SystemClk = 8000000; //HSE
 8003100:	4b22      	ldr	r3, [pc, #136]	; (800318c <MCAL_RCC_GetAPB1Value+0xb8>)
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	e004      	b.n	8003110 <MCAL_RCC_GetAPB1Value+0x3c>
	}
	else if (ClockSource == 2)
 8003106:	7bbb      	ldrb	r3, [r7, #14]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d001      	beq.n	8003110 <MCAL_RCC_GetAPB1Value+0x3c>
	{
		// PLL
	}
	else
	{
		return errorState;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	e032      	b.n	8003176 <MCAL_RCC_GetAPB1Value+0xa2>
	}

	//for AHB pre-scaler
	Temp = ((RCC->CFGR >> 4 ) & 0xF);
 8003110:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <MCAL_RCC_GetAPB1Value+0xb0>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	737b      	strb	r3, [r7, #13]

	if(Temp < 8)
 800311e:	7b7b      	ldrb	r3, [r7, #13]
 8003120:	2b07      	cmp	r3, #7
 8003122:	d802      	bhi.n	800312a <MCAL_RCC_GetAPB1Value+0x56>
	{
		AHBPrescaler = 1;
 8003124:	2301      	movs	r3, #1
 8003126:	823b      	strh	r3, [r7, #16]
 8003128:	e005      	b.n	8003136 <MCAL_RCC_GetAPB1Value+0x62>
	}
	else
	{
		AHBPrescaler = AHB_PreScaler[Temp-8];
 800312a:	7b7b      	ldrb	r3, [r7, #13]
 800312c:	3b08      	subs	r3, #8
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <MCAL_RCC_GetAPB1Value+0xbc>)
 8003130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003134:	823b      	strh	r3, [r7, #16]
	}


	//apb1
	Temp = ((RCC->CFGR >> 10 ) & 0x7);
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <MCAL_RCC_GetAPB1Value+0xb0>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	0a9b      	lsrs	r3, r3, #10
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	737b      	strb	r3, [r7, #13]

	if(Temp < 4)
 8003144:	7b7b      	ldrb	r3, [r7, #13]
 8003146:	2b03      	cmp	r3, #3
 8003148:	d802      	bhi.n	8003150 <MCAL_RCC_GetAPB1Value+0x7c>
	{
		APB1Prescaler = 1;
 800314a:	2301      	movs	r3, #1
 800314c:	74fb      	strb	r3, [r7, #19]
 800314e:	e004      	b.n	800315a <MCAL_RCC_GetAPB1Value+0x86>
	}
	else
	{
		APB1Prescaler = APB_PreScaler[Temp-4];
 8003150:	7b7b      	ldrb	r3, [r7, #13]
 8003152:	3b04      	subs	r3, #4
 8003154:	4a0f      	ldr	r2, [pc, #60]	; (8003194 <MCAL_RCC_GetAPB1Value+0xc0>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	74fb      	strb	r3, [r7, #19]
	}

	PCLK1 =  (SystemClk / AHBPrescaler) /APB1Prescaler;
 800315a:	8a3b      	ldrh	r3, [r7, #16]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	60bb      	str	r3, [r7, #8]
	errorState = ES_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]

	*APB2Value = PCLK1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	601a      	str	r2, [r3, #0]

	return errorState;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	00f42400 	.word	0x00f42400
 800318c:	007a1200 	.word	0x007a1200
 8003190:	2000001c 	.word	0x2000001c
 8003194:	2000002c 	.word	0x2000002c

08003198 <EnableHSE_crys>:


/****************************************** static functions ********************************************/

static void EnableHSE_crys(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR,RCC_CR_HSEON);
 800319c:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <EnableHSE_crys+0x28>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a07      	ldr	r2, [pc, #28]	; (80031c0 <EnableHSE_crys+0x28>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->CR,RCC_CR_HSYBYP);
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <EnableHSE_crys+0x28>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <EnableHSE_crys+0x28>)
 80031ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800

080031c4 <EnableHSE_rc>:

static void EnableHSE_rc(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR,RCC_CR_HSEON);
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <EnableHSE_rc+0x28>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a07      	ldr	r2, [pc, #28]	; (80031ec <EnableHSE_rc+0x28>)
 80031ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->CR,RCC_CR_HSYBYP);
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <EnableHSE_rc+0x28>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <EnableHSE_rc+0x28>)
 80031da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031de:	6013      	str	r3, [r2, #0]
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800

080031f0 <DisableHSE>:

static void DisableHSE(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
	CLR_BIT(RCC->CR,RCC_CR_HSEON);
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <DisableHSE+0x28>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a07      	ldr	r2, [pc, #28]	; (8003218 <DisableHSE+0x28>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC->CR,RCC_CR_HSYBYP);
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <DisableHSE+0x28>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <DisableHSE+0x28>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320a:	6013      	str	r3, [r2, #0]
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800

0800321c <SelectHSE>:

static void SelectHSE(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CFGR,RCC_CFGR_SW0);
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <SelectHSE+0x28>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a07      	ldr	r2, [pc, #28]	; (8003244 <SelectHSE+0x28>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6093      	str	r3, [r2, #8]
	CLR_BIT(RCC->CFGR,RCC_CFGR_SW1);
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <SelectHSE+0x28>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a04      	ldr	r2, [pc, #16]	; (8003244 <SelectHSE+0x28>)
 8003232:	f023 0302 	bic.w	r3, r3, #2
 8003236:	6093      	str	r3, [r2, #8]
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800

08003248 <EnableHSI>:


static void EnableHSI(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR,RCC_CR_HSION);
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <EnableHSI+0x28>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a07      	ldr	r2, [pc, #28]	; (8003270 <EnableHSI+0x28>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->CR,7);  // HSITRIM[4:0]=0x8
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <EnableHSI+0x28>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <EnableHSI+0x28>)
 800325e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003262:	6013      	str	r3, [r2, #0]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800

08003274 <DisableHSI>:

static void DisableHSI(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
	CLR_BIT(RCC->CR,RCC_CR_HSION);
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <DisableHSI+0x1c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a04      	ldr	r2, [pc, #16]	; (8003290 <DisableHSI+0x1c>)
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	6013      	str	r3, [r2, #0]
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800

08003294 <SelectHSI>:



static void SelectHSI(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
	CLR_BIT(RCC->CFGR,RCC_CFGR_SW0);
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <SelectHSI+0x28>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4a07      	ldr	r2, [pc, #28]	; (80032bc <SelectHSI+0x28>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6093      	str	r3, [r2, #8]
	CLR_BIT(RCC->CFGR,RCC_CFGR_SW1);
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <SelectHSI+0x28>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <SelectHSI+0x28>)
 80032aa:	f023 0302 	bic.w	r3, r3, #2
 80032ae:	6093      	str	r3, [r2, #8]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800

080032c0 <MCAL_USART_Enable>:
#include "error_state.h"
#include "stm32f407x_usart.h"
#include "stm32f4xxx_rcc.h"

void MCAL_USART_Enable(USART_RegDef_t *pUSARTx)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_UE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	60da      	str	r2, [r3, #12]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <MCAL_USART_EnableRxOnly>:
{
	CLR_BIT(pUSARTx->CR1 ,MCAL_USART_CR1_UE);
}

void MCAL_USART_EnableRxOnly(USART_RegDef_t *pUSARTx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_RE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f043 0204 	orr.w	r2, r3, #4
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	60da      	str	r2, [r3, #12]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_TE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f023 0208 	bic.w	r2, r3, #8
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <MCAL_USART_EnableTxOnly>:

void MCAL_USART_EnableTxOnly(USART_RegDef_t *pUSARTx)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_RE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f023 0204 	bic.w	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_TE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f043 0208 	orr.w	r2, r3, #8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	60da      	str	r2, [r3, #12]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <MCAL_USART_EnableRxTx>:

void MCAL_USART_EnableRxTx(USART_RegDef_t *pUSARTx)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_RE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f043 0204 	orr.w	r2, r3, #4
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	60da      	str	r2, [r3, #12]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_TE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f043 0208 	orr.w	r2, r3, #8
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60da      	str	r2, [r3, #12]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <MCAL_USART_SetWordLen8Bit>:

void MCAL_USART_SetWordLen8Bit(USART_RegDef_t *pUSARTx)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_M);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	60da      	str	r2, [r3, #12]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <MCAL_USART_SetWordLen9Bit>:

void MCAL_USART_SetWordLen9Bit(USART_RegDef_t *pUSARTx)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_M);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	60da      	str	r2, [r3, #12]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <MCAL_USART_EnableOddParity>:

void MCAL_USART_EnableOddParity(USART_RegDef_t *pUSARTx)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_PCE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	60da      	str	r2, [r3, #12]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_PS);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <MCAL_USART_EnableEvenParity>:

void MCAL_USART_EnableEvenParity(USART_RegDef_t *pUSARTx)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_PCE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	60da      	str	r2, [r3, #12]
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_PS);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <MCAL_USART_DisableParity>:

void MCAL_USART_DisableParity(USART_RegDef_t *pUSARTx)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_PCE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_PS);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	60da      	str	r2, [r3, #12]

}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <MCAL_USART_SetStopConfig>:

void MCAL_USART_SetStopConfig(USART_RegDef_t *pUSARTx,u8 StopBitConfig)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
	if(StopBitConfig < MCAL_USART_STOPBITS_1_5)
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d806      	bhi.n	8003448 <MCAL_USART_SetStopConfig+0x20>
	{
		pUSARTx->CR2 |= StopBitConfig << MCAL_USART_CR2_STOP;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	0312      	lsls	r2, r2, #12
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	611a      	str	r2, [r3, #16]
	}

}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <MCAL_USART_DisableTXEI>:
{
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_TXEIE);
}

void MCAL_USART_DisableTXEI(USART_RegDef_t *pUSARTx)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_TXEIE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <MCAL_USART_ReadTXEI>:

u8 MCAL_USART_ReadTXEI(USART_RegDef_t *pUSARTx)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	return GET_BIT(pUSARTx->CR1,MCAL_USART_CR1_TXEIE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	09db      	lsrs	r3, r3, #7
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	b2db      	uxtb	r3, r3
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <MCAL_USART_DisableRXNI>:
{
	SET_BIT(pUSARTx->CR1,MCAL_USART_CR1_RXNEIE);
}

void MCAL_USART_DisableRXNI(USART_RegDef_t *pUSARTx)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR1,MCAL_USART_CR1_RXNEIE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f023 0220 	bic.w	r2, r3, #32
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	60da      	str	r2, [r3, #12]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <MCAL_USART_ReadRXNI>:


u8 MCAL_USART_ReadRXNI(USART_RegDef_t *pUSARTx)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
	return GET_BIT(pUSARTx->CR1,MCAL_USART_CR1_RXNEIE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	b2db      	uxtb	r3, r3
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <MCAL_USART_EnableCTSFlowControl>:

/*
 * HW flow control
 */
void MCAL_USART_EnableCTSFlowControl(USART_RegDef_t *pUSARTx)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR3,MCAL_USART_CR3_CTSE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	615a      	str	r2, [r3, #20]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <MCAL_USART_DisableCTSFlowControl>:

void MCAL_USART_DisableCTSFlowControl(USART_RegDef_t *pUSARTx)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR3,MCAL_USART_CR3_CTSE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	615a      	str	r2, [r3, #20]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <MCAL_USART_EnableRTSFlowControl>:


void MCAL_USART_EnableRTSFlowControl(USART_RegDef_t *pUSARTx)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	SET_BIT(pUSARTx->CR3,MCAL_USART_CR3_RTSE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	615a      	str	r2, [r3, #20]
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <MCAL_USART_DisableRTSFlowControl>:

void MCAL_USART_DisableRTSFlowControl(USART_RegDef_t *pUSARTx)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	CLR_BIT(pUSARTx->CR3,MCAL_USART_CR3_RTSE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	615a      	str	r2, [r3, #20]
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <MCAL_USART_SetBaudRateValue>:

/*
 * baud rate
 */
void MCAL_USART_SetBaudRateValue(USART_RegDef_t *pUSARTx, u32 BaudRate)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
	u32 usartdiv;

	//variables to hold Mantissa and Fraction values
	u32 M_part,F_part;

	u32 tempreg=0;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a33      	ldr	r2, [pc, #204]	; (8003638 <MCAL_USART_SetBaudRateValue+0xe0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d003      	beq.n	8003576 <MCAL_USART_SetBaudRateValue+0x1e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a32      	ldr	r2, [pc, #200]	; (800363c <MCAL_USART_SetBaudRateValue+0xe4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d105      	bne.n	8003582 <MCAL_USART_SetBaudRateValue+0x2a>
	{
		//USART1 and USART6 are hanging on APB2 bus
		RCC_enuGetAPB1Value(&PCLKx);
 8003576:	f107 030c 	add.w	r3, r7, #12
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f991 	bl	80038a2 <RCC_enuGetAPB1Value>
 8003580:	e004      	b.n	800358c <MCAL_USART_SetBaudRateValue+0x34>
	}
	else
	{
		RCC_enuGetAPB1Value(&PCLKx);
 8003582:	f107 030c 	add.w	r3, r7, #12
 8003586:	4618      	mov	r0, r3
 8003588:	f000 f98b 	bl	80038a2 <RCC_enuGetAPB1Value>
	}


	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << MCAL_USART_CR1_OVER8))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00b      	beq.n	80035b0 <MCAL_USART_SetBaudRateValue+0x58>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009a      	lsls	r2, r3, #2
 80035a2:	441a      	add	r2, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e00a      	b.n	80035c6 <MCAL_USART_SetBaudRateValue+0x6e>
	}
	else
	{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009a      	lsls	r2, r3, #2
 80035ba:	441a      	add	r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	61fb      	str	r3, [r7, #28]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <MCAL_USART_SetBaudRateValue+0xe8>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	613b      	str	r3, [r7, #16]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2264      	movs	r2, #100	; 0x64
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	61bb      	str	r3, [r7, #24]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << MCAL_USART_CR1_OVER8))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <MCAL_USART_SetBaudRateValue+0xb4>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100)& ((u8)0x07);
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	3332      	adds	r3, #50	; 0x32
 80035fc:	4a10      	ldr	r2, [pc, #64]	; (8003640 <MCAL_USART_SetBaudRateValue+0xe8>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	e009      	b.n	8003620 <MCAL_USART_SetBaudRateValue+0xc8>

	}else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((u8)0x0F);
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	3332      	adds	r3, #50	; 0x32
 8003612:	4a0b      	ldr	r2, [pc, #44]	; (8003640 <MCAL_USART_SetBaudRateValue+0xe8>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	61bb      	str	r3, [r7, #24]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	609a      	str	r2, [r3, #8]

}
 800362e:	bf00      	nop
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40001000 	.word	0x40001000
 800363c:	40001400 	.word	0x40001400
 8003640:	51eb851f 	.word	0x51eb851f

08003644 <MCAL_USART_GetFlagStatus>:

u8 MCAL_USART_GetFlagStatus(USART_RegDef_t *pUSARTx, u8 StatusFlagName)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <MCAL_USART_GetFlagStatus+0x1c>
    {
    	return SET;
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <MCAL_USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <MCAL_USART_WriteData>:
	pUSARTx->SR &=~ StatusFlagName;
}


void MCAL_USART_WriteData(USART_RegDef_t *pUSARTx, u16 Data)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	807b      	strh	r3, [r7, #2]
	pUSARTx->DR = Data;
 800367a:	887a      	ldrh	r2, [r7, #2]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	605a      	str	r2, [r3, #4]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <MCAL_USART_ReadData>:

u16 MCAL_USART_ReadData(USART_RegDef_t *pUSARTx)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
	return pUSARTx->DR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	b29b      	uxth	r3, r3
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <GPIO_enuInit>:

/*
 * Init and De-init
 */
ES_t GPIO_enuInit(GPIO_Handle_t *Copy_pstrGPIOHandle)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrSt = ES_NOT_OK;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]

	GPIO_RegDef_t *Local_pstrGPIOx = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]


	/*
	 * 1. select the base address
	 */
	MCAL_GPIO_SelectPort(Copy_pstrGPIOHandle->GPIO_Port,&Local_pstrGPIOx);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	f107 0208 	add.w	r2, r7, #8
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff f887 	bl	80027d4 <MCAL_GPIO_SelectPort>

	/*
	 * 2. Configure the mode
	 */
	if(Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinMode <= GPIO_Mode_inputAnal)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	795b      	ldrb	r3, [r3, #5]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d818      	bhi.n	8003700 <GPIO_enuInit+0x5a>
	{

		/*Non-Interrupt mode*/

		// alternative function mode
		if (Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinMode == GPIO_Mode_altFun)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	795b      	ldrb	r3, [r3, #5]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d109      	bne.n	80036ea <GPIO_enuInit+0x44>
		{
			Local_enuErrSt = MCAL_GPIO_SetAltFuncMode(Local_pstrGPIOx,
 80036d6:	68b8      	ldr	r0, [r7, #8]
				Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7919      	ldrb	r1, [r3, #4]
			Local_enuErrSt = MCAL_GPIO_SetAltFuncMode(Local_pstrGPIOx,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7a5b      	ldrb	r3, [r3, #9]
 80036e0:	461a      	mov	r2, r3
 80036e2:	f7ff f97a 	bl	80029da <MCAL_GPIO_SetAltFuncMode>
 80036e6:	4603      	mov	r3, r0
 80036e8:	73fb      	strb	r3, [r7, #15]
				Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinAltFunMode);
		}


		// normal modes
		Local_enuErrSt = MCAL_GPIO_SetPinMode(Local_pstrGPIOx,
 80036ea:	68b8      	ldr	r0, [r7, #8]
				Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7919      	ldrb	r1, [r3, #4]
				Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinMode);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	795b      	ldrb	r3, [r3, #5]
		Local_enuErrSt = MCAL_GPIO_SetPinMode(Local_pstrGPIOx,
 80036f4:	461a      	mov	r2, r3
 80036f6:	f7ff f8d3 	bl	80028a0 <MCAL_GPIO_SetPinMode>
 80036fa:	4603      	mov	r3, r0
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	e024      	b.n	800374a <GPIO_enuInit+0xa4>
	else
	{
		/*Interrupt mode*/

		//Configure the edge trigger
		Local_enuErrSt = MCAL_EXTI_SetEdgeTrig(Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	791a      	ldrb	r2, [r3, #4]
				Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinMode);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	795b      	ldrb	r3, [r3, #5]
		Local_enuErrSt = MCAL_EXTI_SetEdgeTrig(Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f7ff f9bc 	bl	8002a88 <MCAL_EXTI_SetEdgeTrig>
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]

		// Configure the GPIO port selection in SYSCFG_EXTICR
		Local_enuErrSt = MCAL_SYSCFG_SellectEXTIChannel(Copy_pstrGPIOHandle->GPIO_Port,Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	791b      	ldrb	r3, [r3, #4]
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f7ff fa14 	bl	8002b4c <MCAL_SYSCFG_SellectEXTIChannel>
 8003724:	4603      	mov	r3, r0
 8003726:	73fb      	strb	r3, [r7, #15]

		// Set Callback function
		Local_enuErrSt = MCAL_EXTI_SetCallBack(Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	791a      	ldrb	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4619      	mov	r1, r3
 8003732:	4610      	mov	r0, r2
 8003734:	f7ff fa4c 	bl	8002bd0 <MCAL_EXTI_SetCallBack>
 8003738:	4603      	mov	r3, r0
 800373a:	73fb      	strb	r3, [r7, #15]
				Copy_pstrGPIOHandle->GPIO_Config.EXTI_pfCallBackFunc);

		// Enable the EXTI line
		Local_enuErrSt = MCAL_EXTI_EnableLine(Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	791b      	ldrb	r3, [r3, #4]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fa29 	bl	8002b98 <MCAL_EXTI_EnableLine>
 8003746:	4603      	mov	r3, r0
 8003748:	73fb      	strb	r3, [r7, #15]
	}

	/*
	 * 3. Speed selection
	 */
	Local_enuErrSt = MCAL_GPIO_SelectSpeed(Local_pstrGPIOx,
 800374a:	68b8      	ldr	r0, [r7, #8]
			Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7919      	ldrb	r1, [r3, #4]
			Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinSpeed);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	799b      	ldrb	r3, [r3, #6]
	Local_enuErrSt = MCAL_GPIO_SelectSpeed(Local_pstrGPIOx,
 8003754:	461a      	mov	r2, r3
 8003756:	f7ff f8ce 	bl	80028f6 <MCAL_GPIO_SelectSpeed>
 800375a:	4603      	mov	r3, r0
 800375c:	73fb      	strb	r3, [r7, #15]


	/*
	 *4. pull up/ pull down
	 */
	Local_enuErrSt = MCAL_GPIO_SetPullUpPullDown(Local_pstrGPIOx,
 800375e:	68b8      	ldr	r0, [r7, #8]
			Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	7919      	ldrb	r1, [r3, #4]
			Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinPuPdControl);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	79db      	ldrb	r3, [r3, #7]
	Local_enuErrSt = MCAL_GPIO_SetPullUpPullDown(Local_pstrGPIOx,
 8003768:	461a      	mov	r2, r3
 800376a:	f7ff f8ea 	bl	8002942 <MCAL_GPIO_SetPullUpPullDown>
 800376e:	4603      	mov	r3, r0
 8003770:	73fb      	strb	r3, [r7, #15]


	/*
	 *5. output type
	 */
	Local_enuErrSt = MCAL_GPIO_SelectPinOutputType(Local_pstrGPIOx,
 8003772:	68b8      	ldr	r0, [r7, #8]
			Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinNumber,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	7919      	ldrb	r1, [r3, #4]
			Copy_pstrGPIOHandle->GPIO_Config.GPIO_PinOPType);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	7a1b      	ldrb	r3, [r3, #8]
	Local_enuErrSt = MCAL_GPIO_SelectPinOutputType(Local_pstrGPIOx,
 800377c:	461a      	mov	r2, r3
 800377e:	f7ff f908 	bl	8002992 <MCAL_GPIO_SelectPinOutputType>
 8003782:	4603      	mov	r3, r0
 8003784:	73fb      	strb	r3, [r7, #15]


	return Local_enuErrSt;
 8003786:	7bfb      	ldrb	r3, [r7, #15]

}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <GPIO_enuToggleOutputPin>:
}



ES_t GPIO_enuToggleOutputPin(GPIO_Port_t Copy_enuGPIOPort, GPIO_Pin_t Copy_enuGPIOPin)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	460a      	mov	r2, r1
 800379a:	71fb      	strb	r3, [r7, #7]
 800379c:	4613      	mov	r3, r2
 800379e:	71bb      	strb	r3, [r7, #6]
	ES_t Local_enuErrSt = ES_NOT_OK;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]

	GPIO_RegDef_t *Local_pstrGPIOx = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60bb      	str	r3, [r7, #8]

	MCAL_GPIO_SelectPort(Copy_enuGPIOPort,&Local_pstrGPIOx);
 80037a8:	f107 0208 	add.w	r2, r7, #8
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff f80f 	bl	80027d4 <MCAL_GPIO_SelectPort>
	Local_enuErrSt = MCAL_GPIO_TogglePin(Local_pstrGPIOx, Copy_enuGPIOPin);
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	79ba      	ldrb	r2, [r7, #6]
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff f949 	bl	8002a54 <MCAL_GPIO_TogglePin>
 80037c2:	4603      	mov	r3, r0
 80037c4:	73fb      	strb	r3, [r7, #15]
	Local_pstrGPIOx = GPIOH;
 80037c6:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <GPIO_enuToggleOutputPin+0x44>)
 80037c8:	60bb      	str	r3, [r7, #8]
	return Local_enuErrSt;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021c00 	.word	0x40021c00

080037d8 <RCC_enuInitSystemClk>:

#include "stm32f407x_rcc.h"
#include "stm32f4xxx_rcc.h"

ES_t RCC_enuInitSystemClk(RCC_Handler_t *Copy_pstrRCCConfig)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrSt = ES_NOT_OK;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]

	/**************  set pre-scalers first   **************************/
	MCAL_RCC_SetAHBPrescaller(Copy_pstrRCCConfig->RCC_AHBPrescaler);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fb7b 	bl	8002ee4 <MCAL_RCC_SetAHBPrescaller>
	MCAL_RCC_SetAPB1Prescaller(Copy_pstrRCCConfig->RCC_APB1Prescaler);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	789b      	ldrb	r3, [r3, #2]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fb92 	bl	8002f1c <MCAL_RCC_SetAPB1Prescaller>
	MCAL_RCC_SetAPB2Prescaller(Copy_pstrRCCConfig->RCC_APB2Prescaler);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	78db      	ldrb	r3, [r3, #3]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fba9 	bl	8002f54 <MCAL_RCC_SetAPB2Prescaller>

	/*************  select the system clock source  *******************/
	Local_enuErrSt = MCAL_RCC_SelectSystemClockSource(Copy_pstrRCCConfig->RCC_SysClkSource);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fbc0 	bl	8002f8c <MCAL_RCC_SelectSystemClockSource>
 800380c:	4603      	mov	r3, r0
 800380e:	73fb      	strb	r3, [r7, #15]

	return Local_enuErrSt;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <RCC_enuAHB1PeriphClkCtrl>:

ES_t RCC_enuAHB1PeriphClkCtrl(RCC_AHB1Periph_t Copy_enuPerphNum, u8 Copy_u8EnOrDi)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	4603      	mov	r3, r0
 8003822:	460a      	mov	r2, r1
 8003824:	71fb      	strb	r3, [r7, #7]
 8003826:	4613      	mov	r3, r2
 8003828:	71bb      	strb	r3, [r7, #6]
	ES_t Local_enuErrSt = ES_NOT_OK;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]

	if(Copy_u8EnOrDi == ENABLE)
 800382e:	79bb      	ldrb	r3, [r7, #6]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <RCC_enuAHB1PeriphClkCtrl+0x28>
	{
		Local_enuErrSt = MCAL_RCC_AHB1PeriphClockEnable(Copy_enuPerphNum);
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fbd8 	bl	8002fec <MCAL_RCC_AHB1PeriphClockEnable>
 800383c:	4603      	mov	r3, r0
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e008      	b.n	8003854 <RCC_enuAHB1PeriphClkCtrl+0x3a>

	}
	else if(Copy_u8EnOrDi == DISABLE)
 8003842:	79bb      	ldrb	r3, [r7, #6]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d105      	bne.n	8003854 <RCC_enuAHB1PeriphClkCtrl+0x3a>
	{
		Local_enuErrSt = MCAL_RCC_AHB1PeriphClockDisable(Copy_enuPerphNum);
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fc06 	bl	800305c <MCAL_RCC_AHB1PeriphClockDisable>
 8003850:	4603      	mov	r3, r0
 8003852:	73fb      	strb	r3, [r7, #15]
	}

	return Local_enuErrSt;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <RCC_enuAPB1PeriphClkCtrl>:
}



ES_t RCC_enuAPB1PeriphClkCtrl(RCC_APB1Periph_t Copy_enuPerphNum, u8 Copy_u8EnOrDi)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	4603      	mov	r3, r0
 8003866:	460a      	mov	r2, r1
 8003868:	71fb      	strb	r3, [r7, #7]
 800386a:	4613      	mov	r3, r2
 800386c:	71bb      	strb	r3, [r7, #6]
	ES_t Local_enuErrSt = ES_NOT_OK;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]

	if(Copy_u8EnOrDi == ENABLE)
 8003872:	79bb      	ldrb	r3, [r7, #6]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d106      	bne.n	8003886 <RCC_enuAPB1PeriphClkCtrl+0x28>
	{
		Local_enuErrSt = MCAL_RCC_APB1PeriphClockEnable(Copy_enuPerphNum);
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fbd2 	bl	8003024 <MCAL_RCC_APB1PeriphClockEnable>
 8003880:	4603      	mov	r3, r0
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	e008      	b.n	8003898 <RCC_enuAPB1PeriphClkCtrl+0x3a>
	}
	else if(Copy_u8EnOrDi == DISABLE)
 8003886:	79bb      	ldrb	r3, [r7, #6]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d105      	bne.n	8003898 <RCC_enuAPB1PeriphClkCtrl+0x3a>
	{
		Local_enuErrSt = MCAL_RCC_APB1PeriphClockDisable(Copy_enuPerphNum);
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff fc02 	bl	8003098 <MCAL_RCC_APB1PeriphClockDisable>
 8003894:	4603      	mov	r3, r0
 8003896:	73fb      	strb	r3, [r7, #15]
	}
	return Local_enuErrSt;
 8003898:	7bfb      	ldrb	r3, [r7, #15]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <RCC_enuGetAPB1Value>:

/**********************************************************************************************/


ES_t RCC_enuGetAPB1Value(u32 *Copy_pu8APB2Value)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrSt = ES_NOT_OK;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]

	Local_enuErrSt = MCAL_RCC_GetAPB1Value(Copy_pu8APB2Value);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff fc10 	bl	80030d4 <MCAL_RCC_GetAPB1Value>
 80038b4:	4603      	mov	r3, r0
 80038b6:	73fb      	strb	r3, [r7, #15]

	return Local_enuErrSt;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <USART_enuInit>:
#include "stm32f407x_usart.h"
#include "stm32f4xxx_usart.h"


ES_t USART_enuInit(USART_Handle_t* Copy_pstrUSARTHandler)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrSt = ES_NOT_OK;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]

	if(Copy_pstrUSARTHandler != NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 809e 	beq.w	8003a14 <USART_enuInit+0x150>
	{
		// Get USARTx Base address
		USART_RegDef_t *Local_USARTBaseAddr = MCAL_USART_BASEADDR_TO_CODE(Copy_pstrUSARTHandler->USARTx);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01f      	beq.n	8003920 <USART_enuInit+0x5c>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d019      	beq.n	800391c <USART_enuInit+0x58>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d013      	beq.n	8003918 <USART_enuInit+0x54>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d00d      	beq.n	8003914 <USART_enuInit+0x50>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d007      	beq.n	8003910 <USART_enuInit+0x4c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b05      	cmp	r3, #5
 8003906:	d101      	bne.n	800390c <USART_enuInit+0x48>
 8003908:	4b46      	ldr	r3, [pc, #280]	; (8003a24 <USART_enuInit+0x160>)
 800390a:	e00a      	b.n	8003922 <USART_enuInit+0x5e>
 800390c:	2300      	movs	r3, #0
 800390e:	e008      	b.n	8003922 <USART_enuInit+0x5e>
 8003910:	4b45      	ldr	r3, [pc, #276]	; (8003a28 <USART_enuInit+0x164>)
 8003912:	e006      	b.n	8003922 <USART_enuInit+0x5e>
 8003914:	4b45      	ldr	r3, [pc, #276]	; (8003a2c <USART_enuInit+0x168>)
 8003916:	e004      	b.n	8003922 <USART_enuInit+0x5e>
 8003918:	4b45      	ldr	r3, [pc, #276]	; (8003a30 <USART_enuInit+0x16c>)
 800391a:	e002      	b.n	8003922 <USART_enuInit+0x5e>
 800391c:	4b45      	ldr	r3, [pc, #276]	; (8003a34 <USART_enuInit+0x170>)
 800391e:	e000      	b.n	8003922 <USART_enuInit+0x5e>
 8003920:	4b45      	ldr	r3, [pc, #276]	; (8003a38 <USART_enuInit+0x174>)
 8003922:	60bb      	str	r3, [r7, #8]

		// 1. configure the mode
		if(Copy_pstrUSARTHandler->USART_Config.USART_Mode == USART_Mode_RxOnly)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	791b      	ldrb	r3, [r3, #4]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d103      	bne.n	8003934 <USART_enuInit+0x70>
		{
			MCAL_USART_EnableRxOnly(Local_USARTBaseAddr);
 800392c:	68b8      	ldr	r0, [r7, #8]
 800392e:	f7ff fcd7 	bl	80032e0 <MCAL_USART_EnableRxOnly>
 8003932:	e00e      	b.n	8003952 <USART_enuInit+0x8e>
		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_Mode == USART_Mode_TxOnly)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	791b      	ldrb	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d103      	bne.n	8003944 <USART_enuInit+0x80>
		{
			MCAL_USART_EnableTxOnly(Local_USARTBaseAddr);
 800393c:	68b8      	ldr	r0, [r7, #8]
 800393e:	f7ff fce5 	bl	800330c <MCAL_USART_EnableTxOnly>
 8003942:	e006      	b.n	8003952 <USART_enuInit+0x8e>
		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_Mode == USART_Mode_RxTx)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	791b      	ldrb	r3, [r3, #4]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d102      	bne.n	8003952 <USART_enuInit+0x8e>
		{
			MCAL_USART_EnableRxTx(Local_USARTBaseAddr);
 800394c:	68b8      	ldr	r0, [r7, #8]
 800394e:	f7ff fcf3 	bl	8003338 <MCAL_USART_EnableRxTx>

		}

		//2. configure the word length

		if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_8Bits)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	795b      	ldrb	r3, [r3, #5]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <USART_enuInit+0x9e>
		{
			MCAL_USART_SetWordLen8Bit(Local_USARTBaseAddr);
 800395a:	68b8      	ldr	r0, [r7, #8]
 800395c:	f7ff fd02 	bl	8003364 <MCAL_USART_SetWordLen8Bit>
 8003960:	e006      	b.n	8003970 <USART_enuInit+0xac>
		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_9Bits)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	795b      	ldrb	r3, [r3, #5]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d102      	bne.n	8003970 <USART_enuInit+0xac>
		{
			MCAL_USART_SetWordLen9Bit(Local_USARTBaseAddr);
 800396a:	68b8      	ldr	r0, [r7, #8]
 800396c:	f7ff fd0a 	bl	8003384 <MCAL_USART_SetWordLen9Bit>
		{

		}

		// 3. configure the parity
		if(Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Disable)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	799b      	ldrb	r3, [r3, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <USART_enuInit+0xbc>
		{
			MCAL_USART_DisableParity(Local_USARTBaseAddr);
 8003978:	68b8      	ldr	r0, [r7, #8]
 800397a:	f7ff fd3f 	bl	80033fc <MCAL_USART_DisableParity>
 800397e:	e00e      	b.n	800399e <USART_enuInit+0xda>
		}
		else if (Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Even)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	799b      	ldrb	r3, [r3, #6]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d103      	bne.n	8003990 <USART_enuInit+0xcc>
		{
			MCAL_USART_EnableEvenParity(Local_USARTBaseAddr);
 8003988:	68b8      	ldr	r0, [r7, #8]
 800398a:	f7ff fd21 	bl	80033d0 <MCAL_USART_EnableEvenParity>
 800398e:	e006      	b.n	800399e <USART_enuInit+0xda>
		}
		else if (Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Odd)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	799b      	ldrb	r3, [r3, #6]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d102      	bne.n	800399e <USART_enuInit+0xda>
		{
			MCAL_USART_EnableOddParity(Local_USARTBaseAddr);
 8003998:	68b8      	ldr	r0, [r7, #8]
 800399a:	f7ff fd03 	bl	80033a4 <MCAL_USART_EnableOddParity>

		}

		// 4. configure stop pin

		MCAL_USART_SetStopConfig(Local_USARTBaseAddr, Copy_pstrUSARTHandler->USART_Config.USART_StopBits);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	79db      	ldrb	r3, [r3, #7]
 80039a2:	4619      	mov	r1, r3
 80039a4:	68b8      	ldr	r0, [r7, #8]
 80039a6:	f7ff fd3f 	bl	8003428 <MCAL_USART_SetStopConfig>

		// 5. configure the HW flow control

		if(Copy_pstrUSARTHandler->USART_Config.USART_HwFlowCtrl == USART_HwFlowCtrl_None)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	7a1b      	ldrb	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <USART_enuInit+0xfc>
		{
			MCAL_USART_DisableCTSFlowControl(Local_USARTBaseAddr);
 80039b2:	68b8      	ldr	r0, [r7, #8]
 80039b4:	f7ff fda0 	bl	80034f8 <MCAL_USART_DisableCTSFlowControl>
			MCAL_USART_DisableRTSFlowControl(Local_USARTBaseAddr);
 80039b8:	68b8      	ldr	r0, [r7, #8]
 80039ba:	f7ff fdbd 	bl	8003538 <MCAL_USART_DisableRTSFlowControl>
 80039be:	e01f      	b.n	8003a00 <USART_enuInit+0x13c>
		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_HwFlowCtrl == USART_HwFlowCtrl_CTS)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7a1b      	ldrb	r3, [r3, #8]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d106      	bne.n	80039d6 <USART_enuInit+0x112>
		{
			MCAL_USART_EnableCTSFlowControl(Local_USARTBaseAddr);
 80039c8:	68b8      	ldr	r0, [r7, #8]
 80039ca:	f7ff fd85 	bl	80034d8 <MCAL_USART_EnableCTSFlowControl>
			MCAL_USART_DisableRTSFlowControl(Local_USARTBaseAddr);
 80039ce:	68b8      	ldr	r0, [r7, #8]
 80039d0:	f7ff fdb2 	bl	8003538 <MCAL_USART_DisableRTSFlowControl>
 80039d4:	e014      	b.n	8003a00 <USART_enuInit+0x13c>
		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_HwFlowCtrl == USART_HwFlowCtrl_RTS)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	7a1b      	ldrb	r3, [r3, #8]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d106      	bne.n	80039ec <USART_enuInit+0x128>
		{
			MCAL_USART_DisableCTSFlowControl(Local_USARTBaseAddr);
 80039de:	68b8      	ldr	r0, [r7, #8]
 80039e0:	f7ff fd8a 	bl	80034f8 <MCAL_USART_DisableCTSFlowControl>
			MCAL_USART_EnableRTSFlowControl(Local_USARTBaseAddr);
 80039e4:	68b8      	ldr	r0, [r7, #8]
 80039e6:	f7ff fd97 	bl	8003518 <MCAL_USART_EnableRTSFlowControl>
 80039ea:	e009      	b.n	8003a00 <USART_enuInit+0x13c>
		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_HwFlowCtrl == USART_HwFlowCtrl_CTS_RTS)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	7a1b      	ldrb	r3, [r3, #8]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d105      	bne.n	8003a00 <USART_enuInit+0x13c>
		{
			MCAL_USART_EnableRTSFlowControl(Local_USARTBaseAddr);
 80039f4:	68b8      	ldr	r0, [r7, #8]
 80039f6:	f7ff fd8f 	bl	8003518 <MCAL_USART_EnableRTSFlowControl>
			MCAL_USART_EnableCTSFlowControl(Local_USARTBaseAddr);
 80039fa:	68b8      	ldr	r0, [r7, #8]
 80039fc:	f7ff fd6c 	bl	80034d8 <MCAL_USART_EnableCTSFlowControl>

		}

		//6. configure baud rate

		MCAL_USART_SetBaudRateValue(Local_USARTBaseAddr, Copy_pstrUSARTHandler->USART_Config.USART_BaudRate);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4619      	mov	r1, r3
 8003a06:	68b8      	ldr	r0, [r7, #8]
 8003a08:	f7ff fda6 	bl	8003558 <MCAL_USART_SetBaudRateValue>


		// 7. Enable USARTx

		MCAL_USART_Enable(Local_USARTBaseAddr);
 8003a0c:	68b8      	ldr	r0, [r7, #8]
 8003a0e:	f7ff fc57 	bl	80032c0 <MCAL_USART_Enable>
 8003a12:	e001      	b.n	8003a18 <USART_enuInit+0x154>

	}
	else
	{
		Local_enuErrSt = ES_NULL_PTR;
 8003a14:	2302      	movs	r3, #2
 8003a16:	73fb      	strb	r3, [r7, #15]
	}


	return Local_enuErrSt;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40001400 	.word	0x40001400
 8003a28:	40005000 	.word	0x40005000
 8003a2c:	40004c00 	.word	0x40004c00
 8003a30:	40004800 	.word	0x40004800
 8003a34:	40004400 	.word	0x40004400
 8003a38:	40001000 	.word	0x40001000

08003a3c <USART_enuSendDataSyn>:


ES_t USART_enuSendDataSyn(USART_Handle_t* Copy_pstrUSARTHandler, u8 *Copy_pu8Data,u8 Copy_u8Len)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	71fb      	strb	r3, [r7, #7]
	ES_t Local_enuErrSt = ES_NOT_OK;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	77bb      	strb	r3, [r7, #30]

	if(Copy_pstrUSARTHandler == NULL || Copy_pu8Data == NULL)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <USART_enuSendDataSyn+0x1e>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <USART_enuSendDataSyn+0x22>
	{
		return ES_NULL_PTR;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e06c      	b.n	8003b38 <USART_enuSendDataSyn+0xfc>
	}

	// Get USARTx Base address
	USART_RegDef_t *Local_USARTBaseAddr = MCAL_USART_BASEADDR_TO_CODE(Copy_pstrUSARTHandler->USARTx);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01f      	beq.n	8003aa6 <USART_enuSendDataSyn+0x6a>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d019      	beq.n	8003aa2 <USART_enuSendDataSyn+0x66>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d013      	beq.n	8003a9e <USART_enuSendDataSyn+0x62>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d00d      	beq.n	8003a9a <USART_enuSendDataSyn+0x5e>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d007      	beq.n	8003a96 <USART_enuSendDataSyn+0x5a>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b05      	cmp	r3, #5
 8003a8c:	d101      	bne.n	8003a92 <USART_enuSendDataSyn+0x56>
 8003a8e:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <USART_enuSendDataSyn+0x104>)
 8003a90:	e00a      	b.n	8003aa8 <USART_enuSendDataSyn+0x6c>
 8003a92:	2300      	movs	r3, #0
 8003a94:	e008      	b.n	8003aa8 <USART_enuSendDataSyn+0x6c>
 8003a96:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <USART_enuSendDataSyn+0x108>)
 8003a98:	e006      	b.n	8003aa8 <USART_enuSendDataSyn+0x6c>
 8003a9a:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <USART_enuSendDataSyn+0x10c>)
 8003a9c:	e004      	b.n	8003aa8 <USART_enuSendDataSyn+0x6c>
 8003a9e:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <USART_enuSendDataSyn+0x110>)
 8003aa0:	e002      	b.n	8003aa8 <USART_enuSendDataSyn+0x6c>
 8003aa2:	4b2b      	ldr	r3, [pc, #172]	; (8003b50 <USART_enuSendDataSyn+0x114>)
 8003aa4:	e000      	b.n	8003aa8 <USART_enuSendDataSyn+0x6c>
 8003aa6:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <USART_enuSendDataSyn+0x118>)
 8003aa8:	61bb      	str	r3, [r7, #24]


	u16 *LocalData;

	for(u8 i=0 ; i<Copy_u8Len ; i++)
 8003aaa:	2300      	movs	r3, #0
 8003aac:	77fb      	strb	r3, [r7, #31]
 8003aae:	e036      	b.n	8003b1e <USART_enuSendDataSyn+0xe2>
	{

		while(! MCAL_USART_GetFlagStatus(Local_USARTBaseAddr,MCAL_USART_FLAG_TXE));
 8003ab0:	bf00      	nop
 8003ab2:	2180      	movs	r1, #128	; 0x80
 8003ab4:	69b8      	ldr	r0, [r7, #24]
 8003ab6:	f7ff fdc5 	bl	8003644 <MCAL_USART_GetFlagStatus>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f8      	beq.n	8003ab2 <USART_enuSendDataSyn+0x76>

		if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_9Bits)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	795b      	ldrb	r3, [r3, #5]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d119      	bne.n	8003afc <USART_enuSendDataSyn+0xc0>
		{
			LocalData = (u16*) Copy_pu8Data;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	617b      	str	r3, [r7, #20]

			MCAL_USART_WriteData(Local_USARTBaseAddr, (*LocalData & (u16)0x01FF));
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	69b8      	ldr	r0, [r7, #24]
 8003ada:	f7ff fdc8 	bl	800366e <MCAL_USART_WriteData>

			if(Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Disable)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	799b      	ldrb	r3, [r3, #6]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <USART_enuSendDataSyn+0xb8>
			{
				Copy_pu8Data++;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	60bb      	str	r3, [r7, #8]
				Copy_pu8Data++;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	3301      	adds	r3, #1
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	e011      	b.n	8003b18 <USART_enuSendDataSyn+0xdc>
			}
			else
			{
				Copy_pu8Data++;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	3301      	adds	r3, #1
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	e00d      	b.n	8003b18 <USART_enuSendDataSyn+0xdc>
			}

		}
		else if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_8Bits)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	795b      	ldrb	r3, [r3, #5]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d109      	bne.n	8003b18 <USART_enuSendDataSyn+0xdc>
		{
			MCAL_USART_WriteData(Local_USARTBaseAddr ,*Copy_pu8Data & (u8)0x0FF);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	69b8      	ldr	r0, [r7, #24]
 8003b0e:	f7ff fdae 	bl	800366e <MCAL_USART_WriteData>
			Copy_pu8Data++;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3301      	adds	r3, #1
 8003b16:	60bb      	str	r3, [r7, #8]
	for(u8 i=0 ; i<Copy_u8Len ; i++)
 8003b18:	7ffb      	ldrb	r3, [r7, #31]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	77fb      	strb	r3, [r7, #31]
 8003b1e:	7ffa      	ldrb	r2, [r7, #31]
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d3c4      	bcc.n	8003ab0 <USART_enuSendDataSyn+0x74>
		}

	}


	while(! MCAL_USART_GetFlagStatus(Local_USARTBaseAddr,MCAL_USART_FLAG_TC));
 8003b26:	bf00      	nop
 8003b28:	2140      	movs	r1, #64	; 0x40
 8003b2a:	69b8      	ldr	r0, [r7, #24]
 8003b2c:	f7ff fd8a 	bl	8003644 <MCAL_USART_GetFlagStatus>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f8      	beq.n	8003b28 <USART_enuSendDataSyn+0xec>

	return Local_enuErrSt;
 8003b36:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40001400 	.word	0x40001400
 8003b44:	40005000 	.word	0x40005000
 8003b48:	40004c00 	.word	0x40004c00
 8003b4c:	40004800 	.word	0x40004800
 8003b50:	40004400 	.word	0x40004400
 8003b54:	40001000 	.word	0x40001000

08003b58 <USART_IRQHandling>:

	return Local_enuErrSt;
}

void USART_IRQHandling(USART_Handle_t *Copy_pstrUSARTHandler)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	if(Copy_pstrUSARTHandler == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 8126 	beq.w	8003db4 <USART_IRQHandling+0x25c>
	{
		return;
	}

	USART_RegDef_t *Local_USARTBaseAddr =  MCAL_USART_BASEADDR_TO_CODE(Copy_pstrUSARTHandler->USARTx);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01f      	beq.n	8003bb0 <USART_IRQHandling+0x58>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d019      	beq.n	8003bac <USART_IRQHandling+0x54>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d013      	beq.n	8003ba8 <USART_IRQHandling+0x50>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d00d      	beq.n	8003ba4 <USART_IRQHandling+0x4c>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d007      	beq.n	8003ba0 <USART_IRQHandling+0x48>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d101      	bne.n	8003b9c <USART_IRQHandling+0x44>
 8003b98:	4b88      	ldr	r3, [pc, #544]	; (8003dbc <USART_IRQHandling+0x264>)
 8003b9a:	e00a      	b.n	8003bb2 <USART_IRQHandling+0x5a>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e008      	b.n	8003bb2 <USART_IRQHandling+0x5a>
 8003ba0:	4b87      	ldr	r3, [pc, #540]	; (8003dc0 <USART_IRQHandling+0x268>)
 8003ba2:	e006      	b.n	8003bb2 <USART_IRQHandling+0x5a>
 8003ba4:	4b87      	ldr	r3, [pc, #540]	; (8003dc4 <USART_IRQHandling+0x26c>)
 8003ba6:	e004      	b.n	8003bb2 <USART_IRQHandling+0x5a>
 8003ba8:	4b87      	ldr	r3, [pc, #540]	; (8003dc8 <USART_IRQHandling+0x270>)
 8003baa:	e002      	b.n	8003bb2 <USART_IRQHandling+0x5a>
 8003bac:	4b87      	ldr	r3, [pc, #540]	; (8003dcc <USART_IRQHandling+0x274>)
 8003bae:	e000      	b.n	8003bb2 <USART_IRQHandling+0x5a>
 8003bb0:	4b87      	ldr	r3, [pc, #540]	; (8003dd0 <USART_IRQHandling+0x278>)
 8003bb2:	617b      	str	r3, [r7, #20]

	u8 Temp1 , Temp2;
	u16 *pData;


	Temp1 = MCAL_USART_GetFlagStatus(Local_USARTBaseAddr, MCAL_USART_FLAG_TC);
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	6978      	ldr	r0, [r7, #20]
 8003bb8:	f7ff fd44 	bl	8003644 <MCAL_USART_GetFlagStatus>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	74fb      	strb	r3, [r7, #19]
	Temp2 = MCAL_USART_ReadTXEI(Local_USARTBaseAddr);
 8003bc0:	6978      	ldr	r0, [r7, #20]
 8003bc2:	f7ff fc57 	bl	8003474 <MCAL_USART_ReadTXEI>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	74bb      	strb	r3, [r7, #18]

	if(Temp1 && Temp2)
 8003bca:	7cfb      	ldrb	r3, [r7, #19]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <USART_IRQHandling+0x7c>
 8003bd0:	7cbb      	ldrb	r3, [r7, #18]
 8003bd2:	2b00      	cmp	r3, #0
				Copy_pstrUSARTHandler->TxCallBackFunc();
			}
		}
	}

	Temp1 = MCAL_USART_GetFlagStatus(Local_USARTBaseAddr, MCAL_USART_FLAG_TXE);
 8003bd4:	2180      	movs	r1, #128	; 0x80
 8003bd6:	6978      	ldr	r0, [r7, #20]
 8003bd8:	f7ff fd34 	bl	8003644 <MCAL_USART_GetFlagStatus>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	74fb      	strb	r3, [r7, #19]
	Temp2 = MCAL_USART_ReadTXEI(Local_USARTBaseAddr);
 8003be0:	6978      	ldr	r0, [r7, #20]
 8003be2:	f7ff fc47 	bl	8003474 <MCAL_USART_ReadTXEI>
 8003be6:	4603      	mov	r3, r0
 8003be8:	74bb      	strb	r3, [r7, #18]

	if(Temp1 && Temp2)
 8003bea:	7cfb      	ldrb	r3, [r7, #19]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d059      	beq.n	8003ca4 <USART_IRQHandling+0x14c>
 8003bf0:	7cbb      	ldrb	r3, [r7, #18]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d056      	beq.n	8003ca4 <USART_IRQHandling+0x14c>
	{
		/******************* the interrupt because TXE ************************/
		if(Copy_pstrUSARTHandler->TxBusyState == USART_Busy_InTX)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	7e9b      	ldrb	r3, [r3, #26]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d152      	bne.n	8003ca4 <USART_IRQHandling+0x14c>
		{
			if(Copy_pstrUSARTHandler->TxLen > 0)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7e1b      	ldrb	r3, [r3, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d047      	beq.n	8003c96 <USART_IRQHandling+0x13e>
			{

				if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_9Bits)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	795b      	ldrb	r3, [r3, #5]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d12c      	bne.n	8003c68 <USART_IRQHandling+0x110>
				{
					pData = (u16*)Copy_pstrUSARTHandler->pTxBuffer;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	60fb      	str	r3, [r7, #12]
					MCAL_USART_WriteData(Local_USARTBaseAddr, (*pData & 0x1FF));
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	4619      	mov	r1, r3
 8003c20:	6978      	ldr	r0, [r7, #20]
 8003c22:	f7ff fd24 	bl	800366e <MCAL_USART_WriteData>


					if(Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Disable)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	799b      	ldrb	r3, [r3, #6]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d110      	bne.n	8003c50 <USART_IRQHandling+0xf8>
					{
						Copy_pstrUSARTHandler->TxLen-=2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	7e1b      	ldrb	r3, [r3, #24]
 8003c32:	3b02      	subs	r3, #2
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	761a      	strb	r2, [r3, #24]
						Copy_pstrUSARTHandler->pTxBuffer++;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	611a      	str	r2, [r3, #16]
						Copy_pstrUSARTHandler->pTxBuffer++;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	611a      	str	r2, [r3, #16]
 8003c4e:	e022      	b.n	8003c96 <USART_IRQHandling+0x13e>
					}
					else
					{
						Copy_pstrUSARTHandler->TxLen--;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7e1b      	ldrb	r3, [r3, #24]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	761a      	strb	r2, [r3, #24]
						Copy_pstrUSARTHandler->pTxBuffer++;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	611a      	str	r2, [r3, #16]
 8003c66:	e016      	b.n	8003c96 <USART_IRQHandling+0x13e>
					}


				}
				else if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_8Bits)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	795b      	ldrb	r3, [r3, #5]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d112      	bne.n	8003c96 <USART_IRQHandling+0x13e>
				{
					MCAL_USART_WriteData(Local_USARTBaseAddr,(*Copy_pstrUSARTHandler->pTxBuffer & 0x0FF));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6978      	ldr	r0, [r7, #20]
 8003c7c:	f7ff fcf7 	bl	800366e <MCAL_USART_WriteData>

					Copy_pstrUSARTHandler->TxLen--;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	7e1b      	ldrb	r3, [r3, #24]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	761a      	strb	r2, [r3, #24]
					Copy_pstrUSARTHandler->pTxBuffer++;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	611a      	str	r2, [r3, #16]
				}

			}

			if(Copy_pstrUSARTHandler->TxLen == 0)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	7e1b      	ldrb	r3, [r3, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <USART_IRQHandling+0x14c>
			{
				MCAL_USART_DisableTXEI(Local_USARTBaseAddr);
 8003c9e:	6978      	ldr	r0, [r7, #20]
 8003ca0:	f7ff fbd8 	bl	8003454 <MCAL_USART_DisableTXEI>
			}
		}
	}


	Temp1 = MCAL_USART_GetFlagStatus(Local_USARTBaseAddr, MCAL_USART_FLAG_RXNE);
 8003ca4:	2120      	movs	r1, #32
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7ff fccc 	bl	8003644 <MCAL_USART_GetFlagStatus>
 8003cac:	4603      	mov	r3, r0
 8003cae:	74fb      	strb	r3, [r7, #19]
	Temp2 = MCAL_USART_ReadRXNI(Local_USARTBaseAddr);
 8003cb0:	6978      	ldr	r0, [r7, #20]
 8003cb2:	f7ff fc00 	bl	80034b6 <MCAL_USART_ReadRXNI>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	74bb      	strb	r3, [r7, #18]

	if(Temp1 && Temp2)
 8003cba:	7cfb      	ldrb	r3, [r7, #19]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d07a      	beq.n	8003db6 <USART_IRQHandling+0x25e>
 8003cc0:	7cbb      	ldrb	r3, [r7, #18]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d077      	beq.n	8003db6 <USART_IRQHandling+0x25e>
	{
		/******************* the interrupt because RXNE ************************/
		if(Copy_pstrUSARTHandler->RxBusyState == USART_Busy_InRX)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	7edb      	ldrb	r3, [r3, #27]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d173      	bne.n	8003db6 <USART_IRQHandling+0x25e>
		{
			if(Copy_pstrUSARTHandler->RxLen > 0)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	7e5b      	ldrb	r3, [r3, #25]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d060      	beq.n	8003d98 <USART_IRQHandling+0x240>
			{

				if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_9Bits)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	795b      	ldrb	r3, [r3, #5]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d134      	bne.n	8003d48 <USART_IRQHandling+0x1f0>
				{

					if(Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Disable)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	799b      	ldrb	r3, [r3, #6]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11b      	bne.n	8003d1e <USART_IRQHandling+0x1c6>
					{
						// Read 9 bits
						*(u16*)Copy_pstrUSARTHandler->pRxBuffer = (MCAL_USART_ReadData(Local_USARTBaseAddr) & (u16)0x01FF);
 8003ce6:	6978      	ldr	r0, [r7, #20]
 8003ce8:	f7ff fcd0 	bl	800368c <MCAL_USART_ReadData>
 8003cec:	4603      	mov	r3, r0
 8003cee:	461a      	mov	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf8:	b292      	uxth	r2, r2
 8003cfa:	801a      	strh	r2, [r3, #0]

						Copy_pstrUSARTHandler->RxLen-=2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	7e5b      	ldrb	r3, [r3, #25]
 8003d00:	3b02      	subs	r3, #2
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	765a      	strb	r2, [r3, #25]
						Copy_pstrUSARTHandler->pRxBuffer++;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	615a      	str	r2, [r3, #20]
						Copy_pstrUSARTHandler->pRxBuffer++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	615a      	str	r2, [r3, #20]
 8003d1c:	e03c      	b.n	8003d98 <USART_IRQHandling+0x240>

					}
					else
					{
						// Read 8 bits
						*Copy_pstrUSARTHandler->pRxBuffer = (MCAL_USART_ReadData(Local_USARTBaseAddr) & (u8)0x0FF);
 8003d1e:	6978      	ldr	r0, [r7, #20]
 8003d20:	f7ff fcb4 	bl	800368c <MCAL_USART_ReadData>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]

						Copy_pstrUSARTHandler->RxLen--;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	7e5b      	ldrb	r3, [r3, #25]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	765a      	strb	r2, [r3, #25]
						Copy_pstrUSARTHandler->pRxBuffer++;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	615a      	str	r2, [r3, #20]
 8003d46:	e027      	b.n	8003d98 <USART_IRQHandling+0x240>
					}


				}
				else if(Copy_pstrUSARTHandler->USART_Config.USART_WordLen == USART_WordLen_8Bits)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	795b      	ldrb	r3, [r3, #5]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d123      	bne.n	8003d98 <USART_IRQHandling+0x240>
				{

					if(Copy_pstrUSARTHandler->USART_Config.USART_Parity == USART_Parity_Disable)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	799b      	ldrb	r3, [r3, #6]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <USART_IRQHandling+0x214>
					{
						// Read 8 bits
						*Copy_pstrUSARTHandler->pRxBuffer = (u8)(MCAL_USART_ReadData(Local_USARTBaseAddr) & (u8)0x0FF);
 8003d58:	6978      	ldr	r0, [r7, #20]
 8003d5a:	f7ff fc97 	bl	800368c <MCAL_USART_ReadData>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461a      	mov	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e00a      	b.n	8003d82 <USART_IRQHandling+0x22a>

					}
					else
					{
						// Read 7 bits
						*Copy_pstrUSARTHandler->pRxBuffer = (u8)(MCAL_USART_ReadData(Local_USARTBaseAddr) & (u8)0x07F);
 8003d6c:	6978      	ldr	r0, [r7, #20]
 8003d6e:	f7ff fc8d 	bl	800368c <MCAL_USART_ReadData>
 8003d72:	4603      	mov	r3, r0
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]
					}


					Copy_pstrUSARTHandler->RxLen--;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	7e5b      	ldrb	r3, [r3, #25]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	765a      	strb	r2, [r3, #25]
					Copy_pstrUSARTHandler->pRxBuffer++;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	615a      	str	r2, [r3, #20]
				}

			}

			if(!Copy_pstrUSARTHandler->RxLen)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	7e5b      	ldrb	r3, [r3, #25]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <USART_IRQHandling+0x25e>
			{
				MCAL_USART_DisableRXNI(Local_USARTBaseAddr);
 8003da0:	6978      	ldr	r0, [r7, #20]
 8003da2:	f7ff fb78 	bl	8003496 <MCAL_USART_DisableRXNI>
				Copy_pstrUSARTHandler->RxBusyState = USART_Ready;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	76da      	strb	r2, [r3, #27]
				//CALLBACK function
				Copy_pstrUSARTHandler->RxCallBackFunc();
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	4798      	blx	r3
 8003db2:	e000      	b.n	8003db6 <USART_IRQHandling+0x25e>
		return;
 8003db4:	bf00      	nop
			}
		}
	}
}
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40001400 	.word	0x40001400
 8003dc0:	40005000 	.word	0x40005000
 8003dc4:	40004c00 	.word	0x40004c00
 8003dc8:	40004800 	.word	0x40004800
 8003dcc:	40004400 	.word	0x40004400
 8003dd0:	40001000 	.word	0x40001000

08003dd4 <memset>:
 8003dd4:	4402      	add	r2, r0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d100      	bne.n	8003dde <memset+0xa>
 8003ddc:	4770      	bx	lr
 8003dde:	f803 1b01 	strb.w	r1, [r3], #1
 8003de2:	e7f9      	b.n	8003dd8 <memset+0x4>

08003de4 <__libc_init_array>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	4d0d      	ldr	r5, [pc, #52]	; (8003e1c <__libc_init_array+0x38>)
 8003de8:	4c0d      	ldr	r4, [pc, #52]	; (8003e20 <__libc_init_array+0x3c>)
 8003dea:	1b64      	subs	r4, r4, r5
 8003dec:	10a4      	asrs	r4, r4, #2
 8003dee:	2600      	movs	r6, #0
 8003df0:	42a6      	cmp	r6, r4
 8003df2:	d109      	bne.n	8003e08 <__libc_init_array+0x24>
 8003df4:	4d0b      	ldr	r5, [pc, #44]	; (8003e24 <__libc_init_array+0x40>)
 8003df6:	4c0c      	ldr	r4, [pc, #48]	; (8003e28 <__libc_init_array+0x44>)
 8003df8:	f000 f826 	bl	8003e48 <_init>
 8003dfc:	1b64      	subs	r4, r4, r5
 8003dfe:	10a4      	asrs	r4, r4, #2
 8003e00:	2600      	movs	r6, #0
 8003e02:	42a6      	cmp	r6, r4
 8003e04:	d105      	bne.n	8003e12 <__libc_init_array+0x2e>
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0c:	4798      	blx	r3
 8003e0e:	3601      	adds	r6, #1
 8003e10:	e7ee      	b.n	8003df0 <__libc_init_array+0xc>
 8003e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e16:	4798      	blx	r3
 8003e18:	3601      	adds	r6, #1
 8003e1a:	e7f2      	b.n	8003e02 <__libc_init_array+0x1e>
 8003e1c:	08003eac 	.word	0x08003eac
 8003e20:	08003eac 	.word	0x08003eac
 8003e24:	08003eac 	.word	0x08003eac
 8003e28:	08003eb0 	.word	0x08003eb0

08003e2c <memcpy>:
 8003e2c:	440a      	add	r2, r1
 8003e2e:	4291      	cmp	r1, r2
 8003e30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003e34:	d100      	bne.n	8003e38 <memcpy+0xc>
 8003e36:	4770      	bx	lr
 8003e38:	b510      	push	{r4, lr}
 8003e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e42:	4291      	cmp	r1, r2
 8003e44:	d1f9      	bne.n	8003e3a <memcpy+0xe>
 8003e46:	bd10      	pop	{r4, pc}

08003e48 <_init>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr

08003e54 <_fini>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr
