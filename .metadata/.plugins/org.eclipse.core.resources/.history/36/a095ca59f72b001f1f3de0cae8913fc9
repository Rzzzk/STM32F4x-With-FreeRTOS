

/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include "FreeRTOS.h"
#include "task.h"
#include "main.h"


void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName);


void aRCC_Init(void);
void aGPIO_USART2_Init(void);
void aUSART2_Init(void);
void NVIC_Init(void);
void USART_CallBackFun(void);
void PreOS_Init(void);
NVIC_Handle_t aNvic_Hn;
GPIO_Handle_t aLED4pin;
GPIO_Handle_t aUART2pin;
USART_Handle_t aUSART2_hn;
u8 aStringData[] = "Hello FreeRTOS\r\n";

void aLED4_Init(void);
void aLED4_Tog(void);

void aButton_Init(void);
void aReadUserButton(GPIO_PinState_t *State);
void delay(void);





GPIO_Handle_t aLED4pin, aBUTpin;
NVIC_Handle_t aEXTI0;


void Task_A(void *p)
{

	u8 taskMess[] = "I am in task A\r\n";
	u8 len = strlen((char*)aStringData);

	while(1)
	{
		USART_enuSendDataSyn(&aUSART2_hn,taskMess,len);
		vTaskDelay(1000);
	}
}




int main(void)
{

	/* application initializations */
	PreOS_Init();


	/********  Tasks Creation     ***********/
	xTaskCreate(Task_A, "task A", configMINIMAL_STACK_SIZE, NULL, 2, NULL);

	/*******   Start the FreeRTOS **********/
	vTaskStartScheduler();

	while(1);


} // end of main //



void PreOS_Init(void)
{
	/**********  Variable  ****************/

	u8 len = strlen((char*)aStringData);

	/**********   RCC   *******************/

	aRCC_Init();
	RCC_enuAHB1PeriphClkCtrl(AHB1_GPIOA, ENABLE);
	RCC_enuAHB1PeriphClkCtrl(AHB1_GPIOD, ENABLE);
	RCC_enuAPB1PeriphClkCtrl(17, ENABLE);//USART2

	/*********   Cortex-m4   ***************/
	NVIC_Init();
	/*********   GPIO   ********************/
	aGPIO_USART2_Init();
	aLED4_Init();
	aButton_Init();
	/*********   USART  *******************/
	aUSART2_Init();
	/********    UART   *******************/
	USART_enuSendDataSyn(&aUSART2_hn,aStringData,len);
}


void aRCC_Init(void)
{
	RCC_Handler_t rcc;
	rcc.RCC_SysClkSource = RCC_SYSCLK_HSI;
	rcc.RCC_AHBPrescaler = RCC_AHB_not_divided;
	rcc.RCC_APB1Prescaler= RCC_APB_not_divided;
	rcc.RCC_APB2Prescaler= RCC_APB_not_divided;

	// 1. RCC initialization

	RCC_enuInitSystemClk(&rcc);
}

void aLED4_Init(void)
{

	aLED4pin.GPIO_Port = GPIO_PORTD;

	aLED4pin.GPIO_Config.GPIO_PinNumber      = GPIO_PIN12;
	aLED4pin.GPIO_Config.GPIO_PinMode        = GPIO_Mode_output;
	aLED4pin.GPIO_Config.GPIO_PinSpeed       = GPIO_Speed_Fast;
	aLED4pin.GPIO_Config.GPIO_PinOPType      = GPIO_Output_PP;
	aLED4pin.GPIO_Config.GPIO_PinPuPdControl = GPIO_Float;

	GPIO_enuInit(&aLED4pin);
}


void aButton_Init(void)
{
	aBUTpin.GPIO_Port = GPIO_PORTA;

	aBUTpin.GPIO_Config.GPIO_PinNumber      = GPIO_PIN0;
	aBUTpin.GPIO_Config.GPIO_PinMode        = GPIO_Mode_EXTI_RT;
	aBUTpin.GPIO_Config.GPIO_PinSpeed       = GPIO_Speed_Fast;
	aBUTpin.GPIO_Config.GPIO_PinOPType      = GPIO_Output_PP;
	aBUTpin.GPIO_Config.GPIO_PinPuPdControl = GPIO_PullDown;
	aBUTpin.GPIO_Config.EXTI_pfCallBackFunc = aLED4_Tog;

	GPIO_enuInit(&aBUTpin);
}


void aLED4_Tog(void)
{
	u8 taskMess[] = "I am in EXTI0 ISR \r\n";
	u8 len = strlen((char*)aStringData);
	USART_enuSendDataSyn(&aUSART2_hn,taskMess,len);

	GPIO_enuToggleOutputPin(aLED4pin.GPIO_Port, aLED4pin.GPIO_Config.GPIO_PinNumber );
	delay();
}

void delay(void)
{
	for (u32 i=0; i<1000000; i++)
	{
		(void)i;
	}
}

void aUSART2_Init(void)
{

	aUSART2_hn.USARTx = USART_2;

	aUSART2_hn.USART_Config.USART_Mode       = USART_Mode_RxTx;
	aUSART2_hn.USART_Config.USART_WordLen    = USART_WordLen_8Bits;
	aUSART2_hn.USART_Config.USART_Parity     = USART_Parity_Disable;
	aUSART2_hn.USART_Config.USART_HwFlowCtrl = USART_HwFlowCtrl_None;
	aUSART2_hn.USART_Config.USART_StopBits   = USART_StopBits_1;
	aUSART2_hn.USART_Config.USART_BaudRate   = USART_STD_BAUD_115200;
	aUSART2_hn.RxBusyState = USART_Ready;

	USART_enuInit(&aUSART2_hn);
}



void aGPIO_USART2_Init(void)
{
	aUART2pin.GPIO_Port = GPIO_PORTA;

	aUART2pin.GPIO_Config.GPIO_PinNumber      = GPIO_PIN2;
	aUART2pin.GPIO_Config.GPIO_PinMode        = GPIO_Mode_altFun;
	aUART2pin.GPIO_Config.GPIO_PinSpeed       = GPIO_Speed_Low;
	aUART2pin.GPIO_Config.GPIO_PinOPType      = GPIO_Output_PP;
	aUART2pin.GPIO_Config.GPIO_PinPuPdControl = GPIO_PullUp;
	aUART2pin.GPIO_Config.GPIO_PinAltFunMode  =7;

	GPIO_enuInit(&aUART2pin);

	aUART2pin.GPIO_Config.GPIO_PinNumber      = GPIO_PIN3;

	GPIO_enuInit(&aUART2pin);
}


void NVIC_Init(void)
{
	SCB_enuInit(PriGrField_4_GoupPriBits_0_SubpriBits);
	aNvic_Hn.IRQn = USART2_IRQn;
	aNvic_Hn.NVIC_Confg.PendingFlag = NVIC_PendFlagIsLow;
	aNvic_Hn.NVIC_Confg.GroupPriority = 4;
	aNvic_Hn.NVIC_Confg.SubPriority   = 0;
	NVIC_enuInitIRQn(&aNvic_Hn);

	aNvic_Hn.IRQn = EXTI0_IRQn;
	aNvic_Hn.NVIC_Confg.PendingFlag = NVIC_PendFlagIsLow;
	aNvic_Hn.NVIC_Confg.GroupPriority = 2;
	aNvic_Hn.NVIC_Confg.SubPriority   = 0;
	NVIC_enuInitIRQn(&aNvic_Hn);
}


void USART_CallBackFun(void)
{

}

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
	// Handle the stack overflow here
	(void)xTask; // To avoid compiler warnings
	(void)pcTaskName; // To avoid compiler warnings

	// Enter an infinite loop to halt the system
	while (1) {
	}
}
