

/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */


#include "main.h"


void aRCC_Init(void);

void aSysTick_Delay(void);

void aGPIO_USART2_Init(void);
void aUSART2_Init(void);

void NVIC_Init(void);


void USART_CallBackFun(void);

NVIC_Handle_t aNvic_Hn;
SysTick_Handle_t aSysTick_hn;
GPIO_Handle_t aLED4pin;

GPIO_Handle_t aUART2pin;
USART_Handle_t aUSART2_hn;

u8 data[] = "The application is running\r\n";
u8 receivedData[10];
u8 counter = 0;
u8 buffer;
u8 flag = RESET;



int main(void)
{
	/***************************************  Variable  ***************************************************/

	u8 len = strlen((char*)data);

	/*****************************************   RCC   ****************************************************/

	aRCC_Init();
	RCC_enuAHB1PeriphClkCtrl(AHB1_GPIOA, ENABLE);
	RCC_enuAHB1PeriphClkCtrl(AHB1_GPIOD, ENABLE);
	RCC_enuAPB1PeriphClkCtrl(17, ENABLE);//USART2


	/*****************************************   Cortex-m4   **********************************************/

	SysTick_enuInit(SysTick_ProcessorClock);
	NVIC_Init();

	/*****************************************   GPIO  ****************************************************/

	aGPIO_USART2_Init();

	/*****************************************   USART  ****************************************************/

	aUSART2_Init();

	/**************************************** Loop forever *************************************************/

	USART_enuSendDataSyn(&aUSART2_hn,data,len);


	USART_enuReceiveDataIT(&aUSART2_hn, receivedData , 4 , USART_CallBackFun);

	while(aUSART2_hn.RxBusyState != USART_Ready);

	USART_enuSendDataSyn(&aUSART2_hn,receivedData,4);


	while(1)
	{

		USART_enuReceiveDataIT(&aUSART2_hn, receivedData , 4 , USART_CallBackFun);

		while(aUSART2_hn.RxBusyState != USART_Ready);

		USART_enuSendDataSyn(&aUSART2_hn,receivedData,4);

	}


} ///////////////////////// end of main ////////////////////////////


void aRCC_Init(void)
{
	RCC_SysClk_t clkSysType;
	u32 clk;

	RCC_Handler_t rcc;
	rcc.RCC_SysClkSource = RCC_SYSCLK_HSI;
	rcc.RCC_AHBPrescaler = RCC_AHB_not_divided;
	rcc.RCC_APB1Prescaler= RCC_APB_not_divided;
	rcc.RCC_APB2Prescaler= RCC_APB_not_divided;

	/*
	 * 1. RCC initialization
	 */
	RCC_enuInitSystemClk(&rcc);


	/*
	 * 2. Check
	 */
	RCC_enuGetSysClkType(&clkSysType);

	if(clkSysType == RCC_SYSCLK_HSI)
	{
		printf("RCC initialization,, done successfully \n");
		printf("System clock type is : HSI \n");
		RCC_enuGetSysClkValue(&clk); // must be 16 MHz
		printf("System Clock value = %ld \n",clk);
	}
	else
	{
		printf("RCC initialization is failed \n");
	}
}




void aSysTick_Delay(void) // delay 1000 ms
{

	aSysTick_hn.Type = SysTick_BusyWait;
	aSysTick_hn.cofig.BasyWaitTimeOut = 20000000;
	aSysTick_hn.cofig.LoadValue = 16000000;

	SysTick_enuStart(&aSysTick_hn);
}


void aUSART2_Init(void)
{

	aUSART2_hn.USARTx = USART_2;

	aUSART2_hn.USART_Config.USART_Mode = USART_Mode_RxTx;
	aUSART2_hn.USART_Config.USART_WordLen = USART_WordLen_8Bits;
	aUSART2_hn.USART_Config.USART_Parity = USART_Parity_Disable;
	aUSART2_hn.USART_Config.USART_HwFlowCtrl = USART_HwFlowCtrl_None;
	aUSART2_hn.USART_Config.USART_StopBits = USART_StopBits_1;
	aUSART2_hn.USART_Config.USART_BaudRate = USART_STD_BAUD_115200;
	aUSART2_hn.RxBusyState = USART_Ready;

	USART_enuInit(&aUSART2_hn);
}



void aGPIO_USART2_Init(void)
{
	aUART2pin.GPIO_Port = GPIO_PORTA;

	aUART2pin.GPIO_Config.GPIO_PinNumber      = GPIO_PIN2;
	aUART2pin.GPIO_Config.GPIO_PinMode        = GPIO_Mode_altFun;
	aUART2pin.GPIO_Config.GPIO_PinSpeed       = GPIO_Speed_Low;
	aUART2pin.GPIO_Config.GPIO_PinOPType      = GPIO_Output_PP;
	aUART2pin.GPIO_Config.GPIO_PinPuPdControl = GPIO_PullUp;
	aUART2pin.GPIO_Config.GPIO_PinAltFunMode  =7;

	GPIO_enuInit(&aUART2pin);

	aUART2pin.GPIO_Config.GPIO_PinNumber      = GPIO_PIN3;

	GPIO_enuInit(&aUART2pin);
}


void NVIC_Init(void)
{
    SCB_enuInit(PriGrField_4_GoupPriBits_0_SubpriBits);
	aNvic_Hn.IRQn = USART2_IRQn;

	aNvic_Hn.NVIC_Confg.PendingFlag = NVIC_PendFlagIsLow;

	aNvic_Hn.NVIC_Confg.GroupPriority = 4;
	aNvic_Hn.NVIC_Confg.SubPriority   = 0;

	NVIC_enuInitIRQn(&aNvic_Hn);

}


void USART_CallBackFun(void)
{

}


